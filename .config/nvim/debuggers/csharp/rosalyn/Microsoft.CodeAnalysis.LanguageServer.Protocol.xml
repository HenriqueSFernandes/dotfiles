<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.LanguageServer.Protocol</name>
    </assembly>
    <members>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Extensions.GetUriForRenamedDocument(Microsoft.CodeAnalysis.TextDocument)">
            <summary>
            Generate the Uri of a document by replace the name in file path using the document's name.
            Used to generate the correct Uri when rename a document, because calling <seealso cref="M:Microsoft.CodeAnalysis.Document.WithName(System.String)"/> doesn't update the file path.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Extensions.GetTextDocuments(Microsoft.CodeAnalysis.Solution,System.Uri)">
            <summary>
            Get all regular and additional <see cref="T:Microsoft.CodeAnalysis.TextDocument"/>s for the given <paramref name="documentUri"/>.
            This will not return source generated documents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Extensions.GetDocumentAsync(Microsoft.CodeAnalysis.Solution,Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.Threading.CancellationToken)">
            <summary>
            Finds the document for a TextDocumentIdentifier, potentially returning a source-generated file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Extensions.GetTextDocumentAsync(Microsoft.CodeAnalysis.Solution,Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.Threading.CancellationToken)">
            <summary>
            Finds the TextDocument for a TextDocumentIdentifier, potentially returning a source-generated file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Extensions.GetVsImageData(Microsoft.CodeAnalysis.Glyph)">
            <summary>
            Retrieves the <see cref="T:System.Guid"/> and id that can represent a particular <see cref="T:Microsoft.CodeAnalysis.Glyph"/>
            in the Visual Studio client.
            </summary>
            <param name="glyph"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Extensions.KnownImageIds">
            <summary>
            This is the subset of values from <c>Microsoft.VisualStudio.Imaging.KnownImageIds</c> that we
            care about. Copying them here avoids referencing Microsoft.VisualStudio.ImageCatalog.dll.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.RoslynTagToCompletionItemKinds">
            <summary>
            Mapping from tags to lsp completion item kinds.  The value lists the potential lsp kinds from
            least-preferred to most preferred.  More preferred kinds will be chosen if the client states they support
            it.  This mapping allows values including extensions to the kinds defined by VS (but not in the core LSP
            spec).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.RoslynTagToCompletionItemTags">
            <summary>
            Mapping from tags to LSP completion item tags.  The value lists the potential LSP tags from
            least-preferred to most preferred.  More preferred kinds will be chosen if the client states they support
            it.  This mapping allows values including extensions to the kinds defined by VS (but not in the core LSP
            spec).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.LspJsonSerializerOptions">
            <summary>
            Options that know how to serialize / deserialize basic LSP types.
            Useful when there are particular fields that are not serialized or deserialized by normal request handling (for example
            deserializing a field that is typed as object instead of a concrete type).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.CreateAbsoluteUri(System.String)">
            <summary>
            Converts an absolute local file path or an absolute URL string to <see cref="T:System.Uri"/>.
            </summary>
            <exception cref="T:System.UriFormatException">
            The <paramref name="absolutePath"/> can't be represented as <see cref="T:System.Uri"/>.
            For example, UNC paths with invalid characters in server name.
            </exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.ChangedDocumentsToTextDocumentEditsAsync``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.DocumentId},System.Func{Microsoft.CodeAnalysis.DocumentId,``0},System.Func{Microsoft.CodeAnalysis.DocumentId,``0},Microsoft.CodeAnalysis.IDocumentTextDifferencingService,System.Threading.CancellationToken)">
            <summary>
            Compute all the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentEdit"/> for the input list of changed documents.
            Additionally maps the locations of the changed documents if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.ConvertDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticData,System.Boolean,Microsoft.CodeAnalysis.Project,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            Converts from <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData"/> to <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/>
            </summary>
            <param name="diagnosticData">The diagnostic to convert</param>
            <param name="supportsVisualStudioExtensions">Whether the client is Visual Studio</param>
            <param name="project">The project the diagnostic is relevant to</param>
            <param name="isLiveSource">Whether the diagnostic is considered "live" and should supersede others</param>
            <param name="potentialDuplicate">Whether the diagnostic is potentially a duplicate to a build diagnostic</param>
            <param name="globalOptionService">The global options service</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ProtocolConversions.ConvertTags(Microsoft.CodeAnalysis.Diagnostics.DiagnosticData,System.Boolean,System.Boolean)">
            <summary>
            If you make change in this method, please also update the corresponding file in
            src\VisualStudio\Xaml\Impl\Implementation\LanguageServer\Handler\Diagnostics\AbstractPullDiagnosticHandler.cs
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.HostWorkspace.LanguageServerProjectSystemOptionsStorage.BinaryLogPath">
            <summary>
            A folder to log binlogs to when running design-time builds.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.HostWorkspace.LanguageServerProjectSystemOptionsStorage.EnableAutomaticRestore">
            <summary>
            Whether or not automatic nuget restore is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1">
            <summary>
            Helper type to allow command handlers to report data either in a streaming fashion (if a client supports that),
            or as an array of results.  This type is thread-safe in the same manner that <see cref="T:System.IProgress`1"/> is
            expected to be.  Namely, multiple client can be calling <see cref="M:System.IProgress`1.Report(`0)"/> on it at the same
            time.  This is safe, though the order that the items are reported in when called concurrently is not specified.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1._underlyingProgress">
            <summary>
            The progress stream to report results to.  May be <see langword="null"/> for clients that do not support streaming.
            If <see langword="null"/> then <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1._buffer"/> will be non null and will contain all the produced values.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1._buffer">
            <summary>
            A buffer that results are held in if the client does not support streaming.  Values of this can be retrieved
            using <see cref="M:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1.GetValues"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1.Report(`0)">
            <summary>
            Report a value either in a streaming or buffered fashion depending on what the client supports.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1.GetValues">
            <summary>
            Gets the set of buffered values.  Will return null if the client supports streaming.  Must be called after
            all calls to <see cref="M:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1.Report(`0)"/> have been made.  Not safe to call concurrently with any call to <see
            cref="M:Microsoft.CodeAnalysis.LanguageServer.Handler.BufferedProgress`1.Report(`0)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActions.CodeActionHelpers.GetVSCodeActionsAsync(Roslyn.LanguageServer.Protocol.CodeActionParams,Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.CodeFixes.ICodeFixService,Microsoft.CodeAnalysis.CodeRefactorings.ICodeRefactoringService,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get, order, and filter code actions, and then transform them into VSCodeActions or CodeActions based on <paramref name="hasVsLspCapability"/>.
            </summary>
            <remarks>
            Used by CodeActionsHandler.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActions.CodeActionHelpers.GenerateCodeActions(Roslyn.LanguageServer.Protocol.CodeActionParams,Microsoft.CodeAnalysis.UnifiedSuggestions.IUnifiedSuggestedAction,Roslyn.LanguageServer.Protocol.CodeActionKind)">
            <summary>
            Generate the matching code actions for <paramref name="suggestedAction"/>. If it contains nested code actions, flatten them into an array.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActions.CodeActionHelpers.GetCodeActionsAsync(Microsoft.CodeAnalysis.TextDocument,Roslyn.LanguageServer.Protocol.Range,Microsoft.CodeAnalysis.CodeFixes.ICodeFixService,Microsoft.CodeAnalysis.CodeRefactorings.ICodeRefactoringService,System.String,System.Threading.CancellationToken)">
            <summary>
            Get, order, and filter code actions.
            </summary>
            <remarks>
            Used by CodeActionResolveHandler and RunCodeActionHandler.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActions.CodeActionHelpers.GetNestedActionsFromActionSet(Microsoft.CodeAnalysis.UnifiedSuggestions.IUnifiedSuggestedAction,System.String)">
            <summary>
            Generates a code action with its nested actions properly set.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActions.CodeActionResolveData">
            <summary>
            This class provides the intermediate data passed between CodeActionsHandler, CodeActionResolveHandler,
            and RunCodeActionsHandler. The class provides enough information for each handler to identify the code
            action that it is dealing with. The information is passed along via the Data property in LSP.VSCodeAction. 
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActions.CodeActionResolveData.UniqueIdentifier">
            <summary>
            The unique identifier of a code action. No two code actions should have the same unique identifier.
            </summary>
            <remarks>
            The unique identifier is currently set as:
            name of top level code action + '|' + name of nested code action + '|' + name of nested nested code action + etc.
            e.g. 'Suppress or Configure issues|Suppress IDEXXXX|in Source'
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActionResolveHandler">
            <summary>
            Resolves a code action by filling out its Edit property. The handler is triggered only when a user hovers over a
            code action. This system allows the basic code action data to be computed quickly, and the complex data, to be
            computed only when necessary (i.e. when hovering/previewing a code action).
            <para>
            This system only supports text edits to documents.  In the future, supporting complex edits (including changes to
            project files) would be desirable.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeActionsHandler">
            <summary>
            Handles the initial request for code actions. Leaves the Edit and Command properties of the returned
            VSCodeActions blank, as these properties should be populated by the CodeActionsResolveHandler only when the user
            requests them.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeLens.CodeLensResolveData">
            <summary>
            Datatype storing the information needed to resolve a particular code lens item.
            </summary>
            <param name="SyntaxVersion">the syntax version of the text document.</param>
            <param name="ListIndex">the index of the specific code lens item in the original list.</param>
            <param name="TextDocument">the text document associated with the code lens to resolve.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeLens.CodeLensResolveData.#ctor(System.String,System.Int32,Roslyn.LanguageServer.Protocol.TextDocumentIdentifier)">
            <summary>
            Datatype storing the information needed to resolve a particular code lens item.
            </summary>
            <param name="SyntaxVersion">the syntax version of the text document.</param>
            <param name="ListIndex">the index of the specific code lens item in the original list.</param>
            <param name="TextDocument">the text document associated with the code lens to resolve.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeLens.CodeLensResolveData.SyntaxVersion">
            <summary>the syntax version of the text document.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeLens.CodeLensResolveData.ListIndex">
            <summary>the index of the specific code lens item in the original list.</summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.CodeLens.CodeLensResolveHandler.ClientReferencesCommand">
            <summary>
            Command name implemented by the client and invoked when the references code lens is selected.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Completion.CompletionListCache">
            <summary>
            Caches completion lists in between calls to CompletionHandler and
            CompletionResolveHandler. Used to avoid unnecessary recomputation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Completion.CompletionResolveData">
            <summary>
            Provides the intermediate data passed from CompletionHandler to CompletionResolveHandler.
            Passed along via <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Data"/>.
            <param name="ResultId">the resultId associated with the completion created on original request.</param>
            <param name="TextDocument">the text document associated with the completion request to resolve.</param>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Completion.CompletionResolveData.#ctor(System.Int64,Roslyn.LanguageServer.Protocol.TextDocumentIdentifier)">
            <summary>
            Provides the intermediate data passed from CompletionHandler to CompletionResolveHandler.
            Passed along via <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Data"/>.
            <param name="ResultId">the resultId associated with the completion created on original request.</param>
            <param name="TextDocument">the text document associated with the completion request to resolve.</param>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Completion.CompletionResultFactory.CompleteComplexEditCommand">
            <summary>
            Command name implemented by the client and invoked when an item with complex edit is committed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.CompletionHandler">
            <summary>
            Handle a completion request.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.CompletionResolveHandler">
            <summary>
            Handle a completion resolve request to add description.
            </summary>
            <remarks>
            This isn't a <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ILspServiceDocumentRequestHandler`2" /> because it could return null.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Configuration.DidChangeConfigurationNotificationHandler._configurationItems">
            <summary>
            All the <see cref="P:Roslyn.LanguageServer.Protocol.ConfigurationItem.Section"/> needs to be refreshed from the client. 
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Configuration.DidChangeConfigurationNotificationHandler._optionsAndLanguageNamesToRefresh">
            <summary>
            The matching option and its language name needs to be refreshed. The order matches <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Configuration.DidChangeConfigurationNotificationHandler._configurationItems"/> sent to the client.
            LanguageName would be null if the option is <see cref="T:Microsoft.CodeAnalysis.Options.ISingleValuedOption"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Configuration.DidChangeConfigurationNotificationHandler.GenerateGlobalConfigurationItems">
            <summary>
            Generate the configuration items send to the client.
            For each option, generate its full name. If the option is <see cref="T:Microsoft.CodeAnalysis.Options.ISingleValuedOption"/> it's is what we sent to the client.
            If it is <see cref="T:Microsoft.CodeAnalysis.Options.IPerLanguageValuedOption"/>, then generate two configurationItems with prefix visual_basic and csharp.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Configuration.DidChangeConfigurationNotificationHandler.GenerateFullNameForOption(Microsoft.CodeAnalysis.Options.IOption2)">
            <summary>
            Generate the full name of <param name="option"/>.
            It would be in the format like {optionGroupName}.{OptionName}
            </summary>
            <remarks>
            Example:Full name of <see cref="F:Microsoft.CodeAnalysis.ImplementType.ImplementTypeOptionsStorage.InsertionBehavior"/> would be:
            implement_type.dotnet_member_insertion_location
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3">
            <summary>
            Root type for both document and workspace diagnostic pull requests.
            </summary>
            <typeparam name="TDiagnosticsParams">The LSP input param type</typeparam>
            <typeparam name="TReport">The LSP type that is reported via IProgress</typeparam>
            <typeparam name="TReturn">The LSP type that is returned on completion of the request.</typeparam>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.#ctor(Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticsRefresher,Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            Root type for both document and workspace diagnostic pull requests.
            </summary>
            <typeparam name="TDiagnosticsParams">The LSP input param type</typeparam>
            <typeparam name="TReport">The LSP type that is reported via IProgress</typeparam>
            <typeparam name="TReturn">The LSP type that is returned on completion of the request.</typeparam>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.WorkspaceDiagnosticIdentifier">
            <summary>
            Special value we use to designate workspace diagnostics vs document diagnostics.  Document diagnostics
            should always <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.Supersedes"/> a workspace diagnostic as the former are 'live'
            while the latter are cached and may be stale.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3._categoryToVersionedCache">
            <summary>
            Map of diagnostic category to the diagnostics cache for that category.
            Each category has a separate cache as they have disjoint resultIds and diagnostics.  For example, we may have
            one cache for DocumentSyntax, another for DocumentSemantic, another for WorkspaceSemantic, etc etc.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.GetPreviousResults(`0)">
            <summary>
            Retrieve the previous results we reported.  Used so we can avoid resending data for unchanged files. Also
            used so we can report which documents were removed and can have all their diagnostics cleared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.GetOrderedDiagnosticSourcesAsync(`0,System.String,Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.Threading.CancellationToken)">
            <summary>
            Returns all the documents that should be processed in the desired order to process them in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.CreateReport(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,Roslyn.LanguageServer.Protocol.Diagnostic[],System.String)">
            <summary>
            Creates the appropriate LSP type to report a new set of diagnostics and resultId.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.TryCreateUnchangedReport(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.String,`1@)">
            <summary>
            Creates the appropriate LSP type to report unchanged diagnostics. Can return <see langword="false"/> to
            indicate nothing should be reported.  This should be done for workspace requests to avoiding sending a huge
            amount of "nothing changed" responses for most files.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.CreateRemovedReport(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier)">
            <summary>
            Creates the appropriate LSP type to report a removed file.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.WaitForChangesAsync(System.String,Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.Threading.CancellationToken)">
            <summary>
            Used by public workspace pull diagnostics to allow it to keep the connection open until
            changes occur to avoid the client spamming the server with requests.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.DiagnosticsPullCache">
            <summary>
            Cache where we store the data produced by prior requests so that they can be returned if nothing of significance 
            changed. The <see cref="T:Microsoft.CodeAnalysis.VersionStamp"/> is produced by <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentVersionAsync(System.Threading.CancellationToken)"/> while the 
            <see cref="T:Microsoft.CodeAnalysis.Checksum"/> is produced by <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentChecksumAsync(System.Threading.CancellationToken)"/>.  The former is faster
            and works well for us in the normal case.  The latter still allows us to reuse diagnostics when changes happen that
            update the version stamp but not the content (for example, forking LSP text).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.DiagnosticsPullCache.#ctor(System.String)">
            <summary>
            Cache where we store the data produced by prior requests so that they can be returned if nothing of significance 
            changed. The <see cref="T:Microsoft.CodeAnalysis.VersionStamp"/> is produced by <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentVersionAsync(System.Threading.CancellationToken)"/> while the 
            <see cref="T:Microsoft.CodeAnalysis.Checksum"/> is produced by <see cref="M:Microsoft.CodeAnalysis.Project.GetDependentChecksumAsync(System.Threading.CancellationToken)"/>.  The former is faster
            and works well for us in the normal case.  The latter still allows us to reuse diagnostics when changes happen that
            update the version stamp but not the content (for example, forking LSP text).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3.DiagnosticsPullCache.ComputeDataAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler{`0,`1,`2}.DiagnosticsRequestState,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.ComputeDataAsync(`2,System.Threading.CancellationToken)"/>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractWorkspacePullDiagnosticsHandler`3._gate">
            <summary>
            Gate to guard access to <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractWorkspacePullDiagnosticsHandler`3._categoryToLspChanged"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractWorkspacePullDiagnosticsHandler`3._categoryToLspChanged">
            <summary>
            Stores the LSP changed state on a per category basis.  This ensures that requests for different categories
            are 'walled off' from each other and only reset state for their own category.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSourceManager._nameToDocumentProviderMap">
            <summary>
            Document level <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider"/> providers ordered by name.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSourceManager._nameToWorkspaceProviderMap">
            <summary>
            Workspace level <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider"/> providers ordered by name.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSourceManager.AggregatedDocumentDiagnosticSource">
            <summary>
            Aggregates multiple <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSource"/>s into a single source.
            </summary>
            <param name="sources">Sources to aggregate</param>
            <remarks>
            Aggregation is usually needed for clients like VS Code which supports single source per request.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSourceManager.AggregatedDocumentDiagnosticSource.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSource})">
            <summary>
            Aggregates multiple <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSource"/>s into a single source.
            </summary>
            <param name="sources">Sources to aggregate</param>
            <remarks>
            Aggregation is usually needed for clients like VS Code which supports single source per request.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSources.IDiagnosticSourceManager">
            <summary>
            Provides centralized/singleton management of MEF based <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider"/>s.
            Consumers - like diagnostic handlers - use it to get diagnostics from one or more providers.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSources.IDiagnosticSourceManager.GetDocumentSourceProviderNames(Roslyn.LanguageServer.Protocol.ClientCapabilities)">
            <summary>
            Returns the names of document level <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSources.IDiagnosticSourceManager.GetWorkspaceSourceProviderNames(Roslyn.LanguageServer.Protocol.ClientCapabilities)">
            <summary>
            Returns the names of workspace level <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSources.IDiagnosticSourceManager.CreateDocumentDiagnosticSourcesAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates document diagnostic sources for the given <paramref name="providerName"/>.
            </summary>
            <param name="context"/>
            <param name="providerName">Optional provider name. If <see langword="null"/> then diagnostics from all providers are used.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the request processing.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticSources.IDiagnosticSourceManager.CreateWorkspaceDiagnosticSourcesAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates workspace diagnostic sources for the given <paramref name="providerName"/>.
            </summary>
            <param name="context"/>
            <param name="providerName">Optional provider name. If not specified then diagnostics from all providers are used.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the request processing.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider">
            <summary>
            Provides diagnostic sources.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider.IsDocument">
            <summary>
            <see langword="true"/> if this provider is for documents, <see langword="false"/> if it is for workspace.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider.Name">
            <summary>
            Provider's name. Each should have a unique name within <see cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider.IsDocument"/> scope.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSourceProvider.CreateDiagnosticSourcesAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.Threading.CancellationToken)">
            <summary>
            Creates the diagnostic sources.
            </summary>
            <param name="context"/>
            <param name="cancellationToken">A cancellation token that can be used to cancel the request processing.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.WorkspaceDocumentsAndProjectDiagnosticSourceProvider.CreateDiagnosticSourcesAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.Threading.CancellationToken)">
             <summary>
             There are three potential sources for reporting workspace diagnostics:
            
              1. Full solution analysis: If the user has enabled Full solution analysis, we always run analysis on the latest
                                         project snapshot and return up-to-date diagnostics computed from this analysis.
            
              2. Code analysis service: Otherwise, if full solution analysis is disabled, and if we have diagnostics from an explicitly
                                        triggered code analysis execution on either the current or a prior project snapshot, we return
                                        diagnostics from this execution. These diagnostics may be stale with respect to the current
                                        project snapshot, but they match user's intent of not enabling continuous background analysis
                                        for always having up-to-date workspace diagnostics, but instead computing them explicitly on
                                        specific project snapshots by manually running the "Run Code Analysis" command on a project or solution.
            
              3. EnC analysis: Emit and debugger diagnostics associated with a closed document or not associated with any document.
            
             If full solution analysis is disabled AND code analysis was never executed for the given project,
             we have no workspace diagnostics to report and bail out.
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractProjectDiagnosticSource.FullSolutionAnalysisDiagnosticSource.IsLiveSource">
            <summary>
            This is a normal project source that represents live/fresh diagnostics that should supersede everything else.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractProjectDiagnosticSource.CodeAnalysisDiagnosticSource.IsLiveSource">
            <summary>
            This source provides the results of the *last* explicitly kicked off "run code analysis" command from the
            user.  As such, it is definitely not "live" data, and it should be overridden by any subsequent fresh data
            that has been produced.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractWorkspaceDocumentDiagnosticSource.FullSolutionAnalysisDiagnosticSource.s_projectToDiagnostics">
            <summary>
            Cached mapping between a project instance and all the diagnostics computed for it.  This is used so that
            once we compute the diagnostics once for a particular project, we don't need to recompute them again as we
            walk every document within it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractWorkspaceDocumentDiagnosticSource.FullSolutionAnalysisDiagnosticSource.IsLiveSource">
            <summary>
            This is a normal document source that represents live/fresh diagnostics that should supersede everything else.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractWorkspaceDocumentDiagnosticSource.CodeAnalysisDiagnosticSource.IsLiveSource">
            <summary>
            This source provides the results of the *last* explicitly kicked off "run code analysis" command from the
            user.  As such, it is definitely not "live" data, and it should be overridden by any subsequent fresh data
            that has been produced.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DocumentDiagnosticSource.IsLiveSource">
            <summary>
            This is a normal document source that represents live/fresh diagnostics that should supersede everything else.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSource">
            <summary>
            Wrapper around a source for diagnostics (e.g. a <see cref="T:Microsoft.CodeAnalysis.Project"/> or <see cref="T:Microsoft.CodeAnalysis.Document"/>)
            so that we can share per file diagnostic reporting code in <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.AbstractPullDiagnosticHandler`3"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSource.IsLiveSource">
            <summary>
            True if this source produces diagnostics that are considered 'live' or not.  Live errors represent up to date
            information that should supersede other sources.  Non 'live' errors (aka "build errors") are recognized to
            potentially represent stale results from a point in the past when the computation occurred.  The only time
            Roslyn produces non-live errors through an explicit user gesture to "run code analysis". Because these represent
            errors from the past, we do want them to be superseded by a more recent live run, or a more recent build from
            another source.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.DiagnosticsRefreshQueue.Refresher._globalStateVersion">
            <summary>
            Incremented every time a refresh is requested.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticProjectInformationService.GetDiagnosticProjectInformation(Microsoft.CodeAnalysis.Project)">
            <summary>
            Allows the workspace to customize the project information it returns for a particular project. Note: this
            information may ultimately be racey.  In that the LSP handler may call in the background for information that is
            changing on the foreground.  While not ideal, that's been how project-info has always worked in the diagnostic
            subsystem, so we just live with it for the time being.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId">
            <summary>
            Wrapper around project and document ids for convenience in caching diagnostic results and
            use in the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.IDiagnosticSource"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId._documentId">
            <summary>
            Non-null if this represents a documentId.  Used for equality comparisons.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId._projectId">
            <summary>
            Non-null if this represents a projectId.  Used for equality comparisons.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.PullDiagnosticCategories.Task">
            <summary>
            Task list items.  Can be for Document or Workspace pull requests.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.PullDiagnosticCategories.EditAndContinue">
            <summary>
            Edit and Continue diagnostics. Can be for Document or Workspace pull requests.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.PullDiagnosticCategories.WorkspaceDocumentsAndProject">
            <summary>
            Diagnostics for workspace documents and project.  We don't support fine-grained diagnostics requests for these (yet).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentResolveData">
            <summary>
            Base data type for all document based resolve handlers that stores the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> for the resolve request.
            </summary>
            <param name="TextDocument">the text document associated with the request to resolve.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentResolveData.#ctor(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier)">
            <summary>
            Base data type for all document based resolve handlers that stores the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> for the resolve request.
            </summary>
            <param name="TextDocument">the text document associated with the request to resolve.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentResolveData.TextDocument">
            <summary>the text document associated with the request to resolve.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.FoldingRangesHandler.GetFoldingRangesAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Structure.BlockStructureOptions,System.Threading.CancellationToken)">
            <summary>
            Used here and by lsif generator.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.IDocumentChangeTracker">
            <summary>
            Associates LSP document URIs with the roslyn source text containing the LSP document text.
            Called via <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidOpenHandler"/>, <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidChangeHandler"/> and <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidCloseHandler"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ILspServiceRequestHandler`2">
            <summary>
            Handler for a workspace request with parameters <typeparamref name="TRequest"/> and result <typeparamref name="TResponse"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ILspServiceRequestHandler`1">
            <summary>
            Handler for a workspace parameter-less request with result <typeparamref name="TResponse"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ILspServiceDocumentRequestHandler`2">
            <summary>
            Handler for document request with parameters <typeparamref name="TRequest"/> and result <typeparamref name="TResponse"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintCache.InlayHintCacheEntry">
            <summary>
            Cached data need to resolve a specific inlay hint item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintCache.InlayHintCacheEntry.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.InlineHints.InlineHint})">
            <summary>
            Cached data need to resolve a specific inlay hint item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintHandler.Trim(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TaggedText})">
            <summary>
            Goes through the tagged text of the hint and trims off leading and trailing spaces. 
            If there is leading or trailing space, then we want to add padding to the left and right accordingly.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintResolveData">
            <summary>
            Datatype storing the information needed to resolve a particular inlay hint item.
            </summary>
            <param name="ResultId">the resultId associated with the inlay hint created on original request.</param>
            <param name="ListIndex">the index of the specific inlay hint item in the original list.</param>
            <param name="TextDocument">the text document associated with the inlay hint to resolve.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintResolveData.#ctor(System.Int64,System.Int32,Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.String,Roslyn.LanguageServer.Protocol.Range,System.Boolean)">
            <summary>
            Datatype storing the information needed to resolve a particular inlay hint item.
            </summary>
            <param name="ResultId">the resultId associated with the inlay hint created on original request.</param>
            <param name="ListIndex">the index of the specific inlay hint item in the original list.</param>
            <param name="TextDocument">the text document associated with the inlay hint to resolve.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintResolveData.ResultId">
            <summary>the resultId associated with the inlay hint created on original request.</summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.InlayHint.InlayHintResolveData.ListIndex">
            <summary>the index of the specific inlay hint item in the original list.</summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.InlineCompletionsHandler">
            <summary>
            Supports built in legacy snippets for razor scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.InlineCompletionsHandler.BuiltInSnippets">
            <summary>
            The set of built in snippets from, typically found in
            C:\Program Files\Microsoft Visual Studio\2022\VS_INSTANCE\VC#\Snippets\1033\Visual C#
            These are currently the only snippets supported.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.InlineCompletionsHandler.GetFormattedLspSnippetAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.ParsedXmlSnippet,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Formatting.SyntaxFormattingOptions,Microsoft.CodeAnalysis.Simplification.SimplifierOptions,System.Threading.CancellationToken)">
            <summary>
            Formats the snippet by applying the snippet to the document with the default values / function results for snippet declarations.
            Then converts back into an LSP snippet by replacing the declarations with the appropriate LSP tab stops.
            
            Note that the operations in this method are sensitive to the context in the document and so must be calculated on each request.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.InlineCompletionsHandler.GetReplacedSnippetTextAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.ParsedXmlSnippet,Microsoft.CodeAnalysis.Simplification.SimplifierOptions,System.Threading.CancellationToken)">
            <summary>
            Create the snippet with the full default text and functions applied.  Output the spans associated with
            each field and the final caret location in that text so that we can find those locations later.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser">
            <summary>
            Server instance agnostic snippet parser and cache.
            This can be re-used across LSP servers as we're just storing an
            internal representation of an XML snippet.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.CodeSnippet">
            <summary>
            Shamelessly copied from the editor
            https://devdiv.visualstudio.com/DevDiv/_git/VS-Platform?path=/src/Editor/VisualStudio/Impl/Snippet/CodeSnippet.cs
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.CodeSnippet.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Ctor.
            </summary>
            <param name="codeSnippetElement">XElement representing the CodeSnippet node.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.CodeSnippet.ReadSnippets(System.Xml.Linq.XDocument)">
            <summary>
            Visible for testing.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.ExpansionTemplate">
            <summary>
            Shamelessly adapted from https://devdiv.visualstudio.com/DevDiv/_git/VS-Platform?path=/src/Editor/VisualStudio/Impl/Snippet/ExpansionTemplate.cs
            with changes to parsing to store the snippet as a set of parts instead of a single string.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser._parsedSnippetsCache">
            <summary>
            Cache to hold onto the parsed XML for a particular snippet.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.SnippetCursorPart">
            <summary>
            To indicate cursor location we put in a multi-line comment so that we can
            find it after formatting.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.InlineCompletions.XmlSnippetParser.SnippetCursorPart.#ctor">
            <summary>
            To indicate cursor location we put in a multi-line comment so that we can
            find it after formatting.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.LspErrorCodes">
            <summary>
            See https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#errorCodes
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.LspErrorCodes.ContentModified">
            <summary>
            Signals that the server detected the contents of the document were modified
            outside of normal conditions.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4">
            <summary>
            Specialized cache used by the 'pull' LSP handlers.  Supports storing data to know when to tell a client
            that existing results can be reused, or if new results need to be computed.  Multiple keys can be used,
            with different computation costs to determine if the previous cached data is still valid.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem">
            <summary>
            Internal cache item that updates state for a particular <see cref="T:Microsoft.CodeAnalysis.Workspace"/> and <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId"/> in <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4"/>
            This type ensures that the state for a particular key is never updated concurrently for the same key (but different key states can be concurrent).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem.#ctor(System.String)">
            <summary>
            Internal cache item that updates state for a particular <see cref="T:Microsoft.CodeAnalysis.Workspace"/> and <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId"/> in <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4"/>
            This type ensures that the state for a particular key is never updated concurrently for the same key (but different key states can be concurrent).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._gate">
            <summary>
            Guards access to <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._lastResult"/>.
            This ensures that a cache entry is fully updated in a single transaction.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._lastResult">
            <summary>
            Stores the current state associated with this cache item.
            Guarded by <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._gate"/>
            
            <list type="bullet">
              <item>The resultId reported to the client.</item>
              <item>The TCheapVersion of the data that was used to calculate results.
                  <para>
                  Note that this version can change even when nothing has actually changed (for example, forking the 
                  LSP text, reloading the same project). So we additionally store:</para></item>
              <item>A TExpensiveVersion (normally a checksum) checksum that will still allow us to reuse data even when
              unimportant changes happen that trigger the cheap version change detection.</item>
              <item>The checksum of the data that was computed when the resultId was generated.
                  <para>
                  When the versions above change, we must recalculate the data.  However sometimes that data ends up being exactly the same as the prior request.
                  When that happens, this allows us to send back an unchanged result instead of reserializing data the client already has.
                  </para>
              </item>
            </list>
            
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem.UpdateCacheItemAsync(Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache{`0,`1,`2,`3},System.Nullable{Microsoft.CodeAnalysis.LanguageServer.Handler.PreviousPullResult},System.Boolean,`2,System.Threading.CancellationToken)">
            <summary>
            Updates the values for this cache entry.  Guarded by <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._gate"/>
            
            Returns <see langword="null"/> if the previousPullResult can be re-used, otherwise returns a new resultId and the new data associated with it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.#ctor(System.String)">
            <summary>
            Specialized cache used by the 'pull' LSP handlers.  Supports storing data to know when to tell a client
            that existing results can be reused, or if new results need to be computed.  Multiple keys can be used,
            with different computation costs to determine if the previous cached data is still valid.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4._idToLastReportedResult">
            <summary>
            Map of workspace and diagnostic source to the data used to make the last pull report.
            This is a concurrent dictionary as parallel access is allowed for different workspace+project/doc combinations.
            
            The <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem"/> itself however will internally guarantee that the state for a specific workspace+project/doc will only
            be updated sequentially.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4._nextDocumentResultId">
            <summary>
            The next available id to label results with.  Note that results are tagged on a per-document bases.  That
            way we can update results with the client with per-doc granularity.
            
            Called by <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem"/> with Interlocked access to ensure that all cache items generate unique resultIds.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.ComputeCheapVersionAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Computes a cheap version of the current state.  This is compared to the cached version we calculated for the client's previous resultId.
            
            Note - this will run under the semaphore in <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._gate"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.ComputeExpensiveVersionAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Computes a more expensive version of the current state.  If the cheap versions are mismatched, we then compare the expensive version of the current state against the
            expensive version we have cached for the client's previous resultId.
            
            Note - this will run under the semaphore in <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._gate"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.ComputeDataAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Computes new data for this request.  This data must be hashable as it we store the hash with the requestId to determine if
            the data has changed between requests.
            
            Note - this will run under the semaphore in <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.CacheItem._gate"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4.GetOrComputeNewDataAsync(System.Collections.Generic.Dictionary{Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId,Microsoft.CodeAnalysis.LanguageServer.Handler.PreviousPullResult},Microsoft.CodeAnalysis.LanguageServer.Handler.Diagnostics.ProjectOrDocumentId,Microsoft.CodeAnalysis.Project,`2,System.Threading.CancellationToken)">
            <summary>
            If results have changed since the last request this calculates and returns a new
            non-null resultId to use for subsequent computation and caches it.
            </summary>
            <param name="idToClientLastResult">a map of roslyn document or project id to the previous result the client sent us for that doc.</param>
            <param name="projectOrDocumentId">the id of the project or document that we are checking to see if it has changed.</param>
            <returns>Null when results are unchanged, otherwise returns a non-null new resultId.</returns>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.FindUsagesLSPContext._semaphore">
            <summary>
            Methods in FindUsagesLSPContext can be called by multiple threads concurrently. We need this semaphore to
            ensure that we aren't making concurrent modifications to data such as _id and _definitionToId.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.FindUsagesLSPContext._definitionsWithoutReference">
            <summary>
            Keeps track of definitions that cannot be reported without references and which we have
            not yet found a reference for.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.FindUsagesLSPContext._referenceLocations">
            <summary>
            Set of the locations we've found references at.  We may end up with multiple references
            being reported for the same location.  For example, this can happen in multi-targeting 
            scenarios when there are symbols in files linked into multiple projects.  Those symbols
            may have references that themselves are in linked locations, leading to multiple references
            found at different virtual locations that the user considers at the same physical location.
            For now we filter out these duplicates to not clutter the UI.  If LSP supports the ability
            to override an already reported VSReferenceItem, we could also reissue the item with the
            additional information about all the projects it is found in.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.FindUsagesLSPContext._workQueue">
            <summary>
            We report the results in chunks. A batch, if it contains results, is reported every 0.5s.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext">
            <summary>
            Context for requests handled by <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext._documentChangeTracker">
            <summary>
            This will be the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.NonMutatingDocumentChangeTracker"/> for non-mutating requests because they're not allowed to change documents
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext._clientCapabilities">
            <summary>
            The client capabilities for the request.
            </summary>
            <remarks>
            Should only be null on the "initialize" request.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext._trackedDocuments">
            <summary>
            Contains the LSP text for all opened LSP documents from when this request was processed in the queue.
            </summary>
            <remarks>
            This is a snapshot of the source text that reflects the LSP text based on the order of this request in the queue.
            It contains text that is consistent with all prior LSP text sync notifications, but LSP text sync requests
            which are ordered after this one in the queue are not reflected here.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext._lspSolution">
            <summary>
            Provides backing storage for the LSP workspace used by this RequestContext instance, allowing it to be cleared
            on demand from all copies that may exist of this value type.
            </summary>
            <remarks>
            This field is only initialized for handlers that request solution context.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Workspace">
            <summary>
            The workspace this request is for, if applicable.  This will be present if <see cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Document"/> is
            present.  It will be <see langword="null"/> if <c>requiresLSPSolution</c> is false.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Solution">
            <summary>
            The solution state that the request should operate on, if the handler requires an LSP solution, or <see langword="null"/> otherwise
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Document">
            <summary>
            The document that the request is for, if applicable. This comes from the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> returned from the handler itself via a call to 
            <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler`2.GetTextDocumentIdentifier(`0)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.TextDocument">
            <summary>
            The text document that the request is for, if applicable. This comes from the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> returned from the handler itself via a call to 
            <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler`2.GetTextDocumentIdentifier(`0)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.ServerKind">
            <summary>
            The LSP server handling the request.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.Method">
            <summary>
            The method this request is targeting.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.SupportedLanguages">
            <summary>
            The languages supported by the server making the request.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext._logger">
            <summary>
            Tracing object that can be used to log information about the status of requests.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.StartTrackingAsync(System.Uri,Microsoft.CodeAnalysis.Text.SourceText,System.String,System.Threading.CancellationToken)">
            <summary>
            Allows a mutating request to open a document and start it being tracked.
            Mutating requests are serialized by the execution queue in order to prevent concurrent access.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.UpdateTrackedDocument(System.Uri,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Allows a mutating request to update the contents of a tracked document.
            Mutating requests are serialized by the execution queue in order to prevent concurrent access.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.StopTrackingAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Allows a mutating request to close a document and stop it being tracked.
            Mutating requests are serialized by the execution queue in order to prevent concurrent access.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext.TraceInformation(System.String)">
            <summary>
            Logs an informational message.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1">
             <summary>
             A common LSP pattern is an initial request to the server that returns some set of partially filled out items.
             Then the client issues a xyz/resolve request to fully resolve a specific item when actually needed.
             
             On the server side we often need to cache non-serializable data that can't be included in the typical
             'data' field on the actual item.  This type is a general cache that helps keep track of data between requests.
            
             This cache is generally only written to as part of the initial request to store data for later resolution.
             It is only read from as part of a resolve request for some data sent in the initial request to restore state.
             </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1._maxCacheSize">
            <summary>
            Maximum number of cache entries allowed in cache. Must be >= 1.
            Typically a resolve request will only ask about the most recent cache entry so
            it is not important to cache a lot of entries.  If there are document changes
            the client is responsible for not asking to resolve invalid items.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1._accessLock">
            <summary>
            Multiple cache requests or updates may be received concurrently.
            We need this lock to ensure that we aren't making concurrent
            modifications to <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1._nextResultId"/> or <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1._resultIdToCachedItem"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1._nextResultId">
            <summary>
            The next resultId available to use.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1._resultIdToCachedItem">
            <summary>
            Keeps track of the resultIds in the cache and their associated cache entry.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1.UpdateCache(`0)">
            <summary>
            Adds a completion list to the cache. If the cache reaches its maximum size, the oldest completion
            list in the cache is removed.
            </summary>
            <returns>
            The generated resultId associated with the passed in completion list.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveCache`1.GetCachedEntry(System.Int64)">
            <summary>
            Attempts to return the completion list in the cache associated with the given resultId.
            Returns null if no match is found.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ResolveDataCache">
            <summary>
            Caches arbitrary data object in between calls to Handler and ResolveHandler.
            Used to minimize passing around request resolve data.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.CustomLspSemanticTokenNames">
            <summary>
            Maps <see cref="T:Microsoft.CodeAnalysis.Classification.ClassificationTypeNames"/> to LSP compatible semantic token names.
            Since these token names are effectively a public contract that users can directly interact with,
            we need these names to be nicely formatted and compatible with LSP client rules.
            All classification names must be explicitly mapped to an LSP semantic token type or
            a custom token type name defined here.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensHelpers.ComputeSemanticTokensDataAsync(Microsoft.CodeAnalysis.Document,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.LinePositionSpan},System.Boolean,Microsoft.CodeAnalysis.Classification.ClassificationOptions,System.Threading.CancellationToken)">
            <summary>
            Returns the semantic tokens data for a given document with an optional ranges.
            </summary>
            <param name="spans">Spans to compute tokens for. If empty, the whole document will be used.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensRefreshQueue">
            <summary>
            Batches requests to refresh the semantic tokens to optimize user experience.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensRefreshQueue._gate">
            <summary>
            Lock over the mutable state that follows.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensRefreshQueue._projectIdToLastComputedChecksum">
            <summary>
            Mapping from project id to the project-cone-checksum for it we were at when the project for it had its
            compilation produced on the oop server.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.s_vsDirectTypeMap">
            <summary>
            Core VS classifications, only map a few things to LSP.  The rest we keep as our own standard classification
            type names so those continue to work in VS.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.s_pureLspDirectTypeMap">
            <summary>
            The 'pure' set of classification types maps exact Roslyn matches to the well defined values actually in LSP.
            For example "class name" to "class".  Importantly though, if there is no exact match, we do not map things
            along.  This allows the user to theme things however they want.  
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.s_vsTokenSchema">
            <summary>
            A schema for mapping classification type names to VS LSP token names.  This maps a few classification type names
            directly to LSP semantic token types, but otherwise generally returns the classification type name as a custom token type.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.s_pureLspTokenSchema">
            <summary>
            A schema for mapping classification type names to 'pure' LSP token names.  This includes classification type names
            that are directly mapped to LSP semantic token types as well as mappings from roslyn classification type names to
            LSP compatible custom token type names.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.TokenTypeMap">
            <summary>
            Mapping from roslyn <see cref="T:Microsoft.CodeAnalysis.Classification.ClassificationTypeNames"/> to the LSP token name.  This is either a standard
            <see cref="T:Roslyn.LanguageServer.Protocol.SemanticTokenTypes"/> or a custom token name.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.TokenTypeToIndex">
            <summary>
            Mapping from the semantic token type name to the index in <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.AllTokenTypes"/>.  Required since we report
            tokens back to LSP as a series of ints, and LSP needs a way to decipher them.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.AllTokenTypes">
            <summary>
            Equivalent to see <see cref="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.AllTypes"/> combined with the remaining custom token names from <see cref="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.SemanticTokensSchema.TokenTypeMap"/> 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.SemanticTokens.TokenModifiers">
            <summary>
            The LSP modifiers from <see cref="T:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers"/>
            Roslyn currently supports. Enum is used to signify the modifier(s) that apply to a given token.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SignatureHelpHandler.GetSignatureText(Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItem)">
            <summary>
            The <see cref="T:Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpItem"/> contains a prefix, parameters separated by a
            separator and a suffix. Parameters themselves have a prefix, display and suffix.
            Concatenate them all to get the text.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.SourceGeneratedDocumentText">
            <summary>
            Source generated file text result.  The client uses the resultId to inform what the text value is.
            
            An unchanged result has a non-null resultId (same as client request resultId) + null text.
            
            A changed result has a new non-null resultId + possibly null text (if the sg document no longer exists).
            
            In rare circumstances it is possible to get a null resultId + null text - this happens when
            the source generated document is not open AND the source generated document no longer exists
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SourceGeneratedDocumentText.#ctor(System.String,System.String)">
            <summary>
            Source generated file text result.  The client uses the resultId to inform what the text value is.
            
            An unchanged result has a non-null resultId (same as client request resultId) + null text.
            
            A changed result has a new non-null resultId + possibly null text (if the sg document no longer exists).
            
            In rare circumstances it is possible to get a null resultId + null text - this happens when
            the source generated document is not open AND the source generated document no longer exists
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.AbstractSpellCheckHandler`2">
            <summary>
            Root type for both document and workspace spell checking requests.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.AbstractSpellCheckHandler`2._versionedCache">
            <summary>
            Cache where we store the data produced by prior requests so that they can be returned if nothing of
            significance changed. The version key is produced by combining the checksums for project options <see
            cref="M:Microsoft.CodeAnalysis.ProjectState.GetParseOptionsChecksum"/> and <see cref="P:Microsoft.CodeAnalysis.Serialization.DocumentStateChecksums.Text"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.AbstractSpellCheckHandler`2.GetPreviousResults(`0)">
            <summary>
            Retrieve the previous results we reported.  Used so we can avoid resending data for unchanged files. Also
            used so we can report which documents were removed and can have all their spell checking results cleared.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.AbstractSpellCheckHandler`2.GetOrderedDocuments(Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext,System.Threading.CancellationToken)">
            <summary>
            Returns all the documents that should be processed in the desired order to process them in.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.AbstractSpellCheckHandler`2.CreateReport(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.Int32[],System.String)">
            <summary>
            Creates the <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeReport"/> instance we'll report back to clients to let them know our
            progress.  Subclasses can fill in data specific to their needs as appropriate.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.SpellCheckPullCache">
            <summary>
            Simplified version of <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4"/> that only uses a 
            single cheap key to check results against.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.SpellCheck.SpellCheckPullCache.#ctor(System.String)">
            <summary>
            Simplified version of <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.VersionedPullCache`4"/> that only uses a 
            single cheap key to check results against.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentSymbolsHandler">
            <summary>
            TODO - This must be moved to the MS.CA.LanguageServer.Protocol project once
            we no longer reference VS icon types.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentSymbolsHandler.GetSymbolInformation(Microsoft.CodeAnalysis.NavigationBar.RoslynNavigationBarItem,Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.SourceText,System.String,System.Boolean)">
            <summary>
            Get a symbol information from a specified nav bar item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentSymbolsHandler.GetDocumentSymbol(Microsoft.CodeAnalysis.NavigationBar.RoslynNavigationBarItem,Microsoft.CodeAnalysis.Text.SourceText,System.Threading.CancellationToken)">
            <summary>
            Get a document symbol from a specified nav bar item.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentSymbolsHandler.GetDocumentSymbolName(System.String)">
            <summary>
            DocumentSymbol name cannot be null or empty. Check if the name is invalid,
            and if so return a substitute string.
            </summary>
            <param name="proposedName">Name proposed for DocumentSymbol</param>
            <returns>Valid name for DocumentSymbol</returns>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.RoslynDocumentSymbol">
            <summary>
            Derived version of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentSymbol" /> used so we can pass additional information we do not want lost for our
            internal consumers.  For example, the richer <see cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.RoslynDocumentSymbol.Glyph"/> which is a superset of <see
            cref="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Kind"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.RoslynDocumentSymbolParams">
            <summary>
            A parameter object that indicates whether the LSP client should use hierarchical symbols. Inherits from
            DocumentSymbolParams.
            </summary>
            <remarks>
            The LSP client does not support hierarchical document symbols and we can't contribute to client capabilities as
            the extension. This type is required in order to obtain a response of type DocumentSymbol[] for a document
            symbol request.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.WorkspaceSymbolsHandler">
            <summary>
            TODO - This must be moved to the MS.CA.LanguageServer.Protocol project once
            we no longer reference VS icon types.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.Handler.WorkspaceSymbolsHandler.#ctor(Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListenerProvider)">
            <summary>
            TODO - This must be moved to the MS.CA.LanguageServer.Protocol project once
            we no longer reference VS icon types.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestTelemetryLogger">
            <summary>
            Logs metadata on LSP requests (duration, success / failure metrics)
            for this particular LSP server instance.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.Handler.ExportCSharpVisualBasicLspServiceFactoryAttribute">
            <summary>
            Defines an easy to use subclass for <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ExportLspServiceFactoryAttribute"/> with the roslyn languages contract name.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.IClientLanguageServerManager">
            <summary>
            Manages sending requests or notifications to the client or server.
            Note - be extremely intentional about using a request or notification.  Use exactly what the LSP spec defines the method as.
            For example methods defined as requests even with no parameters or return value must be sent as requests regardless.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.ILanguageInfoProvider">
            <summary>
            Looks up Roslyn language information for a given document path or language ID from LSP client.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ILanguageInfoProvider.TryGetLanguageInformation(System.Uri,System.String,Microsoft.CodeAnalysis.Features.Workspaces.LanguageInformation@)">
            <summary>
            Gets the Roslyn language information for a given document path or language ID from LSP client.
            </summary>
            <remarks>
            It is totally possible to not find language based on the file path (e.g. a newly created file that hasn't been saved to disk).
            In that case, we use the language Id that the LSP client gave us.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.DocumentUriSerializationError">
            <summary>
              Looks up a localized string similar to Unable to deserialize Uri. Unexpected value encountered: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.MarkupContentSerializationError">
            <summary>
              Looks up a localized string similar to Unable to deserialize MarkupContent. Unexpected value encountered: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.NestedSumType">
            <summary>
              Looks up a localized string similar to A SumType cannot have another SumType as type parameter..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.NoSumTypeMatch">
            <summary>
              Looks up a localized string similar to None of the SumType type parameters could be deserialized.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.StringEnumMissingConstructor">
            <summary>
              Looks up a localized string similar to Type {0} is missing a contructor that takes a single string as parameter..
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.StringEnumSerializationError">
            <summary>
              Looks up a localized string similar to Unable to deserialize string-based enum. Unexpected data encountered: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.TextDocumentSyncSerializationError">
            <summary>
              Looks up a localized string similar to Unable to deserialize TextDocumentSyncOptions.  Unexpected value encountered: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.FormattingOptionsEncounteredInvalidToken">
            <summary>
              Looks up a localized string similar to Unable to deserialize FormattingOptions. Invalid token: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.FormattingOptionsEndedUnexpectedly">
            <summary>
              Looks up a localized string similar to Unable to deserialize FormattingOptions as it ended unexpectedly.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LanguageServerProtocolResources.FormattingOptionsMissingRequiredProperty">
            <summary>
              Looks up a localized string similar to Unable to deserialize FormattingOptions. Missing required property: {0}.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspOptionsStorage.MaxCompletionListSize">
            <summary>
            This sets the max list size we will return in response to a completion request.
            If there are more than this many items, we will set the isIncomplete flag on the returned completion list.
            If set to negative value, we will always return the full list.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspOptionsStorage.LspUsingDevkitFeatures">
            <summary>
            This flag is turned on when the C# devkit is installed.
            This can cause certain LSP features to behave differently, for example we avoid returning test code lenses when devkit is running.
            </summary>
            <remarks>
            This flag is not user visible.
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspOptionsStorage.LspEnableReferencesCodeLens">
            <summary>
            Flag indicating whether or not references should be returned in LSP codelens.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspOptionsStorage.LspEnableTestsCodeLens">
            <summary>
            Flag indicating whether or not test and debug code lens items should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspOptionsStorage.LspEnableAutoInsert">
            <summary>
            Flag indicating whether or not auto-insert should be abled by default in LSP.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspOptionsStorage.LspOrganizeImportsOnFormat">
            <summary>
            <see langword="true"/> to organize imports as part of LSP's Format Document handler; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.TypeName">
            <summary>
            The fully-qualified type name of the service being exported.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.AssemblyName">
            <summary>
            The full name of the assembly containing the service.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.CodeBase">
            <summary>
            The code base of the assembly, if any.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.ServerKind">
            <summary>
            The LSP server for which this service applies to.  If null, this service applies to any server
            with the matching contract name.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.IsStateless">
            <summary>
            Services MEF exported as <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspService"/> must by definition be stateless as they are
            shared amongst all LSP server instances through restarts.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.InterfaceNames">
            <summary>
            The full assembly-qualified type names of the interfaces the service implements.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.AbstractExportLspServiceAttribute.MethodHandlerData">
            <summary>
            If this this service implements <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>, returns a blob of binary data
            that encodes an array of <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails"/>s; otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.BaseService">
            <summary>
            Simple helper class to hold a service instance or a lazily-created service.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.ExportLspServiceFactoryAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspServiceFactory"/> that is used by LSP server instances
            to create new instances of the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspService"/> each time an LSP server is started.
            
            The services created by the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspServiceFactory"/> are disposed of by <see cref="T:Microsoft.CodeAnalysis.LanguageServer.LspServices"/>
            when the LSP server instance shuts down.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.ExportStatelessLspServiceAttribute">
            <summary>
            Defines an attribute to export an instance of <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspService"/> that is re-used across
            all server instances in the same mef container.  Services using this export attribute should not
            store any kind of server specific state in them.
            
            MEF will dispose of these services when the container is disposed of.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ILspServiceFactory.CreateILspService(Microsoft.CodeAnalysis.LanguageServer.LspServices,Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds)">
            <summary>
            Some LSP services need to know the client capabilities on construction or
            need to know about other <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspService"/> instances to be constructed.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.LanguageServer.LspServiceMetadataView.HandlerDetails">
            <summary>
            Returns an array of request handler method details if this services is an <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspServices._baseServices">
            <summary>
            A set of base services that apply to all Roslyn lsp services.
            Unfortunately MEF doesn't provide a good way to export something for multiple contracts with metadata
            so these are manually created in <see cref="T:Microsoft.CodeAnalysis.LanguageServer.RoslynLanguageServer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspServices._gate">
            <summary>
            Gates access to <see cref="F:Microsoft.CodeAnalysis.LanguageServer.LspServices._servicesToDispose"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.RoslynRequestExecutionQueue._cultureInfo">
            <summary>
            Serial access is guaranteed by the queue.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.RoslynRequestExecutionQueue.GetCultureForRequest">
            <summary>
            Serial access is guaranteed by the queue.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.RazorLspServer">
            <summary>
            Roslyn LSP server for razor c# requests.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.LiveShareLspServer">
            <summary>
            Roslyn LSP server for liveshare guests.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.AlwaysActiveVSLspServer">
            <summary>
            Roslyn LSP server always activated in VS.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.CSharpVisualBasicLspServer">
            <summary>
            Roslyn LSP server for non-VS use cases.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.XamlLspServer">
            <summary>
            XAML LSP servers.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.RoslynTypeScriptLspServer">
            <summary>
            LSP server for TypeScript
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.WellKnownLspServerKinds.Any">
            <summary>
            Flag representing any LSP server - used by <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ExportLspServiceFactoryAttribute"/>
            to specify that something applies to any LSP server.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.ILspWorkspace">
            <summary>
            Interface to indicate that a workspace wants to customize what happens in the lsp server when lsp contents for a
            file are updated by an lsp client. In VS, for example, we have a non-mutating workspace.  The VS workspace itself is
            updated automatically with the real contents of buffers, and by tracking the running-doc-table.  Changes that come
            in through LSP do not impact this actual workspace.  Instead, the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager"/> creates an
            overlay, where it uses the <see cref="T:Microsoft.CodeAnalysis.Solution"/> snapshot from the VS workspace, but then forks it in any cases
            where it's view of the world may differ from LSP (which can happen as LSP is async, and so may represent a state of
            the world that is slightly different from what the VS workspace thinks it is.
            <para/>
            For hosts though where there is no external source of truth (for example, a server that might host roslyn directly,
            where all info comes from LSP), this enables LSP to 'push through' file changes directly to the to the workspace's
            model. That way, the workspace's solution is always in sync with what LSP thinks it is (at least for open
            documents).
            <para/>
            It is fine for external changes to happen to the contents of documents within the workspace (see <see
            cref="M:Microsoft.CodeAnalysis.Workspace.OnDocumentTextChanged(Microsoft.CodeAnalysis.Document)"/>).  However, they will be overwritten by the <see
            cref="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager"/> for any changed documents it knows about (through <see
            cref="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidChange"/>).
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.ILspWorkspace.UpdateTextIfPresentAsync(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.Text.SourceText,System.Threading.CancellationToken)">
            <summary>
            If <paramref name="documentId"/> is currently within this workspace, then its text is updated to <paramref
            name="sourceText"/>.  Does nothing if the document is not present in the workspace (for example if something
            else removed it).
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace">
            <summary>
            Defines a default workspace for opened LSP files that are not found in any
            workspace registered by the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceRegistrationService"/>.
            If a document added here is subsequently found in a registered workspace, 
            the document is removed from this workspace.
            
            Future work for this workspace includes supporting basic metadata references (mscorlib, System dlls, etc),
            but that is dependent on having a x-plat mechanism for retrieving those references from the framework / sdk.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace.#ctor(Microsoft.CommonLanguageServerProtocol.Framework.ILspServices,Microsoft.CodeAnalysis.MetadataAsSource.IMetadataAsSourceFileService,Microsoft.CodeAnalysis.Host.HostServices)">
            <summary>
            Defines a default workspace for opened LSP files that are not found in any
            workspace registered by the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceRegistrationService"/>.
            If a document added here is subsequently found in a registered workspace, 
            the document is removed from this workspace.
            
            Future work for this workspace includes supporting basic metadata references (mscorlib, System dlls, etc),
            but that is dependent on having a x-plat mechanism for retrieving those references from the framework / sdk.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace.AddMiscellaneousDocument(System.Uri,Microsoft.CodeAnalysis.Text.SourceText,System.String,Microsoft.CommonLanguageServerProtocol.Framework.ILspLogger)">
            <summary>
            Takes in a file URI and text and creates a misc project and document for the file.
            
            Calls to this method and <see cref="M:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace.TryRemoveMiscellaneousDocument(System.Uri,System.Boolean)"/> are made
            from LSP text sync request handling which do not run concurrently.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace.TryRemoveMiscellaneousDocument(System.Uri,System.Boolean)">
            <summary>
            Removes a document with the matching file path from this workspace.
            
            Calls to this method and <see cref="M:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace.AddMiscellaneousDocument(System.Uri,Microsoft.CodeAnalysis.Text.SourceText,System.String,Microsoft.CommonLanguageServerProtocol.Framework.ILspLogger)"/> are made
            from LSP text sync request handling which do not run concurrently.
            </summary>
        </member>
        <member name="E:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspace.StaticSourceTextContainer.TextChanged">
            <summary>
            Text changes are handled by LSP forking the document, we don't need to actually update anything here.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspaceProvider">
            <summary>
            Service to create <see cref="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager"/> instances.
            This is not exported as a <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspServiceFactory"/> as it requires
            special base language server dependencies such as the <see cref="T:Microsoft.CodeAnalysis.Host.HostServices"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspMiscellaneousFilesWorkspaceProvider.#ctor(Microsoft.CodeAnalysis.MetadataAsSource.IMetadataAsSourceFileService)">
            <summary>
            Service to create <see cref="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager"/> instances.
            This is not exported as a <see cref="T:Microsoft.CodeAnalysis.LanguageServer.ILspServiceFactory"/> as it requires
            special base language server dependencies such as the <see cref="T:Microsoft.CodeAnalysis.Host.HostServices"/>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager">
            <summary>
            Manages the registered workspaces and corresponding LSP solutions for an LSP server.
            This type is tied to a particular server.
            </summary>
            <remarks>
            This type provides an LSP view of the registered workspace solutions so that all LSP requests operate
            on the state of the world that matches the LSP requests we've received.  
            
            This is done by storing the LSP text as provided by client didOpen/didClose/didChange requests.  When asked for a document we provide either
            <list type="bullet">
                <item> The exact workspace solution instance if all the LSP text matches what is currently in the workspace.</item>
                <item> A fork from the workspace current solution with the LSP text applied if the LSP text does not match.  This can happen since
                LSP text sync is asynchronous and not guaranteed to match the text in the workspace (though the majority of the time in VS it does).</item>
            </list>
            
            Doing the forking like this has a few nice properties.
            <list type="bullet">
              <item>99% of the time the VS workspace matches the LSP text.  In those cases we do 0 re-parsing, share compilations, versions, checksum calcs, etc.</item>
              <item>In the 1% of the time that we do not match, we can simply and easily compute a fork.</item>
              <item>The code is relatively straightforward</item>
            </list>
            </remarks>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager._cachedLspSolutions">
            <summary>
            A cache from workspace to the last solution we returned for LSP.
            <para/> The forkedFromVersion is not null when the solution was created from a fork of the workspace with LSP
            text applied on top. It is null when LSP reuses the workspace solution (the LSP text matches the contents of the
            workspace).
            <para/> Access to this is guaranteed to be serial by the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager._trackedDocuments">
            <summary>
            Stores the current source text for each URI that is being tracked by LSP. Each time an LSP text sync
            notification comes in, this source text is updated to match. Used as the backing implementation for the <see
            cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.IDocumentChangeTracker"/>.
            <para/> Note that the text here is tracked regardless of whether or not we found a matching roslyn document for
            the URI.
            <para/> Access to this is guaranteed to be serial by the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.StartTrackingAsync(System.Uri,Microsoft.CodeAnalysis.Text.SourceText,System.String,System.Threading.CancellationToken)">
            <summary>
            Called by the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidOpenHandler"/> when a document is opened in LSP.
            
            <see cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidOpenHandler.MutatesSolutionState"/> is true which means this runs serially in the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.StopTrackingAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Called by the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidCloseHandler"/> when a document is closed in LSP.
            
            <see cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidCloseHandler.MutatesSolutionState"/> is true which means this runs serially in the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.UpdateTrackedDocument(System.Uri,Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Called by the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidChangeHandler"/> when a document's text is updated in LSP.
            
            <see cref="P:Microsoft.CodeAnalysis.LanguageServer.Handler.DocumentChanges.DidChangeHandler.MutatesSolutionState"/> is true which means this runs serially in the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.GetLspSolutionInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the LSP solution associated with the workspace with workspace kind <see cref="F:Microsoft.CodeAnalysis.WorkspaceKind.Host"/>.
            This is the solution used for LSP requests that pertain to the entire workspace, for example code search or
            workspace diagnostics.
            
            This is always called serially in the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/> when creating the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.GetLspDocumentInfoAsync(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier,System.Threading.CancellationToken)">
            <summary>
            Returns the LSP solution associated with the workspace with kind <see cref="F:Microsoft.CodeAnalysis.WorkspaceKind.Host"/>. This is the
            solution used for LSP requests that pertain to the entire workspace, for example code search or workspace
            diagnostics.
            
            This is always called serially in the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1"/> when creating the <see cref="T:Microsoft.CodeAnalysis.LanguageServer.Handler.RequestContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.GetLspSolutionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the LSP view of all the registered workspaces' current solutions.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.DoesAllSourceGeneratedTextMatchWorkspaceSolution(System.Collections.Immutable.ImmutableArray{System.ValueTuple{Microsoft.CodeAnalysis.SourceGeneratedDocumentIdentity,System.DateTime,Microsoft.CodeAnalysis.Text.SourceText}},Microsoft.CodeAnalysis.Solution)">
            <summary>
            Checks if the open source generator document contents matches the contents of the workspace solution.
            This looks at the source generator state explicitly to avoid actually running source generators
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.DoesAllTextMatchWorkspaceSolutionAsync(System.Collections.Immutable.ImmutableDictionary{System.Uri,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TextDocument}},System.Threading.CancellationToken)">
            <summary>
            Given a set of documents from the workspace current solution, verify that the LSP text is the same as the document contents.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.TryGetLanguageForUri(System.Uri,System.String@)">
            <summary>
            Returns a Roslyn language name for the given URI.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceManager.GetDocumentsForUris(System.Collections.Immutable.ImmutableArray{System.Uri},Microsoft.CodeAnalysis.Solution)">
            <summary>
            Using the workspace's current solutions, find the matching documents in for each URI.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.LanguageServer.LspWorkspaceRegistrationService.LspSolutionChanged">
            <summary>
            Indicates whether the LSP solution has changed in a non-tracked document context.
            
            <b>IMPORTANT:</b> Implementations of this event handler should do as little synchronous work as possible since this will block.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.DiagnosticSet">
            <summary>
            Indicates which code fixes are enabled for a Code Cleanup operation. Each code fix in the set is triggered by
            one or more diagnostic IDs, which could be provided by the compiler or an analyzer.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.CodeCleanup.DiagnosticSet.IsAnyDiagnosticIdExplicitlyEnabled">
            <summary>
            Diagnostic set is enabled for all severities if it has been explicitly selected as part of the cleanup profile.
            If the diagnostic set has not been explicitly selected, but gets bulk included by selecting
            "Fix all warnings and errors set in EditorConfig", then we only include diagnostics with Warning Or Error severity.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.EnabledDiagnosticOptions">
            <summary>
            Indicates which features are enabled for a code cleanup operation.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeCleanup.EnabledDiagnosticOptions.#ctor(System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeCleanup.DiagnosticSet},Microsoft.CodeAnalysis.CodeCleanup.OrganizeUsingsSet)">
            <summary>
            Indicates which features are enabled for a code cleanup operation.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CodeCleanup.OrganizeUsingsSet">
            <summary>
            Indicates which, if any, Organize Usings features are enabled for code cleanup.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixService.GetSuppressionFixer(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary> Looks explicitly for an <see cref="T:Microsoft.CodeAnalysis.CodeFixes.Suppression.AbstractSuppressionCodeFixProvider"/>.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.CodeFixes.ICodeFixService.GetMostSevereFixAsync(Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CodeActions.ICodeActionRequestPriorityProvider,System.Threading.CancellationToken)">
            <summary>
            Similar to <see cref="M:Microsoft.CodeAnalysis.CodeFixes.ICodeFixService.StreamFixesAsync(Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CodeActions.ICodeActionRequestPriorityProvider,System.Threading.CancellationToken)"/> except that instead of streaming all results, this ends with the
            first.  This will also attempt to return a fix for an error first, but will fall back to any fix if that
            does not succeed.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.s_projectToCompilationWithAnalyzers">
            <summary>
            Cached data from a <see cref="T:Microsoft.CodeAnalysis.ProjectState"/> to the last <see cref="T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersPair"/> instance
            created for it.  Note: the CompilationWithAnalyzersPair instance is dependent on the set of <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s passed along with the project.  As such, we might not be able to use a prior cached
            value if the set of analyzers changes.  In that case, a new instance will be created and will be cached for the
            next caller.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer">
            <summary>
            Diagnostic Analyzer Engine V2
            
            This one follows pattern compiler has set for diagnostic analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.ComputeDiagnosticAnalysisResultsAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersPair,Microsoft.CodeAnalysis.Project,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},System.Threading.CancellationToken)">
            <summary>
            Return all diagnostics that belong to given project for the given <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/> either
            from cache or by calculating them.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager">
            <summary>
            This is in charge of anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager.#ctor(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerInfoCache)">
            <summary>
            This is in charge of anything related to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager._hostAnalyzerStateMap">
            <summary>
            Analyzers supplied by the host (IDE). These are built-in to the IDE, the compiler, or from an installed IDE extension (VSIX). 
            Maps language name to the analyzers and their state.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager._projectAnalyzerStateMap">
            <summary>
            Analyzers referenced by the project via a PackageReference. Updates are protected by _projectAnalyzerStateMapGuard.
            ImmutableDictionary used to present a safe, non-immutable view to users.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager._projectAnalyzerStateMapGuard">
            <summary>
            Guard around updating _projectAnalyzerStateMap. This is used in UpdateProjectStateSets to avoid
            duplicated calculations for a project during contentious calls.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager.GetOrCreateAnalyzersAsync(Microsoft.CodeAnalysis.SolutionState,Microsoft.CodeAnalysis.ProjectState,System.Threading.CancellationToken)">
            <summary>
            Return <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer"/>s for the given <see cref="T:Microsoft.CodeAnalysis.Project"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.StateManager.UpdateProjectAnalyzerInfoAsync(Microsoft.CodeAnalysis.SolutionState,Microsoft.CodeAnalysis.ProjectState,System.Threading.CancellationToken)">
            <summary>
            Updates the map to the given project snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.IncrementalMemberEditAnalyzer">
            <summary>
            This type performs incremental analysis in presence of edits to only a single member inside a document.
            For typing scenarios where we are continuously editing a method body, we can optimize the full
            document diagnostic computation by doing the following:
              1. Re-using all the old cached diagnostics outside the edited member node from a prior
                 document snapshot, but with updated diagnostic spans.
                 AND
              2. Replacing all the old diagnostics for the edited member node in a prior document snapshot
                 with the newly computed diagnostics for this member node in the latest document snaphot.
            If we are unable to perform this incremental diagnostics update, we fallback to computing
            the diagnostics for the entire document.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.IncrementalMemberEditAnalyzer._lastDocumentWithCachedDiagnostics">
            <summary>
            Weak reference to the last document snapshot for which full document diagnostics
            were computed and saved.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.IncrementalMemberEditAnalyzer.MemberSpans">
            <summary>
            Spans of member nodes for incremental analysis.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.IncrementalMemberEditAnalyzer.MemberSpans.#ctor(Microsoft.CodeAnalysis.DocumentId,Microsoft.CodeAnalysis.VersionStamp,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Spans of member nodes for incremental analysis.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.s_projectToForceAnalysisData">
            <summary>
            Cached data from a real <see cref="T:Microsoft.CodeAnalysis.ProjectState"/> instance to the cached diagnostic data produced by
            <em>all</em> the analyzers for the project.  This data can then be used by <see
            cref="M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerService.DiagnosticIncrementalAnalyzer.GetDiagnosticsForIdsAsync(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.DocumentId,System.Collections.Immutable.ImmutableHashSet{System.String},System.Func{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean},System.Boolean,System.Boolean,System.Threading.CancellationToken)"/> to speed up subsequent calls through the normal <see
            cref="T:Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService"/> entry points as long as the project hasn't changed at all.
            </summary>
            <remarks>
            This table is keyed off of <see cref="T:Microsoft.CodeAnalysis.ProjectState"/> but stores data from <see cref="T:Microsoft.CodeAnalysis.SolutionState"/> on
            it.  Specifically <see cref="P:Microsoft.CodeAnalysis.SolutionState.Analyzers"/>.  Normally keying off a ProjectState would not be ok
            as the ProjectState might stay the same while the SolutionState changed.  However, that can't happen as
            SolutionState has the data for Analyzers computed prior to Projects being added, and then never changes.
            Practically, solution analyzers are the core Roslyn analyzers themselves we distribute, or analyzers shipped
            by vsix (not nuget).  These analyzers do not get loaded after changing *until* VS restarts.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisExecutor">
            <summary>
            Executes analyzers on a document for computing local syntax/semantic/additional file diagnostics for a specific <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisScope"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisExecutor.ComputeDiagnosticsAsync(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Threading.CancellationToken)">
            <summary>
            Return all local diagnostics (syntax, semantic) that belong to given document for the given analyzer by calculating them.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisExecutor.CreateAnalyzerExceptionDiagnostic(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Exception)">
            <summary>
            Create a diagnostic for exception thrown by the given analyzer.
            </summary>
            <remarks>
            Keep this method in sync with "AnalyzerExecutor.CreateAnalyzerExceptionDiagnostic".
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Diagnostics.DocumentAnalysisExecutor.IsAnalyzerEnabledForProject(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            Return true if the given <paramref name="analyzer"/> is not suppressed for the given project.
            NOTE: This API is intended to be used only for performance optimization.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueSessionState">
            <summary>
            Manages in-proc EnC and Hot Reload session state that other components need to keep track of.
            </summary>
            <remarks>
            Separated from the in-proc EnC language service to allow access from lower-layer components.
            
            <see cref="T:Microsoft.CodeAnalysis.EditAndContinue.IEditAndContinueSessionTracker"/> provides read-only access,
            <see cref="T:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueSessionState"/> provides read-write access, which is only used by the EnC language service.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueSessionState.#ctor">
            <summary>
            Manages in-proc EnC and Hot Reload session state that other components need to keep track of.
            </summary>
            <remarks>
            Separated from the in-proc EnC language service to allow access from lower-layer components.
            
            <see cref="T:Microsoft.CodeAnalysis.EditAndContinue.IEditAndContinueSessionTracker"/> provides read-only access,
            <see cref="T:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueSessionState"/> provides read-write access, which is only used by the EnC language service.
            </remarks>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueSessionState.IsSessionActive">
            <summary>
            Set to true when EnC or Hot Reload session becomes active (e.g. F5/Ctrl+F5), to false when it ends.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.EditAndContinue.EditAndContinueSessionState.ApplyChangesDiagnostics">
            <summary>
            Updated when the user attempts to apply changes.
            Includes EnC emit diagnostics and debuggee state related diagnostics.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.FindUsages.SimpleFindUsagesContext">
            <summary>
            Simple implementation of a <see cref="T:Microsoft.CodeAnalysis.FindUsages.FindUsagesContext"/> that just aggregates the results
            for consumers that just want the data once it is finally computed.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Formatting.RazorLineFormattingOptionsStorage">
            <summary>
            Formatting options for Razor design-time documents.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.ClientFallbackAnalyzerConfigOptionsProvider">
            <summary>
            Flows editorconfig options stored by <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/> to <see cref="P:Microsoft.CodeAnalysis.Solution.FallbackAnalyzerOptions"/> whenever a new language is added to one of the target workspaces.
            Works alongside <see cref="T:Microsoft.CodeAnalysis.Options.SolutionAnalyzerConfigOptionsUpdater"/>, which keeps values of these options up-to-date afterwards.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.ClientFallbackAnalyzerConfigOptionsProvider.#ctor(Microsoft.CodeAnalysis.Options.EditorConfigOptionsEnumerator,Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            Flows editorconfig options stored by <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/> to <see cref="P:Microsoft.CodeAnalysis.Solution.FallbackAnalyzerOptions"/> whenever a new language is added to one of the target workspaces.
            Works alongside <see cref="T:Microsoft.CodeAnalysis.Options.SolutionAnalyzerConfigOptionsUpdater"/>, which keeps values of these options up-to-date afterwards.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Options.SolutionAnalyzerConfigOptionsUpdater">
            <summary>
            Keeps <see cref="P:Microsoft.CodeAnalysis.Solution.FallbackAnalyzerOptions"/> up-to-date with global option values maintained by <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Options.SolutionAnalyzerConfigOptionsUpdater.#ctor(Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <summary>
            Keeps <see cref="P:Microsoft.CodeAnalysis.Solution.FallbackAnalyzerOptions"/> up-to-date with global option values maintained by <see cref="T:Microsoft.CodeAnalysis.Options.IGlobalOptionService"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.BackgroundAnalysisScopeOption">
            <summary>
            Option to turn configure background analysis scope for the current user.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.SolutionBackgroundAnalysisScopeOption">
            <summary>
            Option to turn configure background analysis scope for the current solution.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.CompilerDiagnosticsScopeOption">
            <summary>
            Option to configure compiler diagnostics scope for the current user.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.LowMemoryForcedMinimalBackgroundAnalysis">
            <summary>
            Enables forced <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.BackgroundAnalysisScope.Minimal"/> scope when low VM is detected to improve performance.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.GetBackgroundAnalysisScope(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String)">
             <summary>
             <para>Gets the effective background analysis scope for the current solution.</para>
            
             <para>Gets the solution-specific analysis scope set through
             <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.SolutionBackgroundAnalysisScopeOption"/>, or the default analysis scope if no solution-specific
             scope is set.</para>
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.GetBackgroundCompilerAnalysisScope(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String)">
             <summary>
             <para>Gets the effective background compiler analysis scope for the current solution.</para>
            
             <para>Gets the solution-specific analysis scope set through
             <see cref="F:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.SolutionBackgroundAnalysisScopeOption"/>, or the default compiler analysis scope if no
             solution-specific scope is set.</para>
             </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.IsFullSolutionAnalysisEnabled(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String)">
            <summary>
            Returns true if full solution analysis is enabled for the given
            <paramref name="analyzer"/> through options for the given <paramref name="language"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.IsFullSolutionAnalysisEnabled(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String)">
            <summary>
            Returns true if the entire solution will be analyzed in the background
            to compute up-to-date diagnostics for the error list.
            Note that the background analysis scope for compiler diagnostics and
            analyzers can be different. If you want to fetch individual values for
            whether or not full solution analysis is enabled for compiler diagnostics
            and analyzers, use the other overload
            <see cref="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.IsFullSolutionAnalysisEnabled(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String,System.Boolean@,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.IsFullSolutionAnalysisEnabled(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Returns true if the entire solution will be analyzed in the background
            to compute up-to-date diagnostics for the error list.
            Note that the background analysis scope for compiler diagnostics and
            analyzers can be different. Full analysis is enabled if either
            <paramref name="compilerFullSolutionAnalysisEnabled"/> is true or
            <paramref name="analyzersFullSolutionAnalysisEnabled"/> is true.
            Full analysis is disabled only if both these flags are false.
            If you do not care about the individual full solution analysis values
            for compiler diagnostics and analyzers, use the other overload
            <see cref="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.IsFullSolutionAnalysisEnabled(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String)"/>.
            </summary>
            <param name="globalOptions">Global options.</param>
            <param name="language">
            Language of the projects in the solution to analyze.
            </param>
            <param name="compilerFullSolutionAnalysisEnabled">
            Indicates if the compiler diagnostics need to be computed for the entire solution.
            </param>
            <param name="analyzersFullSolutionAnalysisEnabled">
            Indicates if analyzer diagnostics need to be computed for the entire solution.
            </param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SolutionCrawler.SolutionCrawlerOptionsStorage.IsAnalysisDisabled(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.String)">
            <summary>
            Returns true if background analysis is completely disabled for
            both compiler diagnostics and analyzer diagnostics, i.e. the user
            does not want to see squiggles or error list entries for any diagnostics.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedPredefinedSuggestedActionCategoryNames">
            <summary>
            Equivalent to PredefinedSuggestedActionCategoryNames, but in a location that
            can be used by both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet">
            <summary>
            Similar to SuggestedActionSet, but in a location that can be used
            by both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource">
            <summary>
            Provides mutual code action logic for both local and LSP scenarios
            via intermediate interface <see cref="T:Microsoft.CodeAnalysis.UnifiedSuggestions.IUnifiedSuggestedAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.GetFilterAndOrderCodeFixesAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.ICodeFixService,Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CodeActions.ICodeActionRequestPriorityProvider,System.Threading.CancellationToken)">
            <summary>
            Gets, filters, and orders code fixes.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.OrganizeFixesAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection},System.Threading.CancellationToken)">
            <summary>
            Arrange fixes into groups based on the issue (diagnostic being fixed) and prioritize these groups.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.GroupFixesAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Solution,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CodeFixes.CodeFixCollection},System.Collections.Generic.IDictionary{System.Tuple{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData,Microsoft.CodeAnalysis.CodeActions.CodeActionPriority,System.Nullable{Microsoft.CodeAnalysis.CodeActions.CodeActionPriority}},System.Collections.Generic.IList{Microsoft.CodeAnalysis.UnifiedSuggestions.IUnifiedSuggestedAction}},Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder{System.Tuple{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData,Microsoft.CodeAnalysis.CodeActions.CodeActionPriority,System.Nullable{Microsoft.CodeAnalysis.CodeActions.CodeActionPriority}}},System.Threading.CancellationToken)">
            <summary>
            Groups fixes by the diagnostic being addressed by each fix.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.PrioritizeFixGroups(Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Immutable.ImmutableDictionary{System.Tuple{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData,Microsoft.CodeAnalysis.CodeActions.CodeActionPriority,System.Nullable{Microsoft.CodeAnalysis.CodeActions.CodeActionPriority}},System.Collections.Generic.IList{Microsoft.CodeAnalysis.UnifiedSuggestions.IUnifiedSuggestedAction}},System.Collections.Immutable.ImmutableArray{System.Tuple{Microsoft.CodeAnalysis.Diagnostics.DiagnosticData,Microsoft.CodeAnalysis.CodeActions.CodeActionPriority,System.Nullable{Microsoft.CodeAnalysis.CodeActions.CodeActionPriority}}},Microsoft.CodeAnalysis.Workspace)">
            <summary>
            Return prioritized set of fix groups such that fix group for suppression always show up at the bottom of the list.
            </summary>
            <remarks>
            Fix groups are returned in priority order determined based on <see cref="T:Microsoft.CodeAnalysis.ExtensionOrderAttribute"/>.
            Priority for all <see cref="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet"/>s containing fixes is set to <see
            cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionPriority.Default"/> by default. The only exception is the case where a <see
            cref="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet"/> only contains suppression fixes - the priority of such <see
            cref="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet"/>s is set to <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionPriority.Lowest"/> so that suppression
            fixes always show up last after all other fixes (and refactorings) for the selected line of code.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.GetFilterAndOrderCodeRefactoringsAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeRefactorings.ICodeRefactoringService,Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,System.Nullable{Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets, filters, and orders code refactorings.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.OrganizeRefactoringsAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoring,System.Threading.CancellationToken)">
            <summary>
            Arrange refactorings into groups.
            </summary>
            <remarks>
            Refactorings are returned in priority order determined based on <see cref="T:Microsoft.CodeAnalysis.ExtensionOrderAttribute"/>.
            Priority for all <see cref="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet"/>s containing refactorings is set to
            <see cref="F:Microsoft.CodeAnalysis.CodeActions.CodeActionPriority.Low"/> and should show up after fixes but before
            suppression fixes in the light bulb menu.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.FilterAndOrderActionSets(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionSet},System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Int32)">
            <summary>
            Filters and orders the code fix sets and code refactoring sets amongst each other.
            Should be called with the results from <see cref="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.GetFilterAndOrderCodeFixesAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeFixes.ICodeFixService,Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.CodeActions.ICodeActionRequestPriorityProvider,System.Threading.CancellationToken)"/>
            and <see cref="M:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionsSource.GetFilterAndOrderCodeRefactoringsAsync(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.CodeRefactorings.ICodeRefactoringService,Microsoft.CodeAnalysis.TextDocument,Microsoft.CodeAnalysis.Text.TextSpan,System.Nullable{Microsoft.CodeAnalysis.CodeActions.CodeActionRequestPriority},System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActions.ICodeFixSuggestedAction">
            <summary>
            Common interface used by both local Roslyn and LSP to implement
            their specific versions of CodeFixSuggestedAction.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActions.ICodeRefactoringSuggestedAction">
            <summary>
            Common interface used by both local Roslyn and LSP to implement
            their specific versions of CodeRefactoringSuggestedAction.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActions.IFixAllCodeFixSuggestedAction">
            <summary>
            Common interface used by both local Roslyn and LSP to implement
            their specific versions of FixAllCodeFixSuggestedAction.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActions.IFixAllCodeRefactoringSuggestedAction">
            <summary>
            Common interface used by both local Roslyn and LSP to implement
            their specific versions of FixAllCodeRefactoringSuggestedAction.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.IUnifiedSuggestedAction">
            <summary>
            Similar to ISuggestedAction, but in a location that can be used by both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedCodeFixSuggestedAction">
            <summary>
            Similar to CodeFixSuggestionAction, but in a location that can be used by
            both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedCodeRefactoringSuggestedAction">
            <summary>
            Similar to CodeRefactoringSuggestedAction, but in a location that can be used by
            both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedFixAllCodeFixSuggestedAction">
            <summary>
            Similar to FixAllCodeFixSuggestedAction, but in a location that can be used by
            both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedFixAllCodeRefactoringSuggestedAction">
            <summary>
            Similar to FixAllCodeRefactoringSuggestedAction, but in a location that can be used by
            both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedAction">
            <summary>
            Similar to SuggestedAction, but in a location that can be used by
            both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.UnifiedSuggestions.UnifiedSuggestedActionWithNestedActions">
            <summary>
            Similar to SuggestedActionWithNestedActions, but in a location that can be used by
            both local Roslyn and LSP.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.AbstractHandlerProvider">
            <summary>
            Manages handler discovery and distribution.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractHandlerProvider.GetRegisteredMethods">
            <summary>
            Gets the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata"/>s for all registered methods.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractHandlerProvider.GetMethodHandler(System.String,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef,System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>s for a particular request.
            </summary>
            <param name="method">The method name for the request.</param>
            <param name="requestTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the request type for this method.</param>
            <param name="responseTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the response type for this method.</param>
            <param name="language">The language for the request.</param>
            <returns>The handler for the request.</returns>
            <remarks>
            If the handler for the given language is not found, an exception is thrown.
            Callers are expected to only request handlers for methods and languages that exist.
            </remarks>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._queue">
            <summary>
            These are lazy to allow implementations to define custom variables that are used by
            <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.ConstructRequestExecutionQueue"/> or <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.ConstructLspServices"/>
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._lifeCycleLock">
            <summary>
            Ensures that we only run shutdown and exit code once in order.
            Guards access to <see cref="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._shutdownRequestTask"/> and <see cref="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._exitNotificationTask"/>
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._shutdownRequestTask">
            <summary>
            Task representing the work done on LSP server shutdown.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._exitNotificationTask">
            <summary>
            Task representing the work down on LSP exit.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1._serverExitedSource">
            <summary>
            Task completion source that is started when the server starts and completes when the server exits.
            Used when callers need to wait for the server to cleanup.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.Initialize">
            <summary>
            Initializes the LanguageServer.
            </summary>
            <remarks>Should be called at the bottom of the implementing constructor or immediately after construction.</remarks>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.ConstructLspServices">
            <summary>
            Extension point to allow creation of <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.ILspServices"/> since that can't always be handled in the constructor.
            </summary>
            <returns>An <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.ILspServices"/> instance for this server.</returns>
            <remarks>This should only be called once, and then cached.</remarks>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.ShutdownAsync(System.String)">
            <summary>
            Tells the LSP server to stop handling any more incoming messages (other than exit).
            Typically called from an LSP shutdown request.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.ExitAsync">
            <summary>
            Tells the LSP server to exit.  Requires that <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.ShutdownAsync(System.String)"/> was called first.
            Typically called from an LSP exit notification.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1.JsonRpc_Disconnected(System.Object,StreamJsonRpc.JsonRpcDisconnectedEventArgs)">
            <summary>
            Cleanup the server if we encounter a json rpc disconnect so that we can be restarted later.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.AbstractRequestContextFactory`1">
            <summary>
            <para>
            A factory for creating <typeparamref name="TRequestContext"/> objects from <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1"/>'s.
            </para>
            <para>
            RequestContext's are useful for passing document context, since by default <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractRequestContextFactory`1.CreateRequestContextAsync``1(Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem{`0},Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,``0,System.Threading.CancellationToken)"/>
            is run on the queue thread (and thus no mutating requests may be executing simultaneously, preventing possible race conditions).
            It also allows somewhere to pass things like the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.ILspServices" /> or <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.ILspLogger" /> which are useful on a wide variety of requests.
            </para>
            </summary>
            <typeparam name="TRequestContext">The type of the RequestContext to be used by the handler.</typeparam>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractRequestContextFactory`1.CreateRequestContextAsync``1(Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem{`0},Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,``0,System.Threading.CancellationToken)">
            <summary>
            Create a <typeparamref name="TRequestContext"/> object from the given <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1"/>.
            Note - throwing in the implementation of this method will cause the server to shutdown.
            </summary>
            <param name="queueItem">The <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1"/> from which to create the request context.</param>
            <param name="methodHandler">The <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> for which to create the request context</param>
            <param name="requestParam">The request parameters.</param>
            <param name="cancellationToken"></param>
            <returns>The <typeparamref name="TRequestContext"/> for this request.</returns>
            <remarks>This method is called on the queue thread to allow context to be retrieved serially, without the possibility of race conditions from Mutating requests.</remarks>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractRequestScope.RecordHandlerLanguage(System.String)">
            <summary>
            Updates the telemetry metrics for the request with the handler's language.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.HandlerProvider">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.HandlerProvider.#ctor(Microsoft.CommonLanguageServerProtocol.Framework.ILspServices,Microsoft.CommonLanguageServerProtocol.Framework.AbstractTypeRefResolver)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IInitializeManager`2.GetInitializeResult">
            <summary>
            Gets a response to be used for "initialize", completing the negotiations between client and server.
            </summary>
            <returns>An InitializeResult.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IInitializeManager`2.SetInitializeParams(`0)">
            <summary>
            Store the InitializeParams for later retrieval.
            </summary>
            <param name="request">The InitializeParams to be stored.</param>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IInitializeManager`2.GetInitializeParams">
            <summary>
            Gets the InitializeParams to, for example, examine the ClientCapabilities.
            </summary>
            <returns>The InitializeParams object sent with "initialize".</returns>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.ILifeCycleManager">
            <summary>
            An optional component to run additional logic when LSP shutdown and exit are called,
            for example logging messages, cleaning up custom resources, etc.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.ILifeCycleManager.ExitAsync">
            <summary>
            Called when the server recieves the LSP exit notification.
            </summary>
            <remarks>
            This is always called after the LSP shutdown request and <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.ILifeCycleManager.ShutdownAsync(System.String)"/> runs
            but before LSP services and the JsonRpc connection is disposed of in LSP exit.
            Implementations are not expected to be threadsafe.
            </remarks>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.ILifeCycleManager.ShutdownAsync(System.String)">
            <summary>
            Called when the server receives the LSP shutdown request.
            </summary>
            <remarks>
            This is called before the request execution is closed.
            Implementations are not expected to be threadsafe.
            </remarks>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler">
            <summary>
            Top level type for LSP request handler.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler.MutatesSolutionState">
            <summary>
            Whether or not the solution state on the server is modified as a part of handling this request.
            This may affect queuing behavior (IE mutating requests are run in serial rather than parallel) depending on the <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IRequestExecutionQueue`1"/> implementation.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandlerProvider">
            <summary>
            Optional interface that can be implemented by <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.ILspServices"/> implementations
            to provide faster access to <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.INotificationHandler`1">
            <summary>
            An interface for handlers of methods which do not return a response and receive no parameters.
            </summary>
            <typeparam name="TRequestContext">The type of the RequestContext to be used by this handler.</typeparam>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.INotificationHandler`2">
            <summary>
            An interface for handlers of methods which do not return a response 
            </summary>
            <typeparam name="TRequest">The type of the Request parameter to be received.</typeparam>
            <typeparam name="TRequestContext">The type of the RequestContext to be used by this handler.</typeparam>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1">
            <summary>
            An item to be queued for execution.
            </summary>
            <typeparam name="TRequestContext">The type of the request context to be passed along to the handler.</typeparam>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.StartRequestAsync``2(``0,`0,Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes the work specified by this queue item.
            </summary>
            <param name="request">The request parameters.</param>
            <param name="context">The context created by <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.CreateRequestContextAsync``1(Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata,Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer{`0},System.Threading.CancellationToken)"/>.</param>
            <param name="handler">The handler to use to execute the request.</param>
            <param name="language">The language for the request.</param>
            <param name="cancellationToken" />
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which completes when the request has finished.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.CreateRequestContextAsync``1(Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata,Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer{`0},System.Threading.CancellationToken)">
            <summary>
            Creates the context that is sent to the handler for this queue item.
            Note - this method is always called serially inside the queue before
            running the actual request in <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.StartRequestAsync``2(``0,`0,Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,System.String,System.Threading.CancellationToken)"/>
            Throwing in this method will cause the server to shutdown.
            
            If there was a recoverable failure in creating the request, this will return null and the caller should stop processing the request.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.FailRequest(System.String)">
            <summary>
            Handles when the queue needs to manually fail a request before the
            handler is invoked without shutting down the entire queue.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.LspServices">
            <summary>
            Provides access to LSP services.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1.MethodName">
            <summary>
            The method being executed.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.IRequestExecutionQueue`1">
            <summary>
            Queues requests to be executed in the proper order.
            </summary>
            <typeparam name="TRequestContext">The type of the RequestContext to be used by the handler.</typeparam>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IRequestExecutionQueue`1.ExecuteAsync(System.Object,System.String,Microsoft.CommonLanguageServerProtocol.Framework.ILspServices,System.Threading.CancellationToken)">
            <summary>
            Queue a request.
            </summary>
            <returns>A task that completes when the handler execution is done.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IRequestExecutionQueue`1.Start">
            <summary>
            Start the queue accepting requests once any event handlers have been attached.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IRequestHandler`3.HandleRequestAsync(`0,`2,System.Threading.CancellationToken)">
            <summary>
            Handles an LSP request in the context of the supplied document and/or solution.
            </summary>
            <param name="request">The request parameters.</param>
            <param name="context">The LSP request context, which should have been filled in with document information from <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler`2.GetTextDocumentIdentifier(`0)"/> if applicable.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the request processing.</param>
            <returns>The LSP response.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.IRequestHandler`2.HandleRequestAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Handles an LSP request in the context of the supplied document and/or solution.
            </summary>
            <param name="context">The LSP request context, which should have been filled in with document information from <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler`2.GetTextDocumentIdentifier(`0)"/> if applicable.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the request processing.</param>
            <returns>The LSP response.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler`2.GetTextDocumentIdentifier(`0)">
            <summary>
            Gets the identifier of the document from the request, if the request provides one.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerConstants.DefaultLanguageName">
            <summary>
            Default language name for use with <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerEndpointAttribute"/> and <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.AbstractHandlerProvider.GetMethodHandler(System.String,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef,System.String)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerEndpointAttribute">
            <summary>
            An attribute which identifies the method which an <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> implements.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerEndpointAttribute.Method">
            <summary>
            Contains the method that this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> implements.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerEndpointAttribute.Languages">
            <summary>
            Contains the language name(s) supported by this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerEndpointAttribute.#ctor(System.String,System.String,System.String[])">
            <summary>
            Specifies the method that this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> implements and the language(s) supported by it.
            </summary>
            <param name="method">The request handler method name.</param>
            <param name="language">The language name supported by this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>. For example, <see cref="F:Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerConstants.DefaultLanguageName"/>, 'C#', etc.</param>
            <param name="additionalLanguages">Additional language names supported by this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>.</param>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails">
            <summary>
            Provides information about an <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>.
            </summary>
            <param name="MethodName">The name of the LSP method handled.</param>
            <param name="Language">The language this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> targets.</param>
            <param name="RequestTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the request type, if any.</param>
            <param name="ResponseTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the response type, if any.</param>
            <param name="RequestContextTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the context type.</param>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.#ctor(System.String,System.String,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef,Microsoft.CommonLanguageServerProtocol.Framework.TypeRef)">
            <summary>
            Provides information about an <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/>.
            </summary>
            <param name="MethodName">The name of the LSP method handled.</param>
            <param name="Language">The language this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> targets.</param>
            <param name="RequestTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the request type, if any.</param>
            <param name="ResponseTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the response type, if any.</param>
            <param name="RequestContextTypeRef">A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the context type.</param>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.MethodName">
            <summary>The name of the LSP method handled.</summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.Language">
            <summary>The language this <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler"/> targets.</summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.RequestTypeRef">
            <summary>A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the request type, if any.</summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.ResponseTypeRef">
            <summary>A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the response type, if any.</summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.RequestContextTypeRef">
            <summary>A <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> representing the context type.</summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.MethodHandlerDetails.GetAllHandlerDetails(System.Type)">
            <summary>
            Retrieves the generic argument information from the request handler type without instantiating it.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.NewtonsoftLanguageServer`1">
            <summary>
            Basic implementation of <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1"/> using Newtonsoft for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.NewtonsoftLanguageServer`1.#ctor(StreamJsonRpc.JsonRpc,Newtonsoft.Json.JsonSerializer,Microsoft.CommonLanguageServerProtocol.Framework.ILspLogger,Microsoft.CommonLanguageServerProtocol.Framework.AbstractTypeRefResolver)">
            <summary>
            Basic implementation of <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1"/> using Newtonsoft for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.NewtonsoftLanguageServer`1.NewtonsoftDelegatingEntryPoint.ExecuteRequestAsync(Newtonsoft.Json.Linq.JToken,System.Threading.CancellationToken)">
            <summary>
            StreamJsonRpc entry point for all handler methods.
            The optional parameters allow StreamJsonRpc to call into the same method for any kind of request / notification (with any number of params or response).
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.NoValue">
            <summary>
            A placeholder type to help handle parameterless messages and messages with no return value.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`1._requestHandlingStarted">
            <summary>
            True if this queue item has actually started handling the request
            by delegating to the handler.  False while the item is still being
            processed by the queue.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`1._completionSource">
            <summary>
            A task completion source representing the result of this queue item's work.
            This is the task that the client is waiting on.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`1.TryDeserializeRequest``1(Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer{`0},Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata,System.Boolean,``0@)">
            <summary>
            Deserializes the request into the concrete type.  If the deserialization fails we will fail the request and call TrySetException on the <see cref="F:Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`1._completionSource"/>
            so that the client can observe the failure.  If this is a mutating request, we will also let the exception bubble up so that the queue can handle it.
            
            The caller is expected to return immediately and stop processing the request if this returns false.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`1.StartRequestAsync``2(``0,`0,Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,System.String,System.Threading.CancellationToken)">
            <summary>
            Processes the queued request. Exceptions will be sent to the task completion source
            representing the task that the client is waiting for, then re-thrown so that
            the queue can correctly handle them depending on the type of request.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1">
            <summary>
            Coordinates the execution of LSP messages to ensure correct results are sent back.
            </summary>
            <remarks>
            <para>
            When a request comes in for some data the handler must be able to access a solution state that is correct
            at the time of the request, that takes into account any text change requests that have come in  previously
            (via textDocument/didChange for example).
            </para>
            <para>
            This class achieves this by distinguishing between mutating and non-mutating requests, and ensuring that
            when a mutating request comes in, its processing blocks all subsequent requests. As each request comes in
            it is added to a queue, and a queue item will not be retrieved while a mutating request is running. Before
            any request is handled the solution state is created by merging workspace solution state, which could have
            changes from non-LSP means (eg, adding a project reference), with the current "mutated" state.
            When a non-mutating work item is retrieved from the queue, it is given the current solution state, but then
            run in a fire-and-forget fashion.
            </para>
            <para>
            Regardless of whether a request is mutating or not, or blocking or not, is an implementation detail of this class
            and any consumers observing the results of the task returned from
            <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.ExecuteAsync(System.Object,System.String,Microsoft.CommonLanguageServerProtocol.Framework.ILspServices,System.Threading.CancellationToken)"/>
            will see the results of the handling of the request, whenever it occurred.
            </para>
            <para>
            Exceptions in the handling of non-mutating requests are sent back to callers. Exceptions in the processing of
            the queue will close the LSP connection so that the client can reconnect. Exceptions in the handling of mutating
            requests will also close the LSP connection, as at that point the mutated solution is in an unknown state.
            </para>
            <para>
            After shutdown is called, or an error causes the closing of the connection, the queue will not accept any
            more messages, and a new queue will need to be created.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1._queue">
            <summary>
            The queue containing the ordered LSP requests along with the trace activityId (to associate logs with a request) and
             a combined cancellation token representing the queue's cancellation token and the individual request cancellation token.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1._handlerInfoMap">
            <summary>
            Map of method to the handler info for each language.
            The handler info is created lazily to avoid instantiating any types or handlers until a request is recieved for
            that particular method and language.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1._queueProcessingTask">
            <summary>
            For test purposes only.
            A task that completes when the queue processing stops.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.CancelInProgressWorkUponMutatingRequest">
            <summary>
            Indicates this queue requires in-progress work to be cancelled before servicing
            a mutating request.
            </summary>
            <remarks>
            This was added for WebTools consumption as they aren't resilient to
            incomplete requests continuing execution during didChange notifications. As their
            parse trees are mutable, a didChange notification requires all previous requests
            to be completed before processing. This is similar to the O#
            WithContentModifiedSupport(false) behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.ExecuteAsync(System.Object,System.String,Microsoft.CommonLanguageServerProtocol.Framework.ILspServices,System.Threading.CancellationToken)">
            <summary>
            Queues a request to be handled by the specified handler, with mutating requests blocking subsequent requests
            from starting until the mutation is complete.
            </summary>
            <param name="serializedRequest">The serialized request to handle.</param>
            <param name="methodName">The name of the LSP method.</param>
            <param name="lspServices">The set of LSP services to use.</param>
            <param name="requestCancellationToken">A cancellation token that will cancel the handing of this request.
            The request could also be cancelled by the queue shutting down.</param>
            <returns>A task that can be awaited to observe the results of the handing of this request.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.InvokeProcessCoreAsync(Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem{`0},Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata,Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,System.Reflection.MethodInfo,System.Collections.Concurrent.ConcurrentDictionary{System.Threading.Tasks.Task,System.Threading.CancellationTokenSource},System.Threading.CancellationTokenSource,System.Threading.CancellationToken)">
            <summary>
            Reflection invokes <see cref="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.ProcessQueueCoreAsync``2(Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem{`0},Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata,System.Collections.Concurrent.ConcurrentDictionary{System.Threading.Tasks.Task,System.Threading.CancellationTokenSource},System.Threading.CancellationTokenSource,System.Threading.CancellationToken)"/>
            using the concrete types defined by the handler's metadata.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.ProcessQueueCoreAsync``2(Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem{`0},Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler,Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata,System.Collections.Concurrent.ConcurrentDictionary{System.Threading.Tasks.Task,System.Threading.CancellationTokenSource},System.Threading.CancellationTokenSource,System.Threading.CancellationToken)">
            <summary>
            Given a concrete handler and types, this dispatches the current work item to the appropriate handler,
            waiting or not waiting on results as defined by the handler.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.BeforeRequest``1(``0)">
            <summary>
            Allows an action to happen before the request runs, for example setting the current thread culture.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.WrapStartRequestTaskAsync(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Provides an extensibility point to log or otherwise inspect errors thrown from non-mutating requests,
            which would otherwise be lost to the fire-and-forget task in the queue.
            </summary>
            <param name="requestTask">The task to be inspected.</param>
            <param name="rethrowExceptions">If exceptions should be re-thrown.</param>
            <returns>The task from <paramref name="requestTask"/>, to allow chained calls if needed.</returns>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.DisposeAsync">
            <summary>
            Shuts down the queue, stops accepting new messages, and cancels any in-progress or queued tasks.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1.TestAccessor.AreAllItemsCancelledUnsafeAsync">
            <summary>
            Test only method to validate that remaining items in the queue are cancelled.
            This directly mutates the queue in an unsafe way, so ensure that all relevant queue operations
            are done before calling.
            </summary>
        </member>
        <member name="F:Microsoft.CommonLanguageServerProtocol.Framework.SystemTextJsonLanguageServer`1._jsonSerializerOptions">
            <summary>
            JsonSerializer options used by streamjsonrpc (and for serializing / deserializing the requests to streamjsonrpc).
            These options are specifically from the <see cref="T:StreamJsonRpc.SystemTextJsonFormatter"/> that added the exotic type converters.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.SystemTextJsonLanguageServer`1.SystemTextJsonDelegatingEntryPoint.ExecuteRequest0Async(System.Threading.CancellationToken)">
            <summary>
            StreamJsonRpc entry point for handlers with no parameters.
            Unlike Newtonsoft, we have to differentiate instead of using default parameters.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.SystemTextJsonLanguageServer`1.SystemTextJsonDelegatingEntryPoint.ExecuteRequestAsync(System.Nullable{System.Text.Json.JsonElement},System.Threading.CancellationToken)">
            <summary>
            StreamJsonRpc entry point for handlers with parameters (and any response) type.
            </summary>
        </member>
        <member name="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef">
            <summary>
            Helper that avoids loading a <see cref="T:System.Type"/> by its full assembly-qualified name until needed.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.TypeName">
            <summary>
            Returns the full name of this type.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.AssemblyName">
            <summary>
            Returns the full name of the assembly containing this type.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.CodeBase">
            <summary>
            Returns the code base of the assembly containing this type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.AssemblyQualifiedName">
            <summary>
            Returns the assembly-qualified name of this type.
            </summary>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.From(System.String,System.String,System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> instance.
            </summary>
            <param name="typeName">The full name of this type.</param>
            <param name="assemblyName">The full name of the assembly containing this type.</param>
            <param name="codeBase">The code base of the assembly containing this type, if any.</param>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.From(System.Type)">
            <summary>
            Constructs a <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to use.</param>
        </member>
        <member name="M:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef.FromOrNull(System.Type)">
            <summary>
            Constructs a <see cref="T:Microsoft.CommonLanguageServerProtocol.Framework.TypeRef"/> from a <see cref="T:System.Type"/> or returns <see langword="null"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to use, or <see langword="null"/>.</param>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.AnnotatedTextEdit">
            <summary>
            Class which represents a text edit with a change annotation
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#annotatedTextEdit">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.AnnotatedTextEdit.AnnotationId">
            <summary>
            The annotation identifier.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditParams">
             <summary>
             Class representing the parameters sent from a server to a client for the workspace/applyEdit request.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#applyWorkspaceEditParams">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditParams.Label">
            <summary>
            An optional label of the workspace edit. This label is
            presented in the user interface for example on an undo
            stack to undo the workspace edit.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditParams.Edit">
            <summary>
            The edits to apply.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditResponse">
            <summary>
            Class representing the response sent for a <c>workspace/applyEdit</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#applyWorkspaceEditResult">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditResponse.Applied">
            <summary>
            Indicates whether the edit was applied or not.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditResponse.FailureReason">
            <summary>
            An optional textual description for why the edit was not applied.
            <para>
            This may be used by the server for diagnostic logging or to provide
            a suitable error for a request that triggered the edit.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ApplyWorkspaceEditResponse.FailedChange">
            <summary>
            Depending on the client's failure handling strategy this
            might contain the index of the change that failed.
            <para>
            This property is only available if the client signals a <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.FailureHandling"/> strategy in its client capabilities.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ChangeAnnotation">
            <summary>
            Additional information that describes document changes
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#changeAnnotation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>
            Since LSP 3.16
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ChangeAnnotation.Label">
            <summary>
            Human-readable string describing the change, rendered in the UI.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ChangeAnnotation.NeedsConfirmation">
            <summary>
            Indicates whether user confirmation is needed before applying the change.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ChangeAnnotation.Description">
            <summary>
            Human-readable string describing the change, rendered in the UI less prominently than the <see cref="P:Roslyn.LanguageServer.Protocol.ChangeAnnotation.Label"/>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ChangeAnnotationIdentifier">
            <summary>
            An identifier referring to a change annotation managed by a workspace edit
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#changeAnnotationIdentifier">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>
            Since LSP 3.16
            </remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.ChangeAnnotationIdentifier.#ctor(System.String)">
            <summary>
            An identifier referring to a change annotation managed by a workspace edit
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#changeAnnotationIdentifier">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>
            Since LSP 3.16
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ChangeAnnotationSupport">
            <summary>
            Describes how the client handles change annotations on workspace edits.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ChangeAnnotationSupport.GroupsOnLabel">
            <summary>
            Whether the client groups edits with equal labels into tree nodes,
            for instance all edits labelled with "Changes in Strings" would
            be a tree node..
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ClientCapabilities">
            <summary>
            Class which represents client capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#clientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientCapabilities.Workspace">
            <summary>
            Gets or sets the workspace capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientCapabilities.TextDocument">
            <summary>
            Gets or sets the text document capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientCapabilities.Notebook">
            <summary>
            Capabilities specific to the notebook document support.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientCapabilities.Window">
            <summary>
            Window specific client capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientCapabilities.General">
            <summary>
            Capabilities specific to the notebook document support.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientCapabilities.Experimental">
            <summary>
            Gets or sets the experimental capabilities.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ClientInfo">
            <summary>
            Information about the client
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientInfo.Name">
            <summary>
            The client's name as defined by the client
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ClientInfo.Version">
            <summary>
            The client's version as defined by the client
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeAction">
            <summary>
            A class representing a change that can be performed in code. A CodeAction must either set
            <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Edit"/> or <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Command"/>. If both are supplied,
            the edit will be applied first, then the command will be executed.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeAction">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Title">
            <summary>
            A short human readable title for this code action.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Kind">
            <summary>
            The kind of the code action, used to filter code actions.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Diagnostics">
            <summary>
            The diagnostics that this code action resolves.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.IsPreferred">
            <summary>
            Marks this as a preferred action. Preferred actions are used by the
            Auto Fix command and can be targeted by keybindings.
            <para>
            A quick fix should be marked preferred if it properly addresses the
            underlying error. A refactoring should be marked preferred if it is the
            most reasonable choice of actions to take.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Disabled">
            <summary>
            Marks that the code action cannot currently be applied.
            <para>
            Clients should follow the following guidelines regarding disabled code
            actions:
            <list type="bullet">
            <item>
            Disabled code actions are not shown in automatic lightbulbs code
            action menus.
            </item>
            <item>
            Disabled actions are shown as faded out in the code action menu when
            the user request a more specific type of code action, such as
            refactorings.
            </item>
            <item>
            If the user has a keybinding that auto applies a code action and only
            a disabled code actions are returned, the client should show the user
            an error message with <see cref="P:Roslyn.LanguageServer.Protocol.CodeActionDisabledReason.Reason"/> in the editor.
            </item>
            </list>
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Edit">
            <summary>
            Gets or sets the workspace edit that this code action performs.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Command">
            <summary>
            A command this code action executes. If a code action
            provides an edit and a command, first the edit is
            executed and then the command.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeAction.Data">
            <summary>
            Data field that is preserved on a code action between a <c>textDocument/codeAction</c> request
            and a <c>codeAction/resolve</c> request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionContext">
            <summary>
            Class representing diagnostic information about the context of a code action
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionContext">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionContext.Diagnostics">
            <summary>
            An array of diagnostics known on the client side overlapping the range
            provided to the <c>textDocument/codeAction</c> request.
            <para>
            They are provided so that the server knows which errors are currently
            presented to the user for the given range. There is no guarantee that
            these accurately reflect the error state of the resource. The primary
            parameter to compute code actions is the provided range.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionContext.Only">
            <summary>
            Requested kinds of actions to return.
            <para>
            Actions not of this kind are filtered out by the client before being
            shown, so servers can omit computing them.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionContext.TriggerKind">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.CodeActionTriggerKind"/> indicating how the code action was triggered..
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionDisabledReason">
            <summary>
            Indicates why a code action is disabled
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionDisabledReason.Reason">
            <summary>
            Human readable description of why the code action is currently
            disabled.
            <para>
            This is displayed in the code actions UI.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionKind">
            <summary>
            Value representing the kind of a code action.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.CodeActionKind.#ctor(System.String)">
            <summary>
            Value representing the kind of a code action.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.Empty">
            <summary>
            Empty kind.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.QuickFix">
            <summary>
            Code action is a refactor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.Refactor">
            <summary>
            Base kind for refactoring actions.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.RefactorExtract">
            <summary>
            Base kind for refactoring extraction actions, like extracting methods, functions,
            variables, etc.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.RefactorInline">
            <summary>
            Base kind for refactoring inline actions, like inlining functions, variables,
            constants, etc.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.RefactorRewrite">
            <summary>
            Base kind for refactoring rewrite actions, like adding or removing a parameter,
            making a method static, etc.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.Source">
            <summary>
            Base kind for source actions, which apply to the entire file.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.SourceOrganizeImports">
            <summary>
            Base kind for an organize imports source action.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionKind.SourceFixAll">
            <summary>
            Base kind for a fix all source action, which automatically fixes errors that have a clear
            fix that do not require user input.
            <para>
            They should not suppress errors or perform unsafe fixes such as generating new
            types or classes.
            </para>
            </summary>
            <remarks>
            Since LSP 3.17
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionKindSetting">
            <summary>
            Represents the code action kinds that are supported by the client.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.8</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionKindSetting.ValueSet">
            <summary>
            Gets or sets the code actions kinds the client supports.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionLiteralSetting">
            <summary>
            Represents the client's support for code action literals in the response of the <c>textDocument/codeAction</c> request
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.8</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionLiteralSetting.CodeActionKind">
            <summary>
            Gets or sets a value indicating what code action kinds are supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionOptions">
            <summary>
            Class representing the registration options for code actions support.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionOptions.CodeActionKinds">
            <summary>
            Gets or sets the kinds of code action that this server may return.
            </summary>
            <remarks>
            The list of kinds may be generic, such as <see cref="F:Roslyn.LanguageServer.Protocol.CodeActionKind.Refactor"/>, or the server
            may list out every specific kind they provide.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionOptions.ResolveProvider">
            <summary>
            Gets or sets a value indicating whether the server provides support to resolve
            additional information for a code action.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionParams">
            <summary>
            Class representing the parameters sent from the client to the server for the textDocument/codeAction request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionParams.TextDocument">
            <summary>
            Gets or sets the document identifier indicating where the command was invoked.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionParams.Range">
            <summary>
            Gets or sets the range in the document for which the command was invoked.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionParams.Context">
            <summary>
            Gets or sets the additional diagnostic information about the code action context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.CodeActionOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionResolveSupportSetting">
            <summary>
            Client capabilities specific to the <c>codeAction/resolve</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionResolveSupportSetting.Properties">
            <summary>
            Gets or sets a value indicating the properties that a client can resolve lazily.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionSetting">
            <summary>
            Client capabilities specific to code actions.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.CodeActionLiteralSupport">
            <summary>
            The client supports code action literals as a valid response of
            the <c>textDocument/codeAction</c> request.
            </summary>
            <remarks>Since LSP 3.8</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.IsPreferredSupport">
            <summary>
            Whether code action supports the <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.IsPreferred"/> property.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.DisabledSupport">
            <summary>
            Whether code action supports the <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Disabled"/> property.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.DataSupport">
            <summary>
            Gets or sets a value indicating whether code action supports the <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Data"/>
            property which is preserved between a `textDocument/codeAction` request and a
            `codeAction/resolve` request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.ResolveSupport">
            <summary>
            Gets or sets a value indicating whether the client supports resolving
            additional code action properties via a separate <c>codeAction/resolve</c>
            request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.HonorsChangeAnnotations">
            <summary>
            Whether the client honors the change annotations in text edits and
            resource operations returned via the <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Edit"/> property by
            for example presenting the workspace edit in the user interface and asking
            for confirmation.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeActionTriggerKind">
            <summary>
            Enum which represents the various reason why code actions were requested.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeActionTriggerKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionTriggerKind.Invoked">
            <summary>
            Code actions were explicitly requested by the user or by an extension.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CodeActionTriggerKind.Automatic">
            <summary>
            Code actions were requested automatically.
            <para>
            This typically happens when current selection in a file changes, but can also be triggered when file content changes.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeDescription">
            <summary>
            Class representing a description for an error code in a <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeDescription">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeDescription.Href">
            <summary>
            Gets or sets URI to open with more information about the diagnostic error.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.CodeDescription.Equals(Roslyn.LanguageServer.Protocol.CodeDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.CodeDescription.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.CodeDescription.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeLens">
            <summary>
            A code lens represents a command that should be shown along with
            source text, like the number of references, a way to run tests, etc.
            <para>
            A code lens is _unresolved_ when no command is associated to it. For
            performance reasons the creation of a code lens and resolving should be done
            in two stages.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLens">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLens.Range">
            <summary>
            The range in which this code lens is valid. Should only span a single line.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLens.Command">
            <summary>
            Gets or sets the command associated with this code lens.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLens.Data">
            <summary>
            Gets or sets the data that should be preserved between a textDocument/codeLens request and a codeLens/resolve request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeLensClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/codeLens` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLensClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeLensOptions">
            <summary>
            Class representing the options for code lens support.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLensOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensOptions.ResolveProvider">
            <summary>
            Gets or sets a value indicating whether or not the code lens support has a resolve provider.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeLensParams">
            <summary>
            Class representing the parameters sent from the client to the server for a textDocument/codeLens request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLensParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensParams.TextDocument">
            <summary>
            Gets or sets the document identifier to fetch code lens results for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeLensRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.CodeLensOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLensRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CodeLensWorkspaceSetting">
            <summary>
            Client capabilities specific to the code lens requests scoped to the workspace.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLensWorkspaceClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CodeLensWorkspaceSetting.RefreshSupport">
             <summary>
             Whether the client implementation supports a refresh request sent from the
             server to the client.
            
             Note that this event is global and will force the client to refresh all
             code lenses currently shown. It should be used with absolute care and is
             useful for situation where a server for example detect a project wide
             change that requires such a calculation.
             </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Color">
            <summary>
            Class which represents a color.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#color">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Color.Red">
            <summary>
            Gets or sets the Red value.
            </summary>
            <remarks>
            Value should be clamped to [0,1].
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Color.Green">
            <summary>
            Gets or sets the Green value.
            </summary>
            <remarks>
            Value should be clamped to [0,1].
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Color.Blue">
            <summary>
            Gets or sets the Blue value.
            </summary>
            <remarks>
            Value should be clamped to [0,1].
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Color.Alpha">
            <summary>
            Gets or sets the Alpha value.
            </summary>
            <remarks>
            Value should be clamped to [0,1].
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ColorInformation">
            <summary>
            Class which represents color information.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#colorInformation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorInformation.Range">
            <summary>
            Gets or sets the text range representing the color.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorInformation.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ColorPresentation">
            <summary>
            A color presentation for a textDocument/colorPresentation response.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#colorPresentation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentation.Label">
            <summary>
            The label of this color presentation. It will be shown on the color picker header.
            <para>
            By default this is also the text that is inserted when selecting this color presentation.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentation.TextEdit">
            <summary>
            A <see cref="T:Roslyn.LanguageServer.Protocol.TextEdit"/> which is applied to a document when selecting this presentation for the color.
            <para>
            When omitted the [label](#ColorPresentation.label) is used.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentation.AdditionalTextEdits">
            <summary>
            An optional array of additional <see cref="T:Roslyn.LanguageServer.Protocol.TextEdit"/> that are applied
            when selecting this color presentation.
            <para>
            Edits must not overlap with the main <see cref="P:Roslyn.LanguageServer.Protocol.ColorPresentation.TextEdit"/> nor with themselves.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ColorPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/colorPresentation request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#colorPresentationParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentationParams.TextDocument">
            <summary>
            The text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentationParams.Color">
            <summary>
            The color information to request presentations for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentationParams.Range">
            <summary>
            The range where the color would be inserted. Serves as a context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentationParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ColorPresentationParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Command">
             <summary>
             Class representing a reference to a command
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#command">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Command.Title">
            <summary>
            Gets or sets the title of the command.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Command.CommandIdentifier">
            <summary>
            Gets or sets the identifier associated with the command.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Command.Arguments">
            <summary>
            Gets or sets the arguments that the command should be invoked with.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionContext">
            <summary>
            Class representing additional information about the content in which a completion request is triggered.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionContext">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionContext.TriggerKind">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.CompletionTriggerKind"/> indicating how the completion was triggered.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionContext.TriggerCharacter">
            <summary>
            The trigger character (a single character) that has triggered code completion.
            Undefined when <see cref="P:Roslyn.LanguageServer.Protocol.CompletionContext.TriggerKind"/> is not <see cref="F:Roslyn.LanguageServer.Protocol.CompletionTriggerKind.TriggerCharacter"/>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItem">
            <summary>
            Class which represents an IntelliSense completion item.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionItem">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Label">
            <summary>
            The label of this completion item.
            <para>
            The label property is also by default the text that
            is inserted when selecting this completion.
            </para>
            <para>
            If label details are provided the label itself should
            be an unqualified name of the completion item.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.LabelDetails">
            <summary>
            Additional details for the label.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Kind">
            <summary>
            The kind of this completion item. Based on the kind
            an icon is chosen by the editor.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Tags">
            <summary>
            Tags for this completion item, which tweak the rendering of the item.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Detail">
            <summary>
            A human-readable string with additional information
            about this item, like type or symbol information
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Documentation">
            <summary>
             A human-readable string that represents a documentation comment
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Deprecated">
            <summary>
            Indicates whether this item is deprecated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Preselect">
            <summary>
            Select this item when showing.
            <para>
            Note that only one completion item can be selected and that the
            tool / client decides which item that is. The rule is that the *first*
            item of those that match best is selected
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.SortText">
            <summary>
            A string that should be used when comparing this item
            with other items. When omitted the label is used
            as the sort text for this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.FilterText">
            <summary>
            A string that should be used when filtering a set of
            completion items. When omitted the label is used as the
            filter text for this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertText">
            <summary>
            A string that should be inserted into a document when selecting
            this completion. When omitted the label is used as the insert text
            for this item.
            <para>
            The <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertText"/> is subject to interpretation by the client side,
            so it is recommended to use <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.TextEdit"/> instead which avoids
            client side interpretation.
            </para>
            <para>
            For example in VS Code when code complete is requested for
            <c>con&lt;cursor position></c> and an item with <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertText"/>
            <c>console</c> is selected, it will only insert <c>sole</c>.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextFormat">
            <summary>
            The format of the insert text. If omitted, defaults to <see cref="F:Roslyn.LanguageServer.Protocol.InsertTextFormat.Plaintext"/>
            <para>
            The format applies to both <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertText"/> and the
            <see cref="P:Roslyn.LanguageServer.Protocol.TextEdit.NewText"/> property on <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.TextEdit"/>.
            </para>
            <para>
            Note that this does not apply to <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.AdditionalTextEdits" />
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextMode">
            <summary>
            How whitespace and indentation is handled during completion
            item insertion. If not provided the client's default value depends on
            the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionSetting.InsertTextMode"/> client capability.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.TextEdit">
            <summary>
            An edit which is applied to a document when selecting this completion.
            When an edit is provided the value of <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertText"/> is ignored.
            <para>
            The <see cref="P:Roslyn.LanguageServer.Protocol.TextEdit.Range"/> must be single-line and must contain the position at which completion was requested.
            </para>
            <para>
            Most editors support two different commit operations: insert completion text,
            or replace existing text with completion text. This cannot usually be predetermined
            by a server, so it can report both ranges using <see cref="T:Roslyn.LanguageServer.Protocol.InsertReplaceEdit"/>
            if the client signals support via the
            <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.InsertReplaceSupport"/> capability.
            </para>
            <para>
            The <see cref="P:Roslyn.LanguageServer.Protocol.InsertReplaceEdit.Insert"/>
            must be a prefix of the <see cref="P:Roslyn.LanguageServer.Protocol.InsertReplaceEdit.Replace"/> i.e. same start
            position and contained within it. They must be single-line and must contain the
            position at which completion was requested.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.TextEditText">
            <summary>
            The edit text used if the completion item is part of a
            <see cref="T:Roslyn.LanguageServer.Protocol.CompletionList"/> that defines a default <see cref="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.EditRange"/>.
            <para>
            Clients will only honor this property if they opt into completion list
            item defaults using the capability <see cref="P:Roslyn.LanguageServer.Protocol.CompletionListSetting.ItemDefaults"/>.
            </para>
            <para>
            If not provided, the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Label"/> is used.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.AdditionalTextEdits">
            <summary>
            An optional array of additional text edits that are applied when
            selecting this completion.
            <para>
            Edits must not overlap (including the same
            insert position) with the main edit nor with themselves.
            </para>
            <para>
            Additional text edits should be used to change text unrelated to the
            current cursor position (for example adding an import statement at the
            top of the file).
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.CommitCharacters">
            <summary>
            An optional set of characters that will commit this item if typed while this completion is active.
            The completion will be committed before inserting the typed character.
            <para>
            </para>
            If present, this will override <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters"/>.
            If absent, <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters"/> will be used instead.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Command">
            <summary>
            An optional command that is executed after inserting this completion.
            <para>
            Note that additional modifications to the current document should instead be
            described with <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.AdditionalTextEdits"/>.
            </para>
            </summary>
            <remarks>
            This feature is not supported in VS.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItem.Data">
            <summary>
            A data field that is preserved on a completion item between a completion
            request and and a completion resolve request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemKind">
            <summary>
            Enum values for completion item kinds.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionItemKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.None">
            <summary>
            Value to use when no kind was provided.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Method">
            <summary>
            Method.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Constructor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Field">
            <summary>
            Field.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Variable">
            <summary>
            Variable.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Class">
            <summary>
            Class.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Interface">
            <summary>
            Interface.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Module">
            <summary>
            Module.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Property">
            <summary>
            Property.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Unit">
            <summary>
            Unit.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Enum">
            <summary>
            Enum.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Keyword">
            <summary>
            Keyword.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Snippet">
            <summary>
            Snippet.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Reference">
            <summary>
            Reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Folder">
            <summary>
            Folder.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.EnumMember">
            <summary>
            EnumMember.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Constant">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Struct">
            <summary>
            Struct.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Event">
            <summary>
            Event.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Operator">
            <summary>
            Operator.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.TypeParameter">
            <summary>
            TypeParameter.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Macro">
            <summary>
            Macro.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Namespace">
            <summary>
            Namespace.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Template">
            <summary>
            Template.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.TypeDefinition">
            <summary>
            TypeDefinition.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Union">
            <summary>
            Union.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Delegate">
            <summary>
            Delegate.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.TagHelper">
            <summary>
            TagHelper.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.ExtensionMethod">
            <summary>
            ExtensionMethod.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Element">
            <summary>
            Element.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.LocalResource">
            <summary>
            LocalResource.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.SystemResource">
            <summary>
            SystemResource.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.CloseElement">
            <summary>
            CloseElement.
            </summary>
            <remarks>Specific to VS</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemKindSetting">
            <summary>
            Describes the <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItemKind"/> values supported by the client
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemKindSetting.ValueSet">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItemKind"/> values that the client supports.
            <para>
            The completion item kind values the client supports. When this
            property exists the client also guarantees that it will
            handle values outside its set gracefully and falls back
            to a default value when unknown.
            </para>
            <para>
            If this property is not present the client only supports the completion item
            kinds from <see cref="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Text"/> to <see cref="F:Roslyn.LanguageServer.Protocol.CompletionItemKind.Reference"/>
            as defined in the initial version of the protocol.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemLabelDetails">
            <summary>
            Additional details for a completion item label.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionItemLabelDetails">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemLabelDetails.Detail">
            <summary>
            An optional string which is rendered less prominently directly after
            <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Label"/>, without any spacing. Should be
            used for function signatures or type annotations.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemLabelDetails.Description">
            <summary>
            Gets or sets an optional string which is rendered less prominently after
            <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Detail"/>. Should be used for fully qualified
            names or file path.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemOptions">
            <summary>
            Class which represents completion item server capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemOptions.LabelDetailsSupport">
            <summary>
            Gets or sets a value indicating The server has support for completion item label details
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemSetting">
            <summary>
            Client capabilities specific to <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItem"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.SnippetSupport">
            <summary>
            The client supports treating <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertText"/> as a snippet
            when <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextFormat"/> is set to <see cref="F:Roslyn.LanguageServer.Protocol.InsertTextFormat.Snippet"/>.
            <para>
            A snippet can define tab stops and placeholders with <c>$1</c>, <c>$2</c>
            and <c>${3:foo}</c>. <c>$0</c> defines the final tab stop and defaults to
            the end of the snippet. Placeholders with equal identifiers are
            linked, such that typing in one will update others too.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.CommitCharactersSupport">
            <summary>
            The client supports the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.CommitCharacters"/> property.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.DocumentationFormat">
            <summary>
            The client supports the following content formats for the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Documentation"/>
            property. The order describes the preferred format of the client.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.DeprecatedSupport">
            <summary>
            The client supports the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Deprecated"/> property on a completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.PreselectSupport">
            <summary>
            The client supports the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Preselect"/> property.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.TagSupport">
            <summary>
            The tags that the client supports on the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Tags"/> property.
            <para>
            Clients supporting tags have to handle unknown tags gracefully. Clients
            especially need to preserve unknown tags when sending a completion
            item back to the server in a resolve call.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.InsertReplaceSupport">
            <summary>
            Whether the client supports <see cref="T:Roslyn.LanguageServer.Protocol.InsertReplaceEdit"/> values on the
            <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.TextEdit"/> property.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.ResolveSupport">
            <summary>
            Indicates which properties a client can resolve lazily on a completion item.
            <para>
            Before version 3.16 only the predefined properties <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Documentation"/>
            and <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Detail"/> could be resolved lazily.
            </para>
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.InsertTextModeSupport">
            <summary>
            Indicates whether the client supports the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextMode"/>
            property and which <see cref="T:Roslyn.LanguageServer.Protocol.InsertTextMode"/> values it supports.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.LabelDetailsSupport">
            <summary>
            Indicates whether the client supports the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.LabelDetails"/> property.
            </summary>
            <remarks>Since 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemTag">
            <summary>
            Completion item tags are extra annotations that tweak the rendering of a completion item.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionItemTag">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionItemTag.Deprecated">
            <summary>
            Render a completion as obsolete, usually using a strike-out.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionItemTagSupportSetting">
            <summary>
            Represents the tags supported by the client on the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Tags"/> property.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionItemTagSupportSetting.ValueSet">
            <summary>
            Gets or sets a value indicating the tags supported by the client.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionList">
            <summary>
            Class which represents a completion list.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionList">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionList.IsIncomplete">
            <summary>
            This list is not complete. Further typing should result in recomputing this list.
            <para>
            Recomputed lists have all their items replaced (not appended) in the incomplete completion sessions.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionList.ItemDefaults">
            <summary>
            Default values of <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItem"/> properties for items
            that do not provide a value for those properties.
            <para>
            If a completion list specifies a default value and a completion item
            also specifies a corresponding value the one from the item is used.
            </para>
            <para>
            Servers are only allowed to return default values if the client
            signals support for this via the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionListSetting.ItemDefaults"/>
            capability.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionList.Items">
            <summary>
            The completion items.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults">
            <summary>
            Represents default values of <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItem"/> properties for items
            is the completion list that do not provide a value for those properties.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.CommitCharacters">
            <summary>
            A default commit character set.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.EditRange">
            <summary>
            A default edit range.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.InsertTextFormat">
            <summary>
            A default <see cref="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.InsertTextFormat"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.InsertTextMode">
            <summary>
            A default <see cref="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.InsertTextMode"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionListItemDefaults.Data">
            <summary>
            A completion item data value.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionListSetting">
            <summary>
            Client capabilities specific to <see cref="T:Roslyn.LanguageServer.Protocol.CompletionList"/>
            </summary>
            <remarks>Since 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionListSetting.ItemDefaults">
            <summary>
            The supported property names of the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionList.ItemDefaults"/> object.
            If omitted, no properties are supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionOptions">
            <summary>
            Class which represents completion capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionOptions.TriggerCharacters">
             <summary>
             The additional characters, beyond the defaults provided by the client (typically
             [a-zA-Z]), that should automatically trigger a completion request.
             <para>
             For example <c>.</c> JavaScript represents the beginning of an object property
             or method and is thus a good candidate for triggering a completion request.
             </para>
            <para>
             Most tools trigger a completion request automatically without explicitly
             requesting it using a keyboard shortcut (e.g.Ctrl+Space). Typically they
             do so when the user starts to type an identifier.
            </para>
            <para>
             For example if the user types <c>c</c> in a JavaScript file code complete will
             automatically pop up present <c>console</c> besides others as a completion item.
             Characters that make up identifiers don't need to be listed here.
            </para>
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters">
            <summary>
            The list of all possible characters that commit a completion.
            <para>
            This field can be used if clients don't support individual commit characters per
            completion item. See client capability <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItemSetting.CommitCharactersSupport"/>.
            </para>
            <para>
            If a server provides both <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters"/> and commit characters on 
            an individual completion item the ones on the completion item win.
            </para>
            </summary>
            <remarks>Since LSP 3.2</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionOptions.ResolveProvider">
            <summary>
            The server provides support to resolve additional information for a completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionOptions.CompletionItemOptions">
            <summary>
            Gets or sets completion item setting.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionParams">
            <summary>
            Class representing the parameters for the textDocument/completion request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionParams.Context">
            <summary>
            The completion context. This is only available if the client specifies the
            client capability <see cref="P:Roslyn.LanguageServer.Protocol.CompletionSetting.ContextSupport"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionParams.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.CompletionOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionSetting">
            <summary>
            Client capabilities specific to completion.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionSetting.CompletionItem">
            <summary>
            The client supports the following <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItem"/> specific capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionSetting.CompletionItemKind">
            <summary>
            The client supports the following <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItemKind"/> values.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionSetting.ContextSupport">
            <summary>
            The client supports sending additional context information for
            a <c>textDocument/completion</c> request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionSetting.InsertTextMode">
            <summary>
            The client's default insertion behavior when a completion item doesn't
            provide a value for the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextMode"/> property.
            </summary>
            <remarks>Since 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CompletionSetting.CompletionListSetting">
            <summary>
            The client supports the following <see cref="T:Roslyn.LanguageServer.Protocol.CompletionList"/> specific capabilities.
            </summary>
            <remarks>Since 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CompletionTriggerKind">
            <summary>
            Enum which represents the various ways in which completion can be triggered.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionTriggerKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionTriggerKind.Invoked">
            <summary>
            Completion was triggered by typing an identifier, manual invocation (e.g Ctrl+Space) or via API.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionTriggerKind.TriggerCharacter">
            <summary>
            Completion was triggered by a trigger character specified in <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.TriggerCharacters"/>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.CompletionTriggerKind.TriggerForIncompleteCompletions">
            <summary>
            Completion was re-triggered as the current completion list is incomplete.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ConfigurationItem">
            <summary>
            Class which represents an configuration item.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#configurationItem">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ConfigurationItem.ScopeUri">
            <summary>
            Gets or sets the scope to get the configuration section for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ConfigurationItem.Section">
            <summary>
            Gets or sets the requested configuration section.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ConfigurationParams">
            <summary>
            Class representing the parameters for the workspace/configuration request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#configurationParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ConfigurationParams.Items">
            <summary>
            Gets or sets the ConfigurationItems being requested.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentUriConverter">
            <summary>
            TODO: document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FormattingOptionsConverter">
            <summary>Enables the FormattingOptions.OtherOptions JsonExtensionData to be strongly typed</summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InitializeParamsWorkspaceFoldersConverter">
            <summary>
            This is used to surface the distinction between "not supported" and "none open" for <see cref="P:Roslyn.LanguageServer.Protocol.InitializeParams.WorkspaceFolders"/>
            <para>
            Per <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize">the LSP Spec</see>:
            <list type="bullet">
            <item>
             If the property is NOT present, the client does not support workspace folders.
            </item>
            <item>
            If the property is present but null, or an empty array, the client supports workspace folders but none are open.
            </item>
            </list>
            </para>
            To represent this on <see cref="P:Roslyn.LanguageServer.Protocol.InitializeParams.WorkspaceFolders"/>, we use <see langword="null"/>
            to represent that the client does not support workspace folders, and use an empty array to represent that none are open.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.KindAttribute">
            <summary>
            Attribute that defines the expected value of the <see cref="P:Roslyn.LanguageServer.Protocol.KindAttribute.KindPropertyName"/> JSON property when a type is
            used in an <see cref="T:Roslyn.LanguageServer.Protocol.ISumType"/>.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.KindAttribute.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.KindAttribute"/> class.
             </summary>
             <param name="kind">The expected value of the <paramref name="kindPropertyName"/> JSON property.</param>
             <param name="kindPropertyName">The name of the property that is used to identify the contained type of the <see cref="T:Roslyn.LanguageServer.Protocol.ISumType"/>.</param>
             <remarks>Specifying this attribute doesn't automatically include the <paramref name="kindPropertyName"/> JSON property upon serialization.
            
             In the current implementation the <paramref name="kindPropertyName"/> JSON property is always considered required.</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.KindAttribute.Kind">
            <summary>
            Gets the expected value of the <see cref="P:Roslyn.LanguageServer.Protocol.KindAttribute.KindPropertyName"/> JSON property.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.KindAttribute.KindPropertyName">
            <summary>
            Gets the name of the property that is used to identify the contained type of the <see cref="T:Roslyn.LanguageServer.Protocol.ISumType"/>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ParameterInformationConverter">
            <summary>
            JsonConverter to correctly deserialize int arrays in the Label param of ParameterInformation.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.StringEnumConverter`1">
            <summary>
            JsonConverter for serializing and deserializing string-based enums.
            </summary>
            <typeparam name="TStringEnumType">The actual type implementing <see cref="T:Roslyn.LanguageServer.Protocol.IStringEnum"/>.</typeparam>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.StringEnumConverter`1.TypeConverter">
            <summary>
            Type converter from <see langword="string"/> to <typeparamref name="TStringEnumType"/>.
            This is required to support <see cref="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)"/>.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.StringEnumConverter`1.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.StringEnumConverter`1.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TextDocumentSyncConverter.Write(System.Text.Json.Utf8JsonWriter,Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CreateFile">
            <summary>
            Class representing a create file operation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#createFile">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFile.Kind">
            <summary>
            Gets the kind value.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFile.Uri">
            <summary>
            Gets or sets the resource to create.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFile.Options">
            <summary>
            Gets or sets the additional options.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFile.AnnotationId">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CreateFileOptions">
            <summary>
            Class representing the options for a create file operation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#createFileOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFileOptions.Overwrite">
            <summary>
            Gets or sets a value indicating whether the creation should overwrite the file if it already exists.
            </summary>
            <remarks>
            <see cref="P:Roslyn.LanguageServer.Protocol.CreateFileOptions.Overwrite"/> wins over <see cref="P:Roslyn.LanguageServer.Protocol.CreateFileOptions.IgnoreIfExists"/>.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFileOptions.IgnoreIfExists">
            <summary>
            Gets or sets a value indicating whether the action should be ignored if the file already exists.
            </summary>
            <remarks>
            <see cref="P:Roslyn.LanguageServer.Protocol.CreateFileOptions.Overwrite"/> wins over <see cref="P:Roslyn.LanguageServer.Protocol.CreateFileOptions.IgnoreIfExists"/>.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DefaultBehaviorPrepareRename">
            <summary>
            Class which represents a possible result value of the 'textDocument/prepareRename' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_prepareRename">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DefaultBehaviorPrepareRename.DefaultBehavior">
            <summary>
            Gets or sets a value indicating whether the rename position is valid and the client should use its
            default behavior to compute the rename range.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeleteFile">
            <summary>
            Class representing a delete file operation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#deleteFile">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFile.Kind">
            <summary>
            Gets the kind value.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFile.Uri">
            <summary>
            Gets or sets the file to delete.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFile.Options">
            <summary>
            Gets or sets the additional options.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFile.AnnotationId">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeleteFileOptions">
             <summary>
             Class representing the options for a create file operation.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#deleteFileOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFileOptions.Recursive">
            <summary>
            Gets or sets a value indicating whether the delete operation should be applied recursively if a folder is denoted. (Overwrite wins over ignoreIfNotExists).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFileOptions.IgnoreIfNotExists">
            <summary>
            Gets or sets a value indicating whether the action should be ignored if the file doesn't exists.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Diagnostic">
             <summary>
             Class which represents a source code diagnostic message.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnostic">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Range">
            <summary>
            Gets or sets the source code range.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Severity">
            <summary>
            Gets or sets the diagnostic severity.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Code">
            <summary>
            Gets or sets the diagnostic's code, which usually appear in the user interface.
            </summary>
            <remarks>
            The value can be an <see cref="T:System.Int32"/>, <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.CodeDescription">
            <summary>
            Gets or sets an optional value that describes the error code.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Source">
            <summary>
            Gets or sets a human-readable string describing the source of this
            diagnostic, e.g. 'typescript' or 'super lint'. It usually appears in the user interface.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Message">
            <summary>
            Gets or sets the diagnostic's message.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Tags">
            <summary>
            Additional metadata about the diagnostic.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.RelatedInformation">
            <summary>
            Gets or sets the diagnostic related information
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Diagnostic.Data">
            <summary>
            Data that is preserved for a <c>textDocument/codeAction</c> request
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Diagnostic.Equals(Roslyn.LanguageServer.Protocol.Diagnostic)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Diagnostic.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Diagnostic.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticOptions">
            <summary>
            Server capabilities for pull diagnostics.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticOptions.Identifier">
            <summary>
            Gets or sets the identifier in which the diagnostics are bucketed by the client.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticOptions.InterFileDependencies">
            <summary>
            Whether the language has inter-file dependencies meaning that
            editing code in one file can result in a different diagnostic
            set in another file.
            <para>
            Inter file dependencies are common for most programming
            languages and typically uncommon for linters.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticOptions.WorkspaceDiagnostics">
            <summary>
            Gets or sets a value indicating whether the server provides support for workspace diagnostics as well.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticRegistrationOptions">
            <summary>
            Diagnostic registration options.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticRegistrationOptions.Id">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticRelatedInformation">
             <summary>
             Class which represents a related message and source code location for a diagnostic.
             This should be used to point to code locations that cause or are related to
             a diagnostics, e.g when duplicating a symbol in a scope.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticRelatedInformation">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticRelatedInformation.Location">
            <summary>
            Gets or sets the location for the related information.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticRelatedInformation.Message">
            <summary>
            Gets or sets the message for the related information.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticServerCancellationData">
            <summary>
            Class representing the cancellation data returned from a diagnostic request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticServerCancellationData">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticServerCancellationData.RetriggerRequest">
            <summary>
            Gets or sets a value indicating whether the client should re-trigger the request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticSetting">
            <summary>
            Client capabilities specific to pull diagnostics.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticSetting.RelatedDocumentSupport">
            <summary>
            Gets or sets a value indicating whether the client supports related documents for document diagnostic pulls.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticSeverity">
             <summary>
             Diagnostic severity enum.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticSeverity">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DiagnosticSeverity.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DiagnosticSeverity.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DiagnosticSeverity.Information">
            <summary>
            Information.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DiagnosticSeverity.Hint">
            <summary>
            Hint.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticTag">
             <summary>
             Diagnostic tag enum.
             Additional metadata about the type of a diagnostic
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticTag">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DiagnosticTag.Unnecessary">
            <summary>
            Unused or unnecessary code.
            Clients are allowed to render diagnostics with this tag faded out.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DiagnosticTag.Deprecated">
            <summary>
            Deprecated or obsolete code.
            Clients are allowed to render diagnostics with this tag strike through.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticTagSupport">
            <summary>
            Represent the client's support for the <see cref="P:Roslyn.LanguageServer.Protocol.Diagnostic.Tags"/> property to provide metadata about a diagnostic.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#publishDiagnosticsClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticTagSupport.ValueSet">
            <summary>
            Gets or sets a value indicating the tags supported by the client.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DiagnosticWorkspaceSetting">
            <summary>
            Class representing the workspace diagnostic client capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnosticWorkspaceClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DiagnosticWorkspaceSetting.RefreshSupport">
            <summary>
            Whether the client supports a refresh request sent from the server to the client.
            <para>
            Note that this event is global and will force the client to refresh all
            pulled diagnostics currently shown. It should be used with absolute care
            and is useful for situation where a server for example detects a project
            wide change that requires such a calculation.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeConfigurationClientCapabilities">
            <summary>
            Capabilities specific to the `workspace/didChangeConfiguration` notification.
            </summary>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeConfigurationClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeConfigurationParams">
            <summary>
            Class which represents the parameter sent with workspace/didChangeConfiguration requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeConfigurationParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeConfigurationParams.Settings">
            <summary>
            Gets or sets the settings that are applicable to the language server.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeTextDocumentParams">
            <summary>
            Class which represents the parameter that is sent with textDocument/didChange message.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeTextDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeTextDocumentParams.TextDocument">
            <summary>
            The document that did change. The version number points
            to the version after all provided content changes have
            been applied.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeTextDocumentParams.ContentChanges">
            <summary>
            The actual content changes. The content changes describe single state
            changes to the document. So if there are two content changes c1 (at
            array index 0) and c2(at array index 1) for a document in state S then
            c1 moves the document from S to S' and c2 from S' to S''. So c1 is
            computed on the state S and c2 is computed on the state S'.
            <para>
            To mirror the content of a document using change events use the following
            approach:
            <list type="bullet">
            <item>Start with the same initial content</item>
            <item>Apply the 'textDocument/didChange' notifications in the order you receive them.</item>
            <item>Apply the `TextDocumentContentChangeEvent`s in a single notification in the order you receive them.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidCloseTextDocumentParams">
            <summary>
            Class which represents the parameter that is sent with textDocument/didClose message.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didCloseTextDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidCloseTextDocumentParams.TextDocument">
            <summary>
            Gets or sets the text document identifier.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidOpenTextDocumentParams">
            <summary>
            Class which represents the parameter that is sent with textDocument/didOpen message.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didOpenTextDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidOpenTextDocumentParams.TextDocument">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentItem"/> which represents the text document that was opened.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidSaveTextDocumentParams">
            <summary>
            Class which represents the parameter that is sent with a textDocument/didSave message.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didSaveTextDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidSaveTextDocumentParams.TextDocument">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> which represents the text document that was saved.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidSaveTextDocumentParams.Text">
            <summary>
            Optional the content when saved. Depends on the <see cref="P:Roslyn.LanguageServer.Protocol.SaveOptions.IncludeText"/> value
            or the <see cref="P:Roslyn.LanguageServer.Protocol.TextDocumentSaveRegistrationOptions.IncludeText"/> when the save
            notification was requested.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentColorClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/documentColor` and the `textDocument/colorPresentation` requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentColorClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentColorOptions">
            <summary>
            Server capabilities specific to DocumentColor.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentColorOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentColorOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentColorParams">
            <summary>
            Class representing the parameters sent for a textDocument/documentColor request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentColorParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentColorParams.TextDocument">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> to provide color information for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentColorParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentColorParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentColorRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentColorOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentColorRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentColorRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentColorRegistrationOptions.Id">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentDiagnosticParams">
            <summary>
            Class representing the document diagnostic request parameters
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentDiagnosticParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentDiagnosticParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            Note that the first literal send needs to be either the <see cref="T:Roslyn.LanguageServer.Protocol.RelatedUnchangedDocumentDiagnosticReport"/> or <see cref="T:Roslyn.LanguageServer.Protocol.RelatedUnchangedDocumentDiagnosticReport"/>
            followed by n <see cref="T:Roslyn.LanguageServer.Protocol.DocumentDiagnosticReportPartialResult"/> literals.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentDiagnosticParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentDiagnosticParams.TextDocument">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> to provide diagnostics for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentDiagnosticParams.Identifier">
            <summary>
            The additional identifier provided during registration
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentDiagnosticParams.PreviousResultId">
            <summary>
            Gets or sets the result id of a previous diagnostics response if provided.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentDiagnosticReportKind">
            <summary>
            Value representing the kind of the document diagnostic report.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentDiagnosticReportKind">Language Server Protocol specification</see> for additional information.
            </para>
            <remarks>Since LSP 3.17</remarks>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DocumentDiagnosticReportKind.Full">
            <summary>
            Kind representing a diagnostic report with a full set of problems.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DocumentDiagnosticReportKind.Unchanged">
            <summary>
            Kind representing a diagnostic report indicating that the last returned report is still accurate.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentDiagnosticReportPartialResult">
            <summary>
            Class representing a partial document diagnostic report for a set of related documents.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentDiagnosticReportPartialResult">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentDiagnosticReportPartialResult.RelatedDocuments">
            <summary>
            Gets or sets the map of related document diagnostic reports.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentFilter">
             <summary>
             Class representing a filter over certain types of documents
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentFilter">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFilter.Language">
            <summary>
            Gets or sets a language id for the filter (e.g. 'typescript').
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFilter.Scheme">
            <summary>
            Gets or sets a Uri scheme (e.g. 'file' or 'untitled').
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFilter.Pattern">
            <summary>
            Gets or sets a glob pattern (e.g. '*.cs').
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentFormattingClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/formatting` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentFormattingClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentFormattingOptions">
             <summary>
             Class representing the document formatting options for server capabilities.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentFormattingOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFormattingOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentFormattingParams">
            <summary>
            Parameter for the 'textDocument/formatting' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentFormattingParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFormattingParams.TextDocument">
            <summary>
            Gets or sets the identifier for the text document to be formatted.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFormattingParams.Options">
            <summary>
            Gets or sets the formatting options.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFormattingParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentFormattingRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentFormattingOptions"/> that allows scoping the registration.
            <code>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentFormattingRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </code>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentFormattingRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentHighlight">
            <summary>
            A document highlight is a range inside a text document which deserves
            special attention.Usually a document highlight is visualized by changing
            the background color of its range.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentHighlight">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentHighlight.Range">
            <summary>
            Gets or sets the range that the highlight applies to.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentHighlight.Kind">
            <summary>
            Gets or sets the kind of highlight.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentHighlightClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/documentHighlight` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentHighlightClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentHighlightKind">
             <summary>
             Enum representing the different types of document highlight.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentHighlightKind">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DocumentHighlightKind.Text">
            <summary>
            A textual occurance.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DocumentHighlightKind.Read">
            <summary>
            Read access of a symbol.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.DocumentHighlightKind.Write">
            <summary>
            Write access of a symbol.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentHighlightOptions">
             <summary>
             Server capabilities specific to Document Highlight.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentHighlightOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentHighlightOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentHighlightParams">
            <summary>
            Class representing the parameters sent for a textDocument/documentHighlight request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentHighlightParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentHighlightParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentHighlightParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentHighlightRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentHighlightOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentHighlightRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentHighlightRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentLink">
            <summary>
            A document link is a range in a text document that links to an internal or
            external resource, like another text document or a web site.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentLink">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLink.Range">
            <summary>
            The range this link applies to.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLink.Target">
            <summary>
            The uri this link points to. If missing a resolve request is sent later.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLink.Tooltip">
            <summary>
            The tooltip text when you hover over this link.
            <para>
            If a tooltip is provided, it will be displayed in a string that includes
            instructions on how to trigger the link, such as <c>{0} (ctrl + click)</c>.
            The specific instructions vary depending on OS, user settings, and localization.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLink.Data">
            <summary>
            A data entry field that is preserved on a document link between a
            DocumentLinkRequest and a DocumentLinkResolveRequest.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentLinkClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/documentLink` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentLinkClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkClientCapabilities.TooltipSupport">
            <summary>
            Whether the client supports the <see cref="P:Roslyn.LanguageServer.Protocol.DocumentLink.Tooltip"/> property.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentLinkOptions">
            <summary>
            Class representing the document link options for server capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentLinkOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkOptions.ResolveProvider">
            <summary>
            Whether or not the server has a resolve provider for document links.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentLinkParams">
            <summary>
            Class representing the parameters sent for a textDocument/documentLink request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentLinkParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkParams.TextDocument">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> to provide links for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentLinkRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentLinkOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentLinkRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentLinkRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingOptions">
            <summary>
            Class representing the options for on type formatting.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentOnTypeFormattingOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingOptions.FirstTriggerCharacter">
            <summary>
            A character on which formatting should be triggered, like <c>{</c>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingOptions.MoreTriggerCharacter">
            <summary>
            Optional additional trigger characters.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingParams">
            <summary>
            Class representing the parameters sent for a textDocument/onTypeFormatting request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentOnTypeFormattingParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingParams.TextDocument">
            <summary>
            The document to format.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingParams.Position">
            <summary>
            The position around which the on type formatting should happen.
            <para>
            This is not necessarily the exact position where the character denoted
            by the <see cref="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingParams.Character"/> property got typed.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingParams.Character">
            <summary>
            The character that has been typed that triggered the formatting
            on type request.
            <para>
            That is not necessarily the last character that
            got inserted into the document since the client could auto insert
            characters as well (e.g. like automatic brace completion).
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingParams.Options">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.FormattingOptions"/> for the request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentOnTypeFormattingRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentOnTypeFormattingRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingOptions">
            <summary>
            Class representing the document range formatting options for server capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentRangeFormattingOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingParams">
            <summary>
            Class which represents the parameter that is sent with textDocument/rangeFormatting message.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentRangeFormattingParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingParams.TextDocument">
            <summary>
            Gets or sets the identifier for the text document to be formatted.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingParams.Range">
            <summary>
            Gets or sets the selection range to be formatted.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingParams.Options">
            <summary>
            Gets or sets the formatting options.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentRangeFormattingRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentRangeFormattingRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentSymbol">
            <summary>
            Represents programming constructs like variables, classes, interfaces etc. that appear in a document. Document symbols can be
            hierarchical and they have two ranges: one that encloses its definition and one that points to its most interesting range,
            e.g. the range of an identifier.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentSymbol">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Name">
            <summary>
            The name of this symbol. Will be displayed in the user interface and
            therefore must not be an empty string or a string consisting only of whitespace.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Detail">
            <summary>
            More detail for this symbol, e.g the signature of a function.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Kind">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.SymbolKind" /> of this symbol.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Tags">
            <summary>
            Tags for this document symbol.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Deprecated">
            <summary>
            Indicates whether this symbol is deprecated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Range">
            <summary>
            Gets or sets the range enclosing this symbol not including leading/trailing whitespace
            but everything else like comments. This information is typically used to determine
            if the client's cursor is inside the symbol to reveal in the symbol in the UI.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.SelectionRange">
            <summary>
            Gets or sets the range that should be selected and revealed when this symbol is being picked, e.g the name of a function.
            Must be contained by the <see cref="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Range"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbol.Children">
            <summary>
            Gets or sets the children of this symbol, e.g. properties of a class.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentSymbolOptions">
            <summary>
            Server capabilities specific to Document Symbols.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentSymbolOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolOptions.Label">
            <summary>
            A human-readable string that is shown when multiple outlines trees
            are shown for the same document.
            </summary>
            <remarks>Sicne LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentSymbolParams">
            <summary>
            Class which represents the parameter sent with textDocument/documentSymbol requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentSymbolParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolParams.TextDocument">
            <summary>
            Gets or sets the text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentSymbolRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentSymbolOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentSymbolRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting">
            <summary>
            Client capabilities specific to the <c>textDocument/documentSymbol</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentSymbolClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting.SymbolKind">
            <summary>
            Specific capabilities for <see cref="P:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting.SymbolKind"/> in <c>textDocument/documentSymbol</c> requests
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting.HierarchicalDocumentSymbolSupport">
            <summary>
            Gets or sets a value indicating whether the document has hierarchical symbol support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting.TagSupport">
            <summary>
            The client supports tags on <see cref="T:Roslyn.LanguageServer.Protocol.SymbolInformation"/>. Tags are supported on
            <see cref="T:Roslyn.LanguageServer.Protocol.DocumentSymbol"/> if <see cref="P:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting.HierarchicalDocumentSymbolSupport"/> is
            set to <see langword="true"/>.
            <para>
            Clients supporting tags have to handle unknown tags gracefully.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DocumentSymbolSetting.LabelSupport">
            <summary>
            The client supports an additional label presented in the UI when
            registering a document symbol provider.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DynamicRegistrationSetting">
            <summary>
            Class which represents a setting that can be dynamically registered.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.DynamicRegistrationSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.DynamicRegistrationSetting"/> class.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.DynamicRegistrationSetting.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.DynamicRegistrationSetting"/> class.
            </summary>
            <param name="value">Value indicating whether the setting can be dynamically registered.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DynamicRegistrationSetting.DynamicRegistration">
            <summary>
            Gets or sets a value indicating whether setting can be dynamically registered.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ExecuteCommandClientCapabilities">
            <summary>
            Capabilities specific to the `workspace/executeCommand` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#executeCommandClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ExecuteCommandOptions">
            <summary>
            Class representing the options for execute command support.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#executeCommandOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecuteCommandOptions.Commands">
            <summary>
            Gets or sets the commands that are to be executed on the server.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecuteCommandOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ExecuteCommandParams">
            <summary>
            Class representing the parameters sent from client to server for the workspace/executeCommand request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#executeCommandParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecuteCommandParams.Command">
            <summary>
            Gets or sets the command identifier associated with the command handler.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecuteCommandParams.Arguments">
            <summary>
            Gets or sets the arguments that the command should be invoked with.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecuteCommandParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ExecuteCommandRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.ExecuteCommandOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#executeCommandRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecuteCommandRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSExtensionConverter`2">
            <summary>
            Converter used to serialize and deserialize classes extending types defined in the
            Microsoft.VisualStudio.LanguageServer.Protocol package.
            </summary>
            <typeparam name="TBase">Base class that is specified in the
            Microsoft.VisualStudio.LanguageServer.Protocol package.</typeparam>
            <typeparam name="TExtension">Extension class that extends TBase.</typeparam>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSExtensionUtilities">
            <summary>
            Utility functions to simplify working with the Visual Studio extensions to the Language Server Protocol.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSExtensionUtilities.AddVSExtensionConverters(System.Text.Json.JsonSerializerOptions)">
             <summary>
             Adds <see cref="T:Roslyn.LanguageServer.Protocol.VSExtensionConverter`2"/> to the <paramref name="options"/> allowing to
             deserialize the JSON stream into objects which include Visual Studio specific extensions.
            
             For example, it allows to correctly deserialize the <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Diagnostics"/> entries of a
             'codeAction/resolve' request into <see cref="T:Roslyn.LanguageServer.Protocol.VSDiagnostic"/> objects even if <see cref="P:Roslyn.LanguageServer.Protocol.CodeAction.Diagnostics"/>
             is defined as an array of <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/>.
             </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSDiagnostic">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSDiagnostic"/> extends <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> providing additional properties used by Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.Projects">
            <summary>
            Gets or sets the project and context (e.g. Win32, MacOS, etc.) in which the diagnostic was generated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.ExpandedMessage">
            <summary>
            Gets or sets an expanded description of the diagnostic.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.ToolTip">
            <summary>
            Gets or sets a message shown when the user hovers over an error. If <see langword="null" />, then <see cref="P:Roslyn.LanguageServer.Protocol.Diagnostic.Message"/>
            is used (use <see cref="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.SuppressEditorToolTip"/> to prevent a tool tip from being shown).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.Identifier">
            <summary>
            Gets or sets a non-human-readable identier allowing consolidation of multiple equivalent diagnostics
            (e.g. the same syntax error from builds targeting different platforms).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.DiagnosticType">
            <summary>
            Gets or sets a string describing the diagnostic types (e.g. Security, Performance, Style, etc.).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.DiagnosticRank">
            <summary>
            Gets or sets a rank associated with this diagnostic, used for the default sort.
            <see cref="F:Roslyn.LanguageServer.Protocol.VSDiagnosticRank.Default"/> will be used if no rank is specified.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.OutputId">
            <summary>
            Gets or sets an ID used to associate this diagnostic with a corresponding line in the output window.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSDiagnosticProjectInformation">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSDiagnosticProjectInformation"/> represents the project and context in which the <see cref="T:Roslyn.LanguageServer.Protocol.VSDiagnostic"/> is generated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnosticProjectInformation.ProjectName">
            <summary>
            Gets or sets a human-readable identifier for the project in which the diagnostic was generated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnosticProjectInformation.Context">
            <summary>
            Gets or sets a human-readable identifier for the build context (e.g. Win32 or MacOS)
            in which the diagnostic was generated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSDiagnosticProjectInformation.ProjectIdentifier">
            <summary>
            Gets or sets the unique identifier for the project in which the diagnostic was generated.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSDiagnosticRank">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSDiagnosticRank"/> represents the rank of a <see cref="T:Roslyn.LanguageServer.Protocol.VSDiagnostic"/> object.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticRank.Highest">
            <summary>
            Highest priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticRank.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticRank.Default">
            <summary>
            Default priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticRank.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticRank.Lowest">
            <summary>
            Lowest priority.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSDiagnosticTags">
            <summary>
            Additional <see cref="T:Roslyn.LanguageServer.Protocol.DiagnosticTag"/> values that are specific to Visual Studio.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.BuildError">
            <summary>
            A <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry generated by the build.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.IntellisenseError">
            <summary>
            A <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry generated by Intellisense.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.PotentialDuplicate">
             <summary>
             A <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry that could be generated from both builds
             and Intellisense.
            
             <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entries tagged with <see cref="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.PotentialDuplicate"/> will be hidden
             in the error list if the error list is displaying build and intellisense
             errors.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.HiddenInErrorList">
            <summary>
            A <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry is never displayed in the error list.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.VisibleInErrorList">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry is always displayed in the error list.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.HiddenInEditor">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry is never displayed in the editor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.SuppressEditorToolTip">
            <summary>
            No tooltip is shown for the <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry in the editor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.EditAndContinueError">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry is represented in the Editor as an Edit
            and Continue error.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.TaskItem">
            <summary>
            A <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic"/> entry is represented in the Editor as a Task List item in the TODO list.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSGetProjectContextsParams">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSGetProjectContextsParams" /> represents the parameter that is sent
            with the 'textDocument/_vs_getProjectContexts' request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSGetProjectContextsParams.TextDocument">
            <summary>
            Gets or sets the document for which project contexts are queried.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSImageId">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSImageId"/> represents the unique identifier for a Visual Studio image asset.
            The identified is composed by a <see cref="P:Roslyn.LanguageServer.Protocol.VSImageId.Guid" /> and an integer.
            A list of valid image ids can be retrieved from the <see href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.imaging.knownmonikers">KnownMonikers class</see>
            from the Visual Studio SDK.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSImageId.Guid">
            <summary>
            Gets or sets the <see cref="P:Roslyn.LanguageServer.Protocol.VSImageId.Guid" /> component of the unique identifier.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSImageId.Id">
            <summary>
            Gets or sets the integer component of the unique identifier.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSImageId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSImageId.Equals(Roslyn.LanguageServer.Protocol.VSImageId)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSImageId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSLocation">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSLocation"/> extends <see cref="T:Roslyn.LanguageServer.Protocol.Location"/> providing additional properties used by Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSLocation.ProjectName">
            <summary>
            Gets or sets the project name to be displayed to user.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSLocation.DisplayPath">
            <summary>
            Gets or sets the text value for the display path.
            In case the actual path on disk would be confusing for users, this should be a friendly display name.
            This doesn't have to correspond to a real file path, but must be parsable by the <see cref="M:System.IO.Path.GetFileName(System.String)" /> method.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSMethods">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSMethods"/> contains the string values for all Language Server Protocol Visual Studio specific methods.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSMethods.GetProjectContextsName">
            <summary>
            Method name for 'textDocument/_vs_getProjectContexts'.
            The 'textDocument/_vs_getProjectContexts' request is sent from the client to the server to query
            the list of project context associated with a document.
            This method has a parameter of type <see cref="T:Roslyn.LanguageServer.Protocol.VSGetProjectContextsParams" /> and a return value of type
            <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContextList" />.
            In order to enable the client to send the 'textDocument/_vs_getProjectContexts' requests, the server must
            set the <see cref="P:Roslyn.LanguageServer.Protocol.VSServerCapabilities.ProjectContextProvider"/> property.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSMethods.GetProjectContexts">
            <summary>
            Strongly typed request object for 'textDocument/_vs_getProjectContexts'.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSProjectContext">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContext"/> represents a project context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSProjectContext.Label">
            <summary>
            Gets or sets the label for the project context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSProjectContext.Id">
            <summary>
            Gets or sets the unique identifier of the project context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSProjectContext.Kind">
            <summary>
            Gets or sets the context kind of the project context which is used to determine its associated icon.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSProjectContext.IsMiscellaneous">
            <summary>
            Gets or sets this project context represents miscellaneous files.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSProjectContext.Equals(Roslyn.LanguageServer.Protocol.VSProjectContext)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSProjectContext.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSProjectContext.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSProjectContextList">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContextList" /> represents the response to the
            'textDocument/_vs_getProjectContexts' request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSProjectContextList.ProjectContexts">
            <summary>
            Gets or sets the document contexts associated with a text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSProjectContextList.DefaultIndex">
            <summary>
            Gets or sets the index of the default entry of the <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectContext" /> array.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSProjectKind">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSProjectKind" /> represents the various kinds of contexts.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSProjectKind.CPlusPlus">
            <summary>
            C++ project.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSProjectKind.CSharp">
            <summary>
            C# project.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSProjectKind.VisualBasic">
            <summary>
            Visual Basic project.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSServerCapabilities">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSServerCapabilities"/> extends <see cref="T:Roslyn.LanguageServer.Protocol.ServerCapabilities"/> allowing to provide
            additional capabilities supported by Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSServerCapabilities.ProjectContextProvider">
            <summary>
            Gets or sets a value indicating whether the server supports the
            'textDocument/_vs_getProjectContexts' request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSSymbolInformation">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSSymbolInformation"/> extends <see cref="T:Roslyn.LanguageServer.Protocol.SymbolInformation"/> providing additional properties used by Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSSymbolInformation.Icon">
            <summary>
            Gets or sets the icon associated with the symbol. If specified, this icon is used instead of <see cref="T:Roslyn.LanguageServer.Protocol.SymbolKind" />.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSSymbolInformation.Description">
            <summary>
            Gets or sets the description of the symbol.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSSymbolInformation.HintText">
            <summary>
            Gets or sets the hint text for the symbol.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier">
            <summary>
            <see cref="T:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier"/> extends <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> providing additional properties used by Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier.ProjectContext">
            <summary>
            Gets or sets the project context of the text document.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier.Equals(Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSTextDocumentIdentifier.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FailureHandlingKind">
            <summary>
            Describes the client's failure handling strategy for workspace changes.
            </summary>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#failureHandlingKind">Language Server Protocol specification</see> for additional information.
            </para>
            <remarks>Since 3.13</remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.FailureHandlingKind.#ctor(System.String)">
            <summary>
            Describes the client's failure handling strategy for workspace changes.
            </summary>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#failureHandlingKind">Language Server Protocol specification</see> for additional information.
            </para>
            <remarks>Since 3.13</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FailureHandlingKind.Abort">
            <summary>
            Applying the workspace change is simply aborted if one of the changes
            provided fails. All operations executed before the failing operation
            stay executed.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FailureHandlingKind.Transactional">
            <summary>
            All operations are executed transactionally. That means they either all
            succeed or no changes at all are applied to the workspace.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FailureHandlingKind.TextOnlyTransactional">
            <summary>
            If the workspace edit contains only textual file changes they are
            executed transactional. If resource changes (create, rename or delete
            file) are part of the change the failure handling strategy is <see cref="F:Roslyn.LanguageServer.Protocol.FailureHandlingKind.Abort"/>.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FailureHandlingKind.Undo">
            <summary>
            The client tries to undo the operations already executed, but there is no
            guarantee that will succeed.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CreateFilesParams">
            <summary>
            The parameters sent in notifications/requests for user-initiated creation of files.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#createFilesParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CreateFilesParams.Files">
            <summary>
            An array of all files/folders created in this operation.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeleteFilesParams">
            <summary>
            The parameters sent in notifications/requests for user-initiated deletes of files.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#deleteFilesParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeleteFilesParams.Files">
            <summary>
            An array of all files/folders deleted in this operation.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeWatchedFilesClientCapabilities">
            <summary>
            Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
            </summary>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeWatchedFilesClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeWatchedFilesClientCapabilities.RelativePatternSupport">
            <summary>
            Whether the client has support for relative patterns.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeWatchedFilesParams">
            <summary>
            Class which represents the parameter that is sent with workspace/didChangeWatchedFiles message.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeWatchedFilesParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeWatchedFilesParams.Changes">
            <summary>
            Gets or sets of the collection of file change events.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeWatchedFilesRegistrationOptions">
            <summary>
            Describe options to be used when registering for file system change events.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeWatchedFilesRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeWatchedFilesRegistrationOptions.Watchers">
            <summary>
            The watchers to register.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeWorkspaceFoldersParams">
            <summary>
            Class which represents the parameter sent with workspace/didChangeWorkspaceFolders requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeWorkspaceFoldersParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeWorkspaceFoldersParams.Event">
            <summary>
            The actual workspace folder change event.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileChangeType">
            <summary>
            File event type enum.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileChangeType">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FileChangeType.Created">
            <summary>
            File was created.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FileChangeType.Changed">
            <summary>
            File was changed.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FileChangeType.Deleted">
            <summary>
            File was deleted.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileCreate">
            <summary>
            Represents information on a file/folder create.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileCreate">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileCreate.Uri">
            <summary>
            A <c>file://</c> URI for the location of the file/folder being created.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileDelete">
            <summary>
            Represents information on a file/folder delete.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileDelete">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileDelete.Uri">
            <summary>
            A <c>file://</c> URI for the location of the file/folder being deleted.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileEvent">
            <summary>
            Class which represents a file change event.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileEvent.Uri">
            <summary>
            Gets or sets the URI of the file.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileEvent.FileChangeType">
            <summary>
            Gets or sets the file change type.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileOperationFilter">
            <summary>
            A filter to describe in which file operation requests or notifications
            the server is interested in.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileOperationFilter">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationFilter.Scheme">
            <summary>
            A Uri like `file` or `untitled`.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationFilter.Pattern">
            <summary>
            The actual file operation pattern.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileOperationPattern">
            <summary>
            A filter to describe in which file operation requests or notifications
            the server is interested in.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileOperationPattern">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationPattern.Glob">
            <summary>
            The glob pattern to match. Glob patterns can have the following syntax:
            <list type="bullet">
            <item><c>*</c> to match one or more characters in a path segment</item>
            <item><c>?</c> to match on one character in a path segment</item>
            <item><c>**</c> to match any number of path segments, including none</item>
            <item><c>{}</c> to group sub patterns into an OR expression.
            (e.g. <c>**​/*.{ts,js}</c>matches all TypeScript and JavaScript files)</item>
            <item><c>[]</c>to declare a range of characters to match in a path segment
            (e.g., <c>example.[0-9]</c> to match on <c>example.0</c>, <c>example.1</c>, …)</item>
            <item><c>[!...]</c> to negate a range of characters to match in a path segment
            (e.g., <c>example.[!0-9]</c> to match on <c>example.a</c>, <c>example.b</c>, but not <c>example.0</c>)</item>
            </list>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationPattern.Matches">
            <summary>
            Whether to match files or folders with this pattern.
            Matches both if undefined.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationPattern.Options">
            <summary>
            Additional options used during matching.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileOperationPatternKind">
            <summary>
            A pattern kind describing if a glob pattern matches a file a folder or both.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileOperationPatternKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.FileOperationPatternKind.#ctor(System.String)">
            <summary>
            A pattern kind describing if a glob pattern matches a file a folder or both.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileOperationPatternKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FileOperationPatternKind.File">
            <summary>
            The pattern matches a file only.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FileOperationPatternKind.Folder">
            <summary>
            The pattern matches a folder only.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileOperationPatternOptions">
            <summary>
            Matching options for the file operation pattern.
            
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileOperationPatternOptions">Language Server Protocol specification</see> for additional information.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationPatternOptions.IgnoreCase">
            <summary>
            The pattern should be matched ignoring casing.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileOperationRegistrationOptions">
            <summary>
            The options to register for file operations
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileOperationRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationRegistrationOptions.Filters">
            <summary>
            The actual filters.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities">
            <summary>
            The client's capabilities for file requests/notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities.DidCreate">
            <summary>
            The client has support for sending didCreateFiles notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities.WillCreate">
            <summary>
            The client has support for sending willCreateFiles requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities.DidRename">
            <summary>
            The client has support for sending didRenameFiles notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities.WillRename">
            <summary>
            The client has support for sending willRenameFiles requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities.DidDelete">
            <summary>
            The client has support for sending didDeleteFiles notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileOperationsWorkspaceClientCapabilities.WillDelete">
            <summary>
            The client has support for sending willDeleteFiles requests.
            /// </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileRename">
            <summary>
            Represents information on a file/folder rename.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileRename">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileRename.OldUri">
            <summary>
            A <c>file://</c> URI for the original location of the file/folder being renamed
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileRename.NewUri">
            <summary>
            A <c>file://</c> URI for the new location of the file/folder being renamed.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FileSystemWatcher">
            <summary>
            Specifies patterns and kinds of file events to watch.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fileSystemWatcher">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileSystemWatcher.GlobPattern">
            <summary>
            The glob pattern to watch. See <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#pattern">Glob Pattern</see>
            and <see cref="T:Roslyn.LanguageServer.Protocol.RelativePattern"/> for more detail.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FileSystemWatcher.Kind">
            <summary>The kind of events of interest.
            <para>
            </para>
            If omitted it defaults to
            <c>WatchKind.Create | WatchKind.Change | WatchKind.Delete</c>
            which is <c>7</c>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RelativePattern">
            <summary>
            A relative pattern is a helper to construct glob patterns that are matched
            relatively to a base URI. The common value for a <see cref="P:Roslyn.LanguageServer.Protocol.RelativePattern.BaseUri"/> is a workspace
            folder root, but it can be another absolute URI as well.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RelativePattern.BaseUri">
            <summary>
            A workspace folder or a base URI to which this pattern will be matched
            against relatively.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RelativePattern.Pattern">
            <summary>
            The actual glob pattern. See <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#pattern">Glob Pattern</see> for more detail.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameFilesParams">
            <summary>
            The parameters sent in notifications/requests for user-initiated renames of files.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameFilesParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFilesParams.Files">
            <summary>
            An array of all files/folders renamed in this operation. When a folder
            is renamed, only the folder will be included, and not its children.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WatchKind">
            <summary>
            File watch events of interest to a <see cref="T:Roslyn.LanguageServer.Protocol.FileSystemWatcher"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#watchKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.WatchKind.Create">
            <summary>
            Interested in create events.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.WatchKind.Change">
            <summary>
            Interested in change events
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.WatchKind.Delete">
            <summary>
            Interested in delete events
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities">
            <summary>
            The server capabilities specific to workspace file operations.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#serverCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities.DidCreate">
            <summary>
            The server is interested in receiving didCreateFiles notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities.WillCreate">
            <summary>
            The server is interested in receiving willCreateFiles requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities.DidRename">
            <summary>
            The server is interested in receiving didRenameFiles notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities.WillRename">
            <summary>
            The server is interested in receiving willRenameFiles requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities.DidDelete">
            <summary>
            The server is interested in receiving didDeleteFiles file notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFileOperationsServerCapabilities.WillDelete">
            <summary>
            The server is interested in receiving willDeleteFiles file requests.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceFoldersChangeEvent">
            <summary>
            The workspace folder change event provided by the <see cref="T:Roslyn.LanguageServer.Protocol.DidChangeWorkspaceFoldersParams"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceFoldersChangeEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFoldersChangeEvent.Added">
            <summary>
            The array of added workspace folders
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFoldersChangeEvent.Removed">
            <summary>
            The array of the removed workspace folders
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceFoldersServerCapabilities">
            <summary>
            The server capabilities specific to workspace folders
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceFoldersServerCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFoldersServerCapabilities.Supported">
            <summary>
            The server has support for workspace folders
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFoldersServerCapabilities.ChangeNotifications">
            <summary>
            Whether the server wants to receive workspace folder
            change notifications.
            <para>
            If a string is provided, the string is treated as an ID
            under which the notification is registered on the client
            side. The ID can be used to unregister for these events
            using the <see cref="F:Roslyn.LanguageServer.Protocol.Methods.ClientUnregisterCapabilityName"/> request.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRange">
            <summary>
            Represents a folding range in a document.
            <para>
            To be valid, start and end line must be bigger than zero and smaller than
            the number of lines in the document. Clients are free to ignore invalid ranges.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRange">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRange.StartLine">
            <summary>
            The zero-based start line of the range to fold.
            <para>
            The folded area starts after the line's last character. To be
            valid, the  end must be zero or larger and smaller than the
            number of lines in the document.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRange.StartCharacter">
            <summary>
            The zero-based character offset from where the folded range starts.
            <para>
            If not defined, defaults to the length of the start line.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRange.EndLine">
            <summary>
            The zero-based end line of the range to fold.
            <para>
            The folded area ends with the line's last character. To be valid,
            the end must be zero or larger and smaller than the number of 
            lines in the document.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRange.EndCharacter">
            <summary>
            The zero-based character offset before the folded range ends.
            <para>
            If not defined, defaults to the length of the end line.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRange.Kind">
            <summary>
            Describes the kind of the folding range such as <see cref="F:Roslyn.LanguageServer.Protocol.FoldingRangeKind.Comment"/>
            or <see cref="F:Roslyn.LanguageServer.Protocol.FoldingRangeKind.Region"/>.
            <para>
            The kind is used to categorize folding ranges and used by commands like 
            'Fold all comments'. See <see cref="T:Roslyn.LanguageServer.Protocol.FoldingRangeKind"/> for an
            enumeration of standardized kinds.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRange.CollapsedText">
            <summary>
            The text that the client should show when the specified range is
            collapsed.
            <para>
            If not defined or not supported by the client, a default will be chosen by the client
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeKind">
            <summary>
            Value representing various folding range kinds.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.FoldingRangeKind.#ctor(System.String)">
            <summary>
            Value representing various folding range kinds.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FoldingRangeKind.Comment">
            <summary>
            Comment folding range.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FoldingRangeKind.Imports">
            <summary>
            Imports folding range.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.FoldingRangeKind.Region">
            <summary>
            Region folding range.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeKindSet">
            <summary>
            A set of <see cref="T:Roslyn.LanguageServer.Protocol.FoldingRangeKind"/> values
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeKindSet.ValueSet">
            <summary>
            The folding range kind values the client supports.
            <para>
            When this property exists the client also guarantees that it will
            handle values outside its set gracefully and falls back
            to a default value when unknown.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeOptions">
             <summary>
             Class representing the folding range provider options for initialization.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeParams">
            <summary>
            Class representing the parameter for the 'textDocument/foldingRange' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeParams.TextDocument">
            <summary>
            Gets or sets the text document associated with the folding range request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.FoldingRangeOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeSetting">
            <summary>
            Client capabilities specific to the <c>textDocument/foldingRange</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeSetting.RangeLimit">
            <summary>
            The maximum number of folding ranges that the client prefers to receive
            per document. The value serves as a hint, servers are free to follow the
            limit.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeSetting.LineFoldingOnly">
            <summary>
            If set, the client signals that it only supports folding complete lines,
            and will ignore <see cref="P:Roslyn.LanguageServer.Protocol.FoldingRange.StartCharacter"/> and
            <see cref="P:Roslyn.LanguageServer.Protocol.FoldingRange.EndCharacter"/> properties.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeSetting.FoldingRangeKind">
            <summary>
            Client capabilities specific to <see cref="P:Roslyn.LanguageServer.Protocol.FoldingRangeSetting.FoldingRangeKind"/>
            </summary>
            <remarks>Since 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeSetting.FoldingRange">
            <summary>
            Gets or sets a value indicating the specific options for the folding range.
            </summary>
            <remarks>Since 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FoldingRangeSettingOptions">
            <summary>
            Client capabilities specific to <see cref="T:Roslyn.LanguageServer.Protocol.FoldingRange"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FoldingRangeSettingOptions.CollapsedText">
            <summary>
            If set, the client signals that it supports setting <see cref="P:Roslyn.LanguageServer.Protocol.FoldingRange.CollapsedText"/>
            to display custom labels instead of the default text.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FormattingOptions">
            <summary>
            Class which represents formatting options.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#formattingOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FormattingOptions.TabSize">
            <summary>
            Size of a tab in spaces.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FormattingOptions.InsertSpaces">
            <summary>
            Whether tabs should be spaces.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FormattingOptions.TrimTrailingWhitespace">
            <summary>
            Trim trailing whitespace on a line.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FormattingOptions.InsertFinalNewline">
            <summary>
            Insert a newline character at the end of the file if one does not exist.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FormattingOptions.TrimFinalNewlines">
            <summary>
            Trim all newlines after the final newline at the end of the file.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FormattingOptions.OtherOptions">
            <summary>
            Other potential formatting options.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.FullDocumentDiagnosticReport">
            <summary>
            Class representing a diagnostic report with a full set of problems.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#fullDocumentDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FullDocumentDiagnosticReport.Kind">
            <summary>
            Gets the kind of this report.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FullDocumentDiagnosticReport.ResultId">
            <summary>
            An optional result id. If provided it will
            be sent on the next diagnostic request for the
            same document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.FullDocumentDiagnosticReport.Items">
            <summary>
            Gets or sets the diagnostics in this report.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.GeneralClientCapabilities">
            <summary>
            Class which represents general client capabilities.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.GeneralClientCapabilities.StaleRequestSupport">
            <summary>
            Client capability that signals how the client
            handles stale requests (e.g. a request
            for which the client will not process the response
            anymore since the information is outdated).
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.GeneralClientCapabilities.RegularExpressions">
            <summary>
            Client capabilities specific to regular expressions.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.GeneralClientCapabilities.Markdown">
            <summary>
            Client capabilities specific to the client's markdown parser.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.GeneralClientCapabilities.PositionEncodings">
            <summary>
            The position encodings supported by the client. Client and server
            have to agree on the same position encoding to ensure that offsets
            (e.g. character position in a line) are interpreted the same on both
            side.
            <para>
            To keep the protocol backwards compatible the following applies: if
            the value 'utf-16' is missing from the array of position encodings
            servers can assume that the client supports UTF-16. UTF-16 is
            therefore a mandatory encoding.
            </para>
            <para>
            If omitted it defaults to ['utf-16'].
            </para>
            <para>
            Implementation considerations: since the conversion from one encoding
            into another requires the content of the file / line the conversion
            is best done where the file is read which is usually on the server
            side.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Hover">
            <summary>
            Class representing the data returned by a <c>textDocument/hover</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#hover">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Hover.Contents">
            <summary>
            The hover's content
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Hover.Range">
            <summary>
            An optional range inside a text document that is used to visualize the applicable
            range of the hover, e.g. by changing the background color.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.HoverOptions">
            <summary>
            Class which represents the server hover support.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#hoverOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.HoverOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.HoverParams">
            <summary>
            The params sent in a 'textDocument/hover' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#hoverParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.HoverParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.HoverRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.HoverOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#hoverRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.HoverRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.HoverSetting">
            <summary>
            Client capabilities specific to the `textDocument/hover` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#hoverClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.HoverSetting.ContentFormat">
            <summary>
            The client supports the following content formats in a <see cref="T:Roslyn.LanguageServer.Protocol.MarkupContent"/>
            instance in <see cref="P:Roslyn.LanguageServer.Protocol.Hover.Contents"/>.
            <para>
            The order describes the preferred format of the client.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IAnnotatedChange">
            <summary>
            A change operation with a change annotation identifier
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IAnnotatedChange.AnnotationId">
            <summary>
            Optional annotation identifier describing the operation
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IDynamicRegistrationSetting">
            <summary>
            A setting that can be dynamically registered via the `client/registerCapability` method.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IDynamicRegistrationSetting.DynamicRegistration">
            <summary>
            Whether the implementation supports dynamic registration.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InitializedParams">
             <summary>
             Class containing information sent with the 'initialized' notification.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialized">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InitializeError">
             <summary>
             Class representing the error type sent when the initialize request fails.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initializeError">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeError.Retry">
            <summary>
            Gets or sets a value indicating whether or not to retry.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InitializeErrorCode">
             <summary>
             Enum representing the possible reasons for an initialization error.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initializeErrorCodes">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InitializeErrorCode.UnknownProtocolVersion">
            <summary>
            Protocol version can't be handled by the server.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InitializeParams">
            <summary>
            Class which represents the parameter sent with an initialize method request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initializeParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.ProcessId">
            <summary>
            Gets or sets the ID of the process which launched the language server.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.ClientInfo">
            <summary>
            Information about the client.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.Locale">
             <summary>
             Gets or sets the locale the client is currently showing the user interface in.
             This must not necessarily be the locale of the operating system.
            
             Uses IETF language tags as the value's syntax.
             (See https://en.wikipedia.org/wiki/IETF_language_tag)
             </summary>
             <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.RootPath">
            <summary>
            Gets or sets the workspace root path.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.RootUri">
            <summary>
            Gets or sets the workspace root path. Take precedence over <see cref="P:Roslyn.LanguageServer.Protocol.InitializeParams.RootPath"/> if both are set.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.InitializationOptions">
            <summary>
            Gets or sets the initialization options as specified by the client.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.Capabilities">
            <summary>
            Gets or sets the capabilities supported by the client.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.Trace">
            <summary>
            Gets or sets the initial trace setting.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.WorkspaceFolders">
            <summary>
            Workspace folders configured in the client when the server starts.
            <para>
            An empty array indicates that the client supports workspace folders but none are open,
            and <see langword="null"/> indicates that the client does not support workspace folders.
            </para>
            <para>
            Note that this is a minor change from the raw protocol, where if the property is present in JSON but <see langword="null"/>,
            it is equivalent to an empty array value. This distinction cannot easily be represented idiomatically in .NET,
            but is not important to preserve.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InitializeResult">
             <summary>
             Class which represents the result returned by the initialize request.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initializeResult">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeResult.Capabilities">
            <summary>
            Gets or sets the server capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InitializeResult.ServerInfo">
            <summary>
            Information about the server name and version
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHint">
            <summary>
            A class representing inlay hints that appear next to parameters or types.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHint">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.Position">
            <summary>
            The position of this hint.
            <para>
            If multiple hints have the same position, they will be shown in the order
            they appear in the response.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.Label">
            <summary>
            The label of this hint. A human readable string or an array of
            <see cref="T:Roslyn.LanguageServer.Protocol.InlayHintLabelPart"/> label parts.
            <para>
            Note that neither the string nor the label part can be empty.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.Kind">
            <summary>
            The kind of this hint. Can be omitted in which case the client
            should fall back to a reasonable default.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.TextEdits">
            <summary>
            Optional text edits that are performed when accepting this inlay hint.
            <para>
            Note* that edits are expected to change the document so that the inlay
            hint(or its nearest variant) is now part of the document and the inlay
            hint itself is now obsolete.
            </para>
            <para>
            Depending on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.InlayHintSetting.ResolveSupport"/> clients
            might resolve this property late using the resolve request.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.ToolTip">
            <summary>
            The tooltip text when you hover over this item.
            <para>
            Depending on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.InlayHintSetting.ResolveSupport"/> clients
            might resolve this property late using the resolve request.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.PaddingLeft">
            <summary>
            Render padding before the hint.
            <para>
            Note: Padding should use the editor's background color, not the
            background color of the hint itself. That means padding can be used
            to visually align/separate an inlay hint.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.PaddingRight">
            <summary>
            Render padding after the hint.
            <para>
            Note: Padding should use the editor's background color, not the
            background color of the hint itself.That means padding can be used
            to visually align/separate an inlay hint.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHint.Data">
            <summary>
            Gets or sets the data that should be preserved between a
            <c>textDocument/inlayHint</c> request and a <c>inlayHint/resolve</c> request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintKind">
            <summary>
            Enum values for inlay hint kinds.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InlayHintKind.Type">
            <summary>
            An inlay hint that for a type annotation
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InlayHintKind.Parameter">
            <summary>
            An inlay hint that is for a parameter
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintLabelPart">
            <summary>
            A class representing inlay hint label parts.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintLabelPart">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintLabelPart.Value">
            <summary>
            The value of this label part.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintLabelPart.ToolTip">
            <summary>
            The tooltip text when you hover over this label part.
            <para>
            Depending on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.InlayHintSetting.ResolveSupport"/> clients
            might resolve this property late using the resolve request.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintLabelPart.Location">
            <summary>
            An optional source code location that represents this label part.
            <para>
            The editor will use this location for the hover and for code navigation
            features. This part will become a clickable link that resolves to the
            definition of the symbol at the given location (not necessarily the
            location itself), it shows the hover that shows at the given location,
            and it shows a context menu with further code navigation commands.
            </para>
            <para>
            Depending on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.InlayHintSetting.ResolveSupport"/> clients
            might resolve this property late using the resolve request.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintLabelPart.Command">
            <summary>
            An optional command for this label part.
            <para>
            Depending on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.InlayHintSetting.ResolveSupport"/> clients
            might resolve this property late using the resolve request.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintOptions">
            <summary>
            Server capabilities for inlay hints.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintOptions.ResolveProvider">
            <summary>
            The server provides support to resolve additional information for an inlay hint item.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintParams">
            <summary>
            Class representing the parameters sent from the client to the server for a textDocument/inlayHint request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintParams.TextDocument">
            <summary>
            Gets or sets the document identifier to fetch inlay hints results for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintParams.Range">
            <summary>
            Gets or sets the range to fetch inlay hints results for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintRegistrationOptions">
            <summary>
            Inlay hint registration options.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintRegistrationOptions.Id">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintResolveSupportSetting">
            <summary>
            Client capabilities specific to the `inlayHint/resolve` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintResolveSupportSetting.Properties">
            <summary>
            The names of the <see cref="T:Roslyn.LanguageServer.Protocol.InlayHint"/> properties that the client can resolve lazily.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintSetting">
            <summary>
            Inlay hint client capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintSetting.ResolveSupport">
            <summary>
            Indicates which properties a client can resolve lazily on an inlay hint.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlayHintWorkspaceSetting">
            <summary>
            Class representing the workspace inlay hint client capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHintWorkspaceClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlayHintWorkspaceSetting.RefreshSupport">
            <summary>
            Gets or sets a value indicating whether the client supports a refresh request sent from the server to the client.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueClientCapability">
            <summary>
            Capabilities specific to the `textDocument/inlineValue` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlineValueClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueContext">
            <summary>
            Additional information about the context in which inline values were requested.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlineValueContext">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueContext.FrameId">
            <summary>
            The stack frame (as a DAP Id) where the execution has stopped.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueContext.StoppedLocation">
            <summary>
            The document range where execution has stopped. Typically the end
            position of the range denotes the line where the inline values are shown
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueEvaluatableExpression">
            <summary>
            Provide an inline value through an expression evaluation.
            <para>
            If only a range is specified, the expression will be extracted from the
            underlying document.
            </para>
            <para>
            An optional expression can be used to override the extracted expression.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueEvaluatableExpression.Range">
            <summary>
            The document range for which the inline value applies.
            <para>
            The range is used to extract the evaluatable expression from the
            underlying document.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueEvaluatableExpression.Expression">
            <summary>
            If specified the expression overrides the extracted expression.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueOptions">
            <summary>
            Server capabilities specific to Inline Values.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlineValueOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueParams">
            <summary>
            Class representing the parameters sent from the client to the server for a textDocument/inlineValue request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlineValueParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueParams.TextDocument">
            <summary>
            The text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueParams.Range">
            <summary>
            The document range for which inline values should be computed.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueParams.Context">
            <summary>
            Additional information about the context in which inline values were
            requested.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.InlineValueOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlineValueRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueRegistrationOptions.Id">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueText">
            <summary>
            Provide inline value as text.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueText.Range">
            <summary>
            The document range for which the inline value applies.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueText.Text">
            <summary>
            The text of the inline value.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueVariableLookup">
            <summary>
            Provide inline value through a variable lookup.
            <para>
            If only a range is specified, the variable name will be extracted from
            the underlying document.
            </para>
            <para>
            An optional variable name can be used to override the extracted name.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueVariableLookup.Range">
            <summary>
            The document range for which the inline value applies.
            <para>
            The range is used to extract the variable name from the underlying document.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueVariableLookup.VariableName">
            <summary>
            If specified the name of the variable to look up.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueVariableLookup.CaseSensitiveLookup">
            <summary>
            How to perform the lookup.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InlineValueWorkspaceClientCapabilities">
            <summary>
            Client workspace capabilities specific to inline values.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlineValueWorkspaceClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InlineValueWorkspaceClientCapabilities.RefreshSupport">
            <summary>
            Whether the client implementation supports a refresh request sent from
            the server to the client.
            <para>
            Note that this event is global and will force the client to refresh all
            inline values currently shown. It should be used with absolute care and
            is useful for situation where a server for example detect a project wide
            change that requires such a calculation.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InsertReplaceEdit">
            <summary>
            A special text edit to provide an insert and a replace operation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#insertReplaceEdit">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InsertReplaceEdit.NewText">
            <summary>
            Gets or sets the string to be inserted.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InsertReplaceEdit.Insert">
            <summary>
            Gets or sets the range range if the insert is requested
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InsertReplaceEdit.Replace">
            <summary>
            Gets or sets the range range if the replace is requested
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InsertReplaceRange">
            <summary>
            Class which represents default range of InsertReplaceEdit for the entire completion list
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InsertReplaceRange.Insert">
            <summary>
            Gets or sets the insert range.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InsertReplaceRange.Replace">
            <summary>
            Gets or sets the replace edit range.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InsertTextFormat">
            <summary>
            Defines whether the insert text in a completion item should be
            interpreted as plain text or as a snippet.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#insertTextFormat">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InsertTextFormat.Plaintext">
            <summary>
            The primary text to be inserted is treated as a plain string.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InsertTextFormat.Snippet">
            <summary>
            The primary text to be inserted is treated as a snippet.
            <para>
            A snippet can define tab stops and placeholders with <c>$1</c>, <c>$2</c>
            and <c>${3:foo}</c>. <c>$0</c> defines the final tab stop and defaults to
            the end of the snippet. Placeholders with equal identifiers are
            linked, such that typing in one will update others too.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InsertTextMode">
            <summary>
            How whitespace and indentation is handled during completion item insertion.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#insertTextMode">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InsertTextMode.AsIs">
            <summary>
            The insertion or replace string is taken as-is.
            <para>
            If the value is multi-line the lines below the cursor will be
            inserted using the indentation defined in the string value.
            The client will not apply any kind of adjustments to the string.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.InsertTextMode.AdjustIndentation">
            <summary>
            The editor adjusts leading whitespace of new lines so that
            they match the indentation up to the cursor of the line for
            which the item is accepted.
            <para>
            Consider a line like this: &lt;2tabs>&lt;cursor>&lt;3tabs>foo. Accepting a
            multi line completion item is indented using 2 tabs and all
            following lines inserted will be indented using 2 tabs as well.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.InsertTextModeSupportSetting">
            <summary>
            The client's capabilities specific to the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextMode"/> property.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.InsertTextModeSupportSetting.ValueSet">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.InsertTextMode"/> values that the client supports
            onf the the <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.InsertTextMode"/> property.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ContainerElementConverter">
            <summary>
            System.Text.Json.JsonConverter for serializing and deserializing <see cref="T:Roslyn.Text.Adornments.ContainerElement"/>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ObjectContentConverter">
             <summary>
             Object Content converter used to serialize and deserialize Text and Adornements from VS.
            
             This converts the following types:
             <list type="bullet">
             <item><description><see cref="T:Roslyn.Core.Imaging.ImageId"/></description></item>,
             <item><description><see cref="T:Roslyn.Text.Adornments.ImageElement"/></description></item>,
             <item><description><see cref="T:Roslyn.Text.Adornments.ContainerElement"/></description></item>,
             <item><description><see cref="T:Roslyn.Text.Adornments.ClassifiedTextElement"/></description></item>,
             <item><description><see cref="T:Roslyn.Text.Adornments.ClassifiedTextRun"/></description></item>.
             </list>
             Every other type is serialized as a string using the <see cref="M:System.Object.ToString"/> method.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.ObjectContentConverter.TypeProperty">
            <summary>
            The property name used to save the .NET Type name of the serialized object.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.ObjectContentConverter.Instance">
            <summary>
            A reusable instance of the <see cref="T:Roslyn.LanguageServer.Protocol.ObjectContentConverter"/>.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.ObjectContentConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RegexConverter">
            <summary>
            Similar to https://devdiv.visualstudio.com/DevDiv/_git/VS-Platform?path=/src/Productivity/TextMate/Core/LanguageConfiguration/Impl/FastRegexConverter.cs
            to allow us to only compile the regex option once.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalExtensionUtilities">
            <summary>
            Utilities to aid work with the LSP Extensions.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalExtensionUtilities.AddVSInternalExtensionConverters(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Adds <see cref="T:Roslyn.LanguageServer.Protocol.VSExtensionConverter`2"/> necessary to deserialize
            JSON stream into objects which include VS-specific extensions.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticKind">
            <summary>
            Value representing the kind of a diagnostic.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticKind.#ctor(System.String)">
            <summary>
            Value representing the kind of a diagnostic.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticKind.Task">
            <summary>
            Task list diagnostic kind.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticKind.EditAndContinue">
            <summary>
            Edit and Continue diagnostic kind.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticKind.Syntax">
            <summary>
            Syntax diagnostic kind.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticOptions">
            <summary>
            Server provided options for pull diagnostic requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticOptions.BuildOnlyDiagnosticIds">
             <summary>
             Gets or sets a list of id's used to identify diagnostics that may be coming
             from build systems instead of a language server.
            
             VS client will then use the information to do any merging logic in the Error List.
             Maps to <see cref="P:Roslyn.LanguageServer.Protocol.VSDiagnostic.Identifier"/>.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticOptions.DiagnosticKinds">
            <summary>
            Gets or sets a list of diagnostic kinds used to query diagnostics in each context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticOptions.SupportsMultipleContextsDiagnostics">
            <summary>
            Gets or sets a value indicating whether the server provides support for sending diagnostics requests for all project contexts.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticParams">
            <summary>
            Class representing a diagnostic pull request parameter used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticParams.TextDocument">
            <summary>
            Gets or sets the document for which diagnostics are desired.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticParams.QueryingDiagnosticKind">
            <summary>
            Gets or sets a value indicating what kind of diagnostic this request is querying for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticParams.PreviousResultId">
             <summary>
             Gets or sets the server-generated version number for the diagnostics.
             </summary>
             <remarks>
             <para>
             This is treated as a black box by the client: it is stored on the client
             for each textDocument and sent back to the server when requesting
             diagnostics. The server can use this result ID to avoid resending
             diagnostics that had previously been sent.</para>
            
             <para>Note that if a client does request diagnostics that haven’t changed, the
             language server should not reply with any diagnostics for that document.
             If the client requests diagnostics for a file that has been renamed or
             deleted, then the language service should respond with null for the
             diagnostics.
             Also, if a service is reporting multiple DiagnosticReports for the same
             document, then all reports are expected to have the same
             previousResultId.</para>
             </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport">
            <summary>
            Class representing a diagnostic pull request report.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.ResultId">
            <summary>
            Gets or sets the server-generated version number for the diagnostics.
            This is treated as a black box by the client: it is stored on the client
            for each textDocument and sent back to the server when requesting
            diagnostics.The server can use this result ID to avoid resending
            diagnostics that had previously been sent.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.Diagnostics">
            <summary>
            Gets or sets a (potentially incomplete) list of Diagnostics for the document.
            Subsequent DiagnosticReports for the same document will be appended.
            </summary>
            <remarks>
            Is null if no changes in the diagnostics. Is empty if there is no diagnostic.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.Identifier">
             <summary>
             Gets or sets an identifier associated with all the diagnostics in this report.
            
             If the <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.Identifier" /> property matches the supersedes property of another report,
             <see cref="T:Roslyn.LanguageServer.Protocol.Diagnostic" /> entries tagged with <see cref="F:Roslyn.LanguageServer.Protocol.VSDiagnosticTags.PotentialDuplicate" /> will
             be hidden in the editor.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.Supersedes">
            <summary>
            Gets or sets an indicator of which diagnostic report is superseded by this report.
            </summary>
            <remarks>
            Diagnostics in a superseded report will be hidden if they have the PotentialDuplicate VSDiagnosticTag.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.OutputKey">
            <summary>
            Gets or sets an optional key used to associate diagnostics with lines
            of text in the output window(diagnostics can have an additional
            outputId and the (outputKey, outputId) uniquely identify
            a line of text in the output window).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDiagnosticReport.Version">
            <summary>
            Gets or sets the document version.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDocumentDiagnosticsParams">
            <summary>
            Class representing a diagnostic pull request for a specific document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentDiagnosticsParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentDiagnosticsParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticReport">
            <summary>
            Class representing a diagnostic pull request result for all documents.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticReport.TextDocument">
            <summary>
            Gets or sets the document for which diagnostics is returned.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticsParams">
            <summary>
            Class representing a diagnostic pull request for all documents.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticsParams.PreviousResults">
            <summary>
            Gets or sets the current state of the documents the client already has received.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticsParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticsParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceDiagnosticsParams.QueryingDiagnosticKind">
            <summary>
            Gets or sets a value indicating what kind of diagnostic this request is querying for.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.OptimizedVSCompletionList">
            <summary>
            A subclass of the VS LSP protocol extension <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionList"/> that has a fast serialization path.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.OptimizedVSCompletionList.#ctor(Roslyn.LanguageServer.Protocol.VSInternalCompletionList)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.OptimizedVSCompletionList"/> class.
            </summary>
            <param name="completionList">The completion list to wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.OptimizedVSCompletionList.#ctor(Roslyn.LanguageServer.Protocol.CompletionList)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.OptimizedVSCompletionList"/> class.
            </summary>
            <param name="completionList">The completion list to wrap.</param>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSFoldingRangeKind">
             <summary>
             Additional to predefined <see cref="T:Roslyn.LanguageServer.Protocol.FoldingRangeKind"/> folding range kinds.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeKind">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSFoldingRangeKind.Implementation">
            <summary>
            Implementation folding range.
            </summary>
            <remarks>
            Implementation ranges are the blocks of code following a method/function definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation ranges and leaves only method definitions exposed.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSFoldingRangeSetting">
            <summary>
            Class used to extend <see cref="T:Roslyn.LanguageServer.Protocol.FoldingRangeSetting" /> to add internal capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSFoldingRangeSetting.RefreshSupport">
            <summary>
            Gets or sets a value indicating whether if client only supports entire line folding only.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalClientCapabilities">
            <summary>
            Extension class for ClientCapabilities with fields specific to Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClientCapabilities.SupportsVisualStudioExtensions">
            <summary>
            Gets or sets a value indicating whether client supports Visual Studio extensions.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClientCapabilities.SupportedSnippetVersion">
            <summary>
            Gets or sets a value indicating what level of snippet support is available from Visual Studio Client.
            v1.0 refers to only default tab stop support i.e. support for $0 which manipualtes the cursor position.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClientCapabilities.SupportsNotIncludingTextInTextDocumentDidOpen">
            <summary>
            Gets or sets a value indicating whether client supports omitting document text in textDocument/didOpen notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClientCapabilities.SupportsIconExtensions">
            <summary>
            Gets or sets a value indicating whether the client supports string based response kinds
            instead of enum based response kinds.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClientCapabilities.SupportsDiagnosticRequests">
            <summary>
            Gets or sets a value indicating whether the client provides support for diagnostic pull requests.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalClipboardContent">
            <summary>
            Class which represents content to be sent to the clipboard.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClipboardContent.MimeType">
            <summary>
            Gets or sets a string that describes clipboard format types, for example, "text/plain".
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalClipboardContent.Content">
            <summary>
            Gets or sets the content of the clipboard.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCodeAction">
            <summary>
            Class used to extend <see cref="T:Roslyn.LanguageServer.Protocol.CodeAction" /> to add the data field for codeAction/_ms_resolve support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeAction.Group">
            <summary>
            Gets or sets the group this CodeAction belongs to.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeAction.Priority">
            <summary>
            Gets or sets the priority level of the code action.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeAction.ApplicableRange">
            <summary>
            Gets or sets the range of the span this action is applicable to.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeAction.Children">
            <summary>
            Gets or sets the children of this action.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeAction.TelemetryId">
            <summary>
            Gets or sets the telemetry id of this action.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCodeActionContext">
            <summary>
            Class representing the parameters sent from the client to the server for the textDocument/codeAction request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeActionContext.SelectionRange">
            <summary>
            Gets or sets the range of the current selection in the document for which the command was invoked.
            If there is no selection this would be a Zero-length range for the caret position.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup">
            <summary>
            Enum which represents the various kinds of code actions.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.QuickFix">
            <summary>
            Code action is a quick fix.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.Refactor">
            <summary>
            Code action is a refactor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.RefactorExtract">
            <summary>
            Code action is a refactor for extracting methods, functions, variables, etc.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.RefactorInline">
            <summary>
            Code action is a refactor for inlining methods, constants, etc.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.RefactorRewrite">
            <summary>
            Code action is a refactor for rewrite actions, such as making methods static.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.Source">
            <summary>
            Code action applies to the entire file.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroup.SourceOrganizeImports">
            <summary>
            Code actions is for organizing imports.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroupSetting">
            <summary>
            Class containing the set of code action default groups that are supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeActionGroupSetting.ValueSet">
            <summary>
            Gets or sets the code actions default group names the client supports.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCodeActionLiteralSetting">
            <summary>
            Class representing support for code action literals.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCodeActionLiteralSetting.CodeActionGroup">
            <summary>
            Gets or sets a value indicating what code action default groups are supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCommitCharacter">
            <summary>
            Extension class for CompletionItem with fields specific to Visual Studio functionalities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCommitCharacter.Character">
            <summary>
            Gets or sets the commit character.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCommitCharacter.Insert">
            <summary>
            Gets or sets a value indicating whether the commit character should be inserted or not.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionContext">
            <summary>
            Extension class for <see cref="T:Roslyn.LanguageServer.Protocol.CompletionContext"/> with properties specific to Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionContext.InvokeKind">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.CompletionTriggerKind"/> indicating how the completion was triggered.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionInvokeKind">
            <summary>
            Provides value for <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionContext.InvokeKind"/> which specifies
            how completion was invoked.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCompletionInvokeKind.Explicit">
            <summary>
            Completion was triggered by explicit user's gesture (e.g. Ctrl+Space, Ctr+J) or via API.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCompletionInvokeKind.Typing">
            <summary>
            Completion was triggered by typing an identifier.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalCompletionInvokeKind.Deletion">
            <summary>
            Completion was triggered by deletion (e.g. Backspace or Delete keys).
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionItem">
            <summary>
            Extension class for CompletionItem with fields specific to Visual Studio functionalities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionItem.Icon">
            <summary>
            Gets or sets the icon to show for the completion item. In VS, this is more extensive than the completion kind.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionItem.Description">
            <summary>
            Gets or sets the description for a completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionItem.VsCommitCharacters">
            <summary>
            Gets or sets the set of characters that will commit completion when this <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItem" /> is selected.
            Allows customization of commit behavior.
            If present, client will use this value instead of <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters"/>.
            If absent, client will default to <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionItem.VsResolveTextEditOnCommit">
            <summary>
            Gets or sets a value indicating whether the client should call <see cref="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCompletionResolve"/> to
            get the value of the text edit to commit.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionList">
            <summary>
            A subclass of the LSP protocol <see cref="T:Roslyn.LanguageServer.Protocol.CompletionList"/> that contains extensions specific to Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionList.SuggestionMode">
            <summary>
            Gets or sets a value indicating whether the completion list should use suggestion mode. In suggestion mode items are "soft-selected" by default.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionList.ContinueCharacters">
            <summary>
            Gets or sets the continue characters for the completion list.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionList.Data">
            <summary>
            Gets or sets the default <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.Data"/> used for completion items.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionList.CommitCharacters">
            <summary>
            Gets or sets the default <see cref="P:Roslyn.LanguageServer.Protocol.CompletionItem.CommitCharacters"/> or <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionItem.VsCommitCharacters"/> used for completion items.
            </summary>
            <remarks>
            If set, overrides <see cref="P:Roslyn.LanguageServer.Protocol.CompletionOptions.AllCommitCharacters" />.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionListSetting">
            <summary>
            Class which represents initialization setting for completion list.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionListSetting.Data">
            <summary>
            Gets or sets a value indicating whether completion lists can have Data bags. These data bags get propagated
            onto underlying completion items unless they have their own data bags.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionListSetting.CommitCharacters">
            <summary>
            Gets or sets a value indicating whether completion lists can have VSCommitCharacters. These commit characters get propagated
            onto underlying valid completion items unless they have their own commit characters.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalCompletionSetting">
            <summary>
            Class which represents initialization setting for VS completion.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalCompletionSetting.CompletionList">
            <summary>
            Gets or sets completion list setting.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterClass">
            <summary>
            Class representing a unicode character class for completion continuation.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterClass.Type">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterClass.UnicodeClass">
            <summary>
            Gets or sets the unicode class.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterRange">
            <summary>
            Class representing range of characters for completion continuation.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterRange.Type">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterRange.Start">
            <summary>
            Gets or sets the first completion character of the range.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterRange.End">
            <summary>
            Gets or sets the last completion character of the range.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterSingle">
            <summary>
            Class representing single continue character for completion.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterSingle.Type">
            <summary>
            Gets the type value.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalContinueCharacterSingle.Character">
            <summary>
            Gets or sets the completion character.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDataTipTags">
            <summary>
            DataTip tag enum.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalDataTipTags.LinqExpression">
            <summary>
            Data tip range is a linq expression.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDataTip">
            <summary>
            Class which represents debugger data tip response.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDataTip.HoverRange">
            <summary>
            Gets or sets the value which indicates the applicable hover range within the document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDataTip.ExpressionRange">
            <summary>
            Gets or sets the value which indicates the expression's range within the document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDataTip.DataTipTags">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalDataTipTags"/> for the data tip.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertOptions">
            <summary>
            Class representing the options for on auto insert.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertOptions.TriggerCharacters">
            <summary>
            Gets or sets trigger characters for on auto insert.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertParams">
            <summary>
            Class representing the parameters sent for a textDocument/_ms_onAutoInsert request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertParams.TextDocument">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> representing the document to format.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertParams.Position">
            <summary>
            Gets or sets the <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertParams.Position"/> at which the request was sent.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertParams.Character">
            <summary>
            Gets or sets the character that was typed.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertParams.Options">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.FormattingOptions"/> for the request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertRegistrationOptions">
            <summary>
            Class representing the registration options for on auto insert support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertRegistrationOptions.DocumentSelector">
            <summary>
            Gets or sets the document filters for this registration option.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertRegistrationOptions.Id">
            <summary>
            Gets or sets the id used to register the request.  The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertResponseItem">
            <summary>
            Class representing the response of an AutoInsert response.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertResponseItem.TextEditFormat">
            <summary>
            Gets or sets the insert text format of the primary text edit. <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertResponseItem.TextEditFormat"/> for supported formats.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertResponseItem.TextEdit">
            <summary>
            Gets or sets the text edit.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentOnAutoInsertResponseItem.Command">
            <summary>
            Gets or sets any optional command that will be executed after insertion.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalDocumentSpellCheckableParams">
            <summary>
            Parameter for textDocument/_vs_spellCheckableRanges.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalDocumentSpellCheckableParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalExecuteCommandClientCapabilities">
            <summary>
            Class representing settings for well-known Visual Studio's code action command.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalExecuteCommandClientCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalExecuteCommandClientCapabilities"/> class.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalExecuteCommandClientCapabilities.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalExecuteCommandClientCapabilities"/> class.
            </summary>
            <param name="value">Value indicating whether the setting can be dynamically registered.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalExecuteCommandClientCapabilities.SupportedCommands">
            <summary>
            Gets or sets a set of well-known commands name the given VS-LSP client supports.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalHover">
            <summary>
            Extension to Hover which adds additional data for colorization.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalHover.RawContent">
            <summary>
            Gets or sets the value which represents the hover content as a tree
            of objects from the Microsoft.VisualStudio.Text.Adornments namespace,
            such as ContainerElements, ClassifiedTextElements and ClassifiedTextRuns.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalHover.Contents">
            <summary>
            The hover's content
            </summary>
            <remarks>
            This may only be null when <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalHover.RawContent"/> is specified instead of <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalHover.Contents"/>.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalIconMapping">
            <summary>
            Response class when asking server to resolve the rendering information of a string kind.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalIconMapping.Images">
            <summary>
            Gets or sets the ImageElements for a certain kind.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalIconMapping.Tags">
            <summary>
            Gets or sets the tags for a certain kind. To be used in the absence of ImageIds.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalIconMapping.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalIconMapping.Equals(Roslyn.LanguageServer.Protocol.VSInternalIconMapping)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalIconMapping.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionContext">
            <summary>
            Context for inline completion request.
            See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L27.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionContext.TriggerKind">
            <summary>
            Gets or sets how completion was triggered.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionContext.SelectedCompletionInfo">
             <summary>
             Gets or sets information about the currently selected item in the autocomplete widget, if visible.
            
             See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L45.
             </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionItem">
             <summary>
             A single inline completion item response.
            
             See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L78.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionItem.Text">
            <summary>
            Gets or sets the text to replace the range with.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionItem.Range">
             <summary>
             Gets or sets the range to replace.
            
             See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L94.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionItem.Command">
            <summary>
            Gets or sets the command that is executed after inserting this completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionItem.TextFormat">
            <summary>
            Gets or sets the format of the insert text.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionList">
             <summary>
             Response for an inline completions request.
            
             See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L72.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionList.Items">
            <summary>
            Gets or sets the inline completion items.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionOptions">
            <summary>
            The options for inline completion.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionOptions.Pattern">
            <summary>
            Gets or sets a regex used by the client to determine when to ask the server for snippets.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionRequest">
             <summary>
             The request data for an inline completions request.
            
             See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L24.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionRequest.TextDocument">
            <summary>
            Gets or sets the text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionRequest.Position">
            <summary>
            Gets or sets the position where inline completions are being requested.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionRequest.Context">
            <summary>
            Gets or sets the context for the inline completions request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionRequest.Options">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.FormattingOptions"/> for the request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionTriggerKind">
            <summary>
            How the inline completion request was triggered.
            See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L58.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionTriggerKind.Automatic">
            <summary>
            Inline completions were triggered automatically while editing.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionTriggerKind.Explicit">
            <summary>
            Completion was triggered explicitly by a user gesture.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin">
            <summary>
            Enum which represents the origin of an item.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.Exact">
            <summary>
            The entry is contained in exact code.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.ExactMetadata">
            <summary>
            The entry is contained in metadata generated from exact information.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.Indexed">
            <summary>
            The entry is contained in indexed code.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.IndexedInRepo">
            <summary>
            The entry is contained in indexed code in the repo where the request originated.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.IndexedInOrganization">
            <summary>
            The entry is contained in indexed code in the same organization but different repo where the request originated.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.IndexedInThirdParty">
            <summary>
            The entry is contained in indexed code in a different organization and repo where request originated.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalItemOrigin.Other">
            <summary>
            The entry is of lesser quality than all other choices.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier">
            <summary>
            Class that contains the base kind and modifiers used to describe a response item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier.Kind">
            <summary>
            Gets or sets the ImageIds for a certain kind.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier.Modifier">
            <summary>
            Gets or sets the modifier of the kind.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier.Equals(Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalKindAndModifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers">
            <summary>
            Known VS response kind modifiers.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Public">
            <summary>
            Response kind modifier string for 'public'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Private">
            <summary>
            Response kind modifier string for 'private'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Protected">
            <summary>
            Response kind modifier string for 'protected'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Internal">
            <summary>
            Response kind modifier string for 'internal'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Sealed">
            <summary>
            Response kind modifier string for 'sealed'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Shortcut">
            <summary>
            Response kind modifier string for 'shortcut'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Snippet">
            <summary>
            Response kind modifier string for 'snippet'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Friend">
            <summary>
            Response kind modifier string for 'friend'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.Declaration">
            <summary>
            Response kind modifier string for 'declaration'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKindModifiers.AllModifiers">
            <summary>
            Collection of known response kind modifier strings.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds">
            <summary>
            Known VS response kinds.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Text">
            <summary>
            Response kind string for 'text'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Method">
            <summary>
            Response kind string for 'method'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Function">
            <summary>
            Response kind string for 'function'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Constructor">
            <summary>
            Response kind string for 'constructor'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Field">
            <summary>
            Response kind string for 'field'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Variable">
            <summary>
            Response kind string for 'variable'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Class">
            <summary>
            Response kind string for 'class'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Interface">
            <summary>
            Response kind string for 'interface'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Module">
            <summary>
            Response kind string for 'module'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Property">
            <summary>
            Response kind string for 'property'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Unit">
            <summary>
            Response kind string for 'unit'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Value">
            <summary>
            Response kind string for 'value'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Enum">
            <summary>
            Response kind string for 'enum'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Keyword">
            <summary>
            Response kind string for 'keyword'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Snippet">
            <summary>
            Response kind string for 'snippet'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Color">
            <summary>
            Response kind string for 'color'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.File">
            <summary>
            Response kind string for 'file'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Reference">
            <summary>
            Response kind string for 'reference'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Folder">
            <summary>
            Response kind string for 'folder'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.EnumMember">
            <summary>
            Response kind string for 'enumMember'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Constant">
            <summary>
            Response kind string for 'constant'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Struct">
            <summary>
            Response kind string for 'struct'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Event">
            <summary>
            Response kind string for 'event'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Operator">
            <summary>
            Response kind string for 'operator'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.TypeParameter">
            <summary>
            Response kind string for 'typeParameter'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Namespace">
            <summary>
            Response kind string for 'namespace'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Package">
            <summary>
            Response kind string for 'package'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.StringKind">
            <summary>
            Response kind string for 'string'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Number">
            <summary>
            Response kind string for 'number'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Boolean">
            <summary>
            Response kind string for 'boolean'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Array">
            <summary>
            Response kind string for 'array'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.ObjectKind">
            <summary>
            Response kind string for 'object'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Key">
            <summary>
            Response kind string for 'key'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Null">
            <summary>
            Response kind string for 'null'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Macro">
            <summary>
            Response kind string for 'macro'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Template">
            <summary>
            Response kind string for 'template'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Typedef">
            <summary>
            Response kind string for 'typedef'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Union">
            <summary>
            Response kind string for 'union'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Delegate">
            <summary>
            Response kind string for 'delegate'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Tag">
            <summary>
            Response kind string for 'tag'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.Attribute">
            <summary>
            Response kind string for 'attribute'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalKnownKinds.AllKinds">
            <summary>
            Collection of response kind strings.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalLocation">
            <summary>
            Extension class for <see cref="T:Roslyn.LanguageServer.Protocol.Location"/>.  Used to relay reference text information with colorization.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalLocation.Text">
            <summary>
            Gets or sets the text value for a location reference. Must be of type <see cref="T:Roslyn.Text.Adornments.ImageElement"/> or <see cref="T:Roslyn.Text.Adornments.ContainerElement"/> or <see cref="T:Roslyn.Text.Adornments.ClassifiedTextElement"/> or <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalMapCodeMapping.TextDocument">
            <summary>
            Gets or sets identifier for the document the contents are supposed to be mapped into.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalMapCodeMapping.Contents">
            <summary>
            Gets or sets strings of code/text to map into TextDocument.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalMapCodeMapping.FocusLocations">
            <summary>
            Prioritized Locations to be used when applying heuristics. For example, cursor location,
            related classes (in other documents), viewport, etc. Earlier items should be considered
            higher priority.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalMapCodeParams">
            <summary>
            LSP Params for textDocument/mapCode calls.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalMapCodeParams.MapCodeCorrelationId">
            <summary>
            Internal correlation GUID, used to correlate map code messages from Copilot
            with LSP Client actions. Used for telemetry.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalMapCodeParams.Mappings">
            <summary>
            Set of code blocks, associated with documents and regions, to map.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalMapCodeParams.Updates">
            <summary>
            Changes that should be applied to the workspace by the mapper before performing
            the mapping operation.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalMethods">
            <summary>
            Class which contains the string values for all Language Server Protocol Visual Studio specific methods.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.OnAutoInsert">
            <summary>
            Strongly typed message object for 'textDocument/_vs_onAutoInsert'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentIconMappingResolve">
            <summary>
            Strongly typed message object for 'textDocument/_vs_iconMappingResolve'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.DocumentPullDiagnostic">
            <summary>
            Strongly typed message object for 'textDocument/_vs_diagnostic'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.WorkspacePullDiagnostic">
            <summary>
            Strongly typed message object for 'workspace/_vs_diagnostic'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentValidateBreakableRange">
            <summary>
            Strongly typed message object for 'textDocument/_vs_validateBreakableRange'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentInlineCompletion">
            <summary>
            Strongly typed message object for 'textDocument/inlineCompletion'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentUriPresentation">
            <summary>
            Strongly typed message object for 'textDocument/_vs_uriPresentation'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentTextPresentation">
            <summary>
            Strongly typed message object for 'textDocument/_vs_textPresentation'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentSpellCheckableRanges">
            <summary>
            Strongly typed message object for 'textDocument/_vs_spellCheckableRanges'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.WorkspaceSpellCheckableRanges">
            <summary>
            Strongly typed message object for 'workspace/_vs_spellCheckableRanges'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.WorkspaceMapCode">
            <summary>
            Strongly typed message object for 'workspace/_vs_mapCode'
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalPriorityLevel">
            <summary>
            Enum which represents the various reference kinds.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalPriorityLevel.Lowest">
            <summary>
            Lowest priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalPriorityLevel.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalPriorityLevel.Normal">
            <summary>
            Medium priority.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalPriorityLevel.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalProjectContext">
            <summary>
            Class for a project context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalProjectContext.VSKind">
            <summary>
            Gets or sets the string context kind of the project context.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalProjectContext.Equals(Roslyn.LanguageServer.Protocol.VSInternalProjectContext)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalProjectContext.Equals(Roslyn.LanguageServer.Protocol.VSProjectContext)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalProjectContext.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VSInternalProjectContext.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem">
            <summary>
            Class which represents references information.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.Id">
            <summary>
            Gets or sets the reference id.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.Location">
            <summary>
            Gets or sets the reference location.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.DefinitionId">
            <summary>
            Gets or sets the definition Id.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.DefinitionText">
            <summary>
            Gets or sets the definition text displayed as a header when references are grouped by Definition.
            Must be of type <see cref="T:System.String"/>, <see cref="T:Roslyn.Text.Adornments.ClassifiedTextElement"/>, <see cref="T:Roslyn.Text.Adornments.ContainerElement"/> and <see cref="T:Roslyn.Text.Adornments.ImageElement"/>.
            </summary>
            <remarks>
            This element should colorize syntax, but should not contain highlighting, e.g. <see cref="T:Roslyn.Text.Adornments.ClassifiedTextRun"/>
            embedded within <see cref="T:Roslyn.Text.Adornments.ClassifiedTextElement"/> should not define <see cref="P:Roslyn.Text.Adornments.ClassifiedTextRun.MarkerTagType"/>.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.ResolutionStatus">
            <summary>
            Gets or sets the resolution status.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.Kind">
            <summary>
            Gets or sets the reference kind.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.DocumentName">
            <summary>
            Gets or sets the document name to be displayed to user when needed.This can be used in cases where URI doesn't have a user friendly file name or it is a remote URI.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.ProjectName">
            <summary>
            Gets or sets the project name.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.ContainingType">
            <summary>
            Gets or sets the containing type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.ContainingMember">
            <summary>
            Gets or sets the containing member.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.Text">
            <summary>
            Gets or sets the text value for a location reference.
            Must be of type <see cref="T:Roslyn.Text.Adornments.ImageElement"/> or <see cref="T:Roslyn.Text.Adornments.ContainerElement"/> or <see cref="T:Roslyn.Text.Adornments.ClassifiedTextElement"/> or <see cref="T:System.String"/>.
            </summary>
            <remarks>
            <para>
            This element should colorize syntax and highlight the range containing the reference.
            Highlighting can be achieved by setting <see cref="P:Roslyn.Text.Adornments.ClassifiedTextRun.MarkerTagType"/>
            on <see cref="T:Roslyn.Text.Adornments.ClassifiedTextRun"/> embedded within <see cref="T:Roslyn.Text.Adornments.ClassifiedTextElement"/>.
            </para>
            <para>
            Encouraged values for <see cref="P:Roslyn.Text.Adornments.ClassifiedTextRun.MarkerTagType"/> are:
            <c>"MarkerFormatDefinition/HighlightedReference"</c> for read references,
            <c>"MarkerFormatDefinition/HighlightedWrittenReference"</c> for write references,
            <c>"MarkerFormatDefinition/HighlightedDefinition"</c> for definitions.
            </para>
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.DisplayPath">
            <summary>
            Gets or sets the text value for display path.This would be a friendly display name for scenarios where the actual path on disk may be confusing for users.
            This doesn't have to correspond to a real file path, but does need to be parsable by the various Path.GetFileName() methods.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.Origin">
            <summary>
            Gets or sets the origin of the item.The origin is used to filter remote results.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceItem.DefinitionIcon">
            <summary>
            Gets or sets the icon to show for the definition header.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind">
            <summary>
            Enum which represents the various reference kinds.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Inactive">
            <summary>
            Reference in inactive code block.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Comment">
            <summary>
            Reference in comment.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.String">
            <summary>
            Reference in a string.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Read">
            <summary>
            Read operation on the reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Write">
            <summary>
            Write operation on the reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Reference">
            <summary>
            Reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Qualified">
            <summary>
            Qualified.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.TypeArgument">
            <summary>
            Type Argument.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.TypeConstraint">
            <summary>
            Type Constraint.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.BaseType">
            <summary>
            Base Type.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Constructor">
            <summary>
            Construct.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Destructor">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Import">
            <summary>
            Import.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Declaration">
            <summary>
            Declaration.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.AddressOf">
            <summary>
            Address of.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.NotReference">
            <summary>
            Not a reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalReferenceKind.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalReferenceParams">
            <summary>
            Class which represents extensions of <see cref="T:Roslyn.LanguageServer.Protocol.ReferenceParams"/> passed as parameter of find reference requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceParams.Scope">
            <summary>
            Gets or sets a value indicating the scope of returned items.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalReferenceParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalRelatedDocumentParams">
            <summary>
            Parameter for copilot/_related_documents.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRelatedDocumentParams.TextDocument">
            <summary>
            Gets or sets the document for which the feature is being requested for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRelatedDocumentParams.Position">
            <summary>
            Gets or sets the value which indicates the position within the document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRelatedDocumentParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSelection">
            <summary>
            Class representing the user configuration (as defined in <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSupport"/>) for a rename request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSelection.Name">
            <summary>
            Gets or sets the name that identifies the option.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSelection.Value">
            <summary>
            Gets or sets a value indicating whether the user selected the option.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSupport">
            <summary>
            Class representing a renaming option for customizing the edit in the 'textDocument/rename' request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSupport.Name">
            <summary>
            Gets or sets the name that identifies the option.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSupport.Label">
            <summary>
            Gets or sets the user-facing option label.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameOptionSupport.Default">
            <summary>
            Gets or sets a value indicating whether the option has a default value of <c>true</c>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalRenameParams">
            <summary>
            Class representing the parameters (together with extra VS-specific options) sent for the
            'textDocument/rename' request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameParams.OptionSelections">
            <summary>
            Gets or sets the rename option values as selected by the user.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalRenameRange">
            <summary>
            Class which represents a possible result value of the 'textDocument/prepareRename' request,
            together with extra VS-specific options.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalRenameRange.SupportedOptions">
            <summary>
            Gets or sets the supported options for the rename request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalResolutionStatusKind">
            <summary>
            Enum which represents the various resolutions for a reference entry.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalResolutionStatusKind.ConfirmedAsReference">
            <summary>
            Entry has been processed and confirmed as a reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalResolutionStatusKind.ConfirmedAsNotReference">
            <summary>
            Entry has been processed and confimed as not a reference.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalResolutionStatusKind.NotConfirmed">
            <summary>
            Entry has been processed but could not be confirmed.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalResolutionStatusKind.NotProcessed">
            <summary>
            Entry has not been processed.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalSelectedCompletionInfo">
             <summary>
             Information about the selected completion item for <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalInlineCompletionContext"/>.
            
             See https://github.com/microsoft/vscode/blob/075ba020e8493f40dba89891b1a08453f2c067e9/src/vscode-dts/vscode.proposed.inlineCompletions.d.ts#L48.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSelectedCompletionInfo.Range">
            <summary>
            Gets or sets the range of the selected completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSelectedCompletionInfo.Text">
            <summary>
            Gets or sets the text of the selected completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSelectedCompletionInfo.CompletionKind">
            <summary>
            Gets or sets the completion item kind of the selected completion item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSelectedCompletionInfo.IsSnippetText">
            <summary>
            Gets or sets a value indicating whether the completion item is a snippet.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities">
            <summary>
            Extension class for ServerCapabilities with fields specific to Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.DisableGoToWorkspaceSymbols">
            <summary>
            Gets or sets a value indicating whether or not GoTo's integration with
            'workspace/symbol' and the deprecated 16.3 'workspace/beginSymbol' messages
            should be disabled.
            </summary>
            <remarks>
            This is provided to facilitate transition from in-proc to OOP for teams that
            currently own both a Language Server for Ctrl+Q and a GoTo provider.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.MSReferencesProvider">
            <summary>
            Gets or sets a value indicating whether document/_ms_references is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.OnAutoInsertProvider">
            <summary>
            Gets or sets a value indicating whether the server supports OnAutoInsert.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.DoNotIncludeTextInTextDocumentDidOpen">
            <summary>
            Gets or sets a value indicating whether the server requires document text to be included in textDocument/didOpen notifications.
            </summary>
            <remarks>This capability is not intended to be included into the official LSP, hence _ms_ prefix.</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.KindDescriptionResolveProvider">
            <summary>
            Gets or sets a value indicating whether the server provides support to resolve string based response kinds.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.SupportsDiagnosticRequests">
            <summary>
            Gets or sets a value indicating whether the server provides support for diagnostic pull requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.DiagnosticProvider">
            <summary>
            Gets or sets server specified options for diagnostic pull requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.InlineCompletionOptions">
            <summary>
            Gets or sets a value indicating whether the server provides support for inline completion requests.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.SpellCheckingProvider">
            <summary>
            Gets or sets a value indicating whether the server provides support for spell checking.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.BreakableRangeProvider">
            <summary>
            Gets or sets a value indicating whether the server supports validating breakable ranges.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.UriPresentationProvider">
            <summary>
            Gets or sets a value indicating whether the server supports uri presentation.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.TextPresentationProvider">
            <summary>
            Gets or sets a value indicating whether the server supports text presentation.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.MapCodeProvider">
            <summary>
            Gets or sets the value which indicates what support the server has for code mapping.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalServerCapabilities.DataTipRangeProvider">
            <summary>
            Gets or sets a value indicating whether <see cref="F:Roslyn.LanguageServer.Protocol.VSInternalMethods.TextDocumentDataTipRangeName"/> is
            supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalSignatureInformation">
            <summary>
            Extension class for signature help information which contains colorized label information.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSignatureInformation.ColorizedLabel">
            <summary>
            Gets or sets the value representing the colorized label.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalSnippetSupportLevel">
            <summary>
            The version of support that is available from the client.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalSnippetSupportLevel.DefaultTabStop">
            <summary>
            Only default tab stops ($0) are supported.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalSnippetSupportLevel.Complete">
            <summary>
            Complete snippet support is available.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind">
            <summary>
            Enum to represent the spell checkable region kinds.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind.String">
            <summary>
            Represents a span of a string.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind.Comment">
            <summary>
            Represents a span of a comment.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind.Identifier">
            <summary>
            Represents a span of an identifier declaration.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeReport">
            <summary>
            Report of spell checkable ranges.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeReport.ResultId">
            <summary>
            Gets or sets the server-generated version number for the spell checkable ranges.
            This is treated as a black box by the client: it is stored on the client
            for each textDocument and sent back to the server when requesting
            spell checkable ranges. The server can use this result ID to avoid resending
            spell checkable ranges that had previously been sent.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeReport.Ranges">
            <summary>
            Gets or sets an array containing encoded ranges to spell check.
            </summary>
            <remarks>
            The data structure is as the following:
            1. <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeReport.Ranges"/> property can contain multiple spans to spell check.
            2. Each span is defined by a set of 3 ordered integers in the <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeReport.Ranges"/> property.
            3. The span's ordered information are the following:
                1. A kind, corresponding to the numeric value of <see cref="T:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind"/>.
                2. A start position, which is the character index where the span starts in the document buffer.
                   The start position should be the relative offset from the end of the previous span, regardless of whether that span is the same range
                   or a prior range.
                3. The length of the span.
            4. Spans should be ordered by their absolute start position in the document buffer.
            </remarks>
            <example>
            [
                /* ---- First span in the document, admitting this is the first report returned. ---- */
                1,   // The kind of the span. Equivalent to <see cref="F:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind.Comment"/>.
                123, // This is the very first span's start position. The position is relative to the beginning of the document buffer.
                5,   // Span length
                /* ---- Second span in the document ---- */
                0,   // Equivalent to <see cref="F:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind.String"/>.
                6,   // Start position relative to the first span in the document. Absolute span position is therefore (123 + 5) + 6 = 134.
                4,   // Span length
                /* ---- Third span in the document ---- */
                0,   // Equivalent to <see cref="F:Roslyn.LanguageServer.Protocol.VSInternalSpellCheckableRangeKind.String"/>.
                12,  // Start position relative to the second span. Absolute span position is therefore (134 + 4) + 12 = 150
                5    // Span length
            ]
            </example>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalStreamingParams">
             <summary>
             Class representing a streaming pull request parameter used.
            
             TODO: Deprecate VSInternalDiagnosticParams.cs to use this merged param instead.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalStreamingParams.TextDocument">
            <summary>
            Gets or sets the document for which the feature is being requested for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalStreamingParams.PreviousResultId">
             <summary>
             Gets or sets the server-generated version number for the feature request.
             </summary>
             <remarks>
             <para>
             This is treated as a black box by the client: it is stored on the client
             for each textDocument and sent back to the server when requesting
             the feature. The server can use this result ID to avoid resending
             feature results that had previously been sent.</para>
            
             <para>Note that if a client does request results that haven’t changed, the
             language server should not reply with any results for that document.
             If the client requests results for a file that has been renamed or
             deleted, then the language service should respond with null for the
             results.
             Also, if a service is reporting multiple reports for the same
             document, then all reports are expected to have the same
             previousResultId.</para>
             </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalSymbolInformation">
            <summary>
            Extension class for SymbolInformation with fields specific to Visual Studio functionalities.
            </summary>
            <remarks>
            This is a temporary protocol and should not be used.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalSymbolInformation.VSKind">
            <summary>
            Gets or sets the string kind used for icons.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalTextDocumentClientCapabilities">
            <summary>
            Text document capabilities specific to Visual Studio.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalTextDocumentClientCapabilities.OnAutoInsert">
            <summary>
            Gets or sets the setting which determines if on auto insert can be dynamically registered.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalTextDocumentRegistrationOptions">
            <summary>
            / Class representing the options for registering textDocument/_vs_OnAutoInsert support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalTextDocumentRegistrationOptions.TriggerCharacters">
            <summary>
            Gets or sets trigger characters for on auto insert.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalTextPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/_vs_textPresentation request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalTextPresentationParams.TextDocument">
            <summary>
            Gets or sets the identifier for the text document to be operate on.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalTextPresentationParams.Range">
            <summary>
            Gets or sets the range.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalTextPresentationParams.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalUriPresentationParams">
            <summary>
            Class representing the parameters sent for a textDocument/_vs_uriPresentation request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalUriPresentationParams.TextDocument">
            <summary>
            Gets or sets the identifier for the text document to be operate on.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalUriPresentationParams.Range">
            <summary>
            Gets or sets the range.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalUriPresentationParams.Uris">
            <summary>
            Gets or sets the URI values. Valid for DropKind.Uris.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalValidateBreakableRangeParams">
            <summary>
            Class representing the parameters sent for the textDocument/validateBreakableRange request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalValidateBreakableRangeParams.TextDocument">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> for the request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalValidateBreakableRangeParams.Range">
            <summary>
            Gets or sets the <see cref="P:Roslyn.LanguageServer.Protocol.VSInternalValidateBreakableRangeParams.Range"/> at which the request was sent.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalWellKnownCodeActionCommands">
            <summary>
            Class which contains the string values for all well-known Visual Studion LSP code action commands.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalWellKnownCodeActionCommands.SetClipboard">
            <summary>
            Command name for '_ms_setClipboard'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.VSInternalWellKnownCodeActionCommands.OpenUrl">
            <summary>
            Command name for '_ms_openUrl'.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceSpellCheckableParams">
            <summary>
            Parameter for workspace/_vs_spellCheckableRanges.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceSpellCheckableParams.PreviousResults">
            <summary>
            Gets or sets the current state of the documents the client already has received.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceSpellCheckableParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceSpellCheckableReport">
            <summary>
            Report for workspace spell checkable range request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VSInternalWorkspaceSpellCheckableReport.TextDocument">
            <summary>
            Gets or sets the document for which the spell checkable ranges are returned.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IPartialResultParams`1">
            <summary>
            Interface to describe parameters for requests that support streaming results.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#partialResultParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <typeparam name="T">The type to be reported by <see cref="P:Roslyn.LanguageServer.Protocol.IPartialResultParams`1.PartialResultToken"/>.</typeparam>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IPartialResultParams`1.PartialResultToken">
            <summary>
            An <see cref="T:System.IProgress`1"/> instance that can be used to report partial results
            via the <c>$/progress</c> notification.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IStaticRegistrationOptions">
            <summary>
            Interface representing the static registration options for options returned in the initialize request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#staticRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IStaticRegistrationOptions.Id">
            <summary>
            Gets or sets the id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IStringEnum">
            <summary>
            Interface that describes a string-based enumeration.
            String-based enumerations are serialized simply as their <see cref="P:Roslyn.LanguageServer.Protocol.IStringEnum.Value"/>.
            </summary>
            <remarks>
            When implementing this interface, a constructor that takes a single string as parameters is required by
            <see cref="T:Roslyn.LanguageServer.Protocol.StringEnumConverter`1"/>.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IStringEnum.Value">
            <summary>
            Gets the value of the enumeration.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ISumType">
            <summary>
            Abstracts over the idea of a "sum type". Sum types are types that can contain one value of various types.
            This abstraction is guaranteed to be typesafe, meaning you cannot access the underlying value without knowing
            its specific type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ISumType.Value">
            <summary>
            Gets the value stored in the SumType. This can be matched against using the "is" operator.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ITextDocumentParams">
            <summary>
            Interface for request/notification params that apply to a document
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ITextDocumentParams.TextDocument">
            <summary>
            The identifier of the document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ITextDocumentPositionParams">
            <summary>
            Interface for request/notification params that apply to a a position inside a document
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentPositionParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ITextDocumentPositionParams.Position">
            <summary>
            The position within the document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ITextDocumentRegistrationOptions">
            <summary>
            Interface for registration options that can be scoped to particular text documents.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ITextDocumentRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            <see langword="null"/> the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IWorkDoneProgressOptions">
            <summary>
            Options to signal work done progress support in server capabilities.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IWorkDoneProgressOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workDoneProgressOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.IWorkDoneProgressParams">
            <summary>
            Interface to describe parameters for requests that support reporting work done via the <c>$/progress</c> notification.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#clientInitiatedProgress">Language Server Protocol specification</see> for additional information.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.IWorkDoneProgressParams.WorkDoneToken">
            <summary>
            An optional token that a server can use to report work done progress.
            <para>
            The derived classes <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin"/>, <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressReport"/> and <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressEnd"/>
            are used to report the beginning, progression, and end of the operation.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LinkedEditingRangeClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/linkedEditingRange` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#linkedEditingRangeClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LinkedEditingRangeOptions">
            <summary>
            Class which represents linked editing range capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#linkedEditingRangeOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LinkedEditingRangeOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LinkedEditingRangeParams">
             <summary>
             Class representing the parameters sent for a textDocument/linkedEditingRange request.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#linkedEditingRangeParams">Language Server Protocol specification</see> for additional information.
             </summary>
             <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LinkedEditingRangeParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LinkedEditingRangeRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.LinkedEditingRangeOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#linkedEditingRangeRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LinkedEditingRangeRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LinkedEditingRangeRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LinkedEditingRanges">
            <summary>
            Class representing the response of an LinkedEditingRanges response.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#linkedEditingRanges">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LinkedEditingRanges.Ranges">
            <summary>
            A list of ranges that can be renamed together. The ranges must have
            identical length and contain identical text content. The ranges cannot
            overlap.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LinkedEditingRanges.WordPattern">
            <summary>
            An optional word pattern (regular expression) that describes valid
            contents for the given ranges. If no pattern is provided, the client
            configuration's word pattern will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Location">
             <summary>
             Class representing a location in a document.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#location">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Location.Uri">
            <summary>
            Gets or sets the URI for the document the location belongs to.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Location.Range">
            <summary>
            Gets or sets the range of the location in the document.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Location.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Location.Equals(Roslyn.LanguageServer.Protocol.Location)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Location.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LocationLink">
            <summary>
            Represents a link between a source and a target location.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#locationLink">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LocationLink.OriginSelectionRange">
            <summary>
            Span of the origin of this link.
            <para>
            Used as the underlined span for mouse interaction. Defaults to the word
            range at the mouse position.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LocationLink.TargetUri">
            <summary>
            The URI for the target document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LocationLink.TargetRange">
            <summary>
            The full target range of the linked location in the target document, which includes
            the <see cref="P:Roslyn.LanguageServer.Protocol.LocationLink.TargetSelectionRange"/> and additional context such as comments (but
            not leading/trailing whitespace). This information is typically used to highlight
            the range in the editor.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LocationLink.TargetSelectionRange">
            <summary>
            Gets or sets the range to be selected and revealed in the target document e.g. the
            name of the linked symbol. Must be contained by the <see cref="P:Roslyn.LanguageServer.Protocol.LocationLink.TargetRange"/>.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.LocationLink.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.LocationLink.Equals(Roslyn.LanguageServer.Protocol.LocationLink)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.LocationLink.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LogMessageParams">
            <summary>
            Class which represents parameter sent with window/logMessage requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#logMessageParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LogMessageParams.MessageType">
            <summary>
            Gets or sets the type of message.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LogMessageParams.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LogTraceParams">
             <summary>
             Class representing the parameters for the <see cref="F:Roslyn.LanguageServer.Protocol.Methods.LogTraceName"/> notification.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#logTrace">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LogTraceParams.Message">
            <summary>
            The message to be logged.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LogTraceParams.Verbose">
            <summary>
            Additional information that can be computed if the `trace` configuration
            is set to <see cref="F:Roslyn.LanguageServer.Protocol.TraceValue.Verbose"/>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LspNotification`1">
            <summary>
            Strongly typed object used to specify a LSP notification's parameter type.
            </summary>
            <typeparam name="TIn">The parameter type.</typeparam>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.LspNotification`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.LspNotification`1"/> class.
            </summary>
            <param name="name">The name of the JSON-RPC notification.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LspNotification`1.Name">
            <summary>
            Gets the name of the JSON-RPC notification.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.LspRequest`2">
            <summary>
            Strongly typed object used to specify a LSP requests's parameter and return types.
            </summary>
            <typeparam name="TIn">The parameter type.</typeparam>
            <typeparam name="TOut">The return type.</typeparam>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.LspRequest`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.LspRequest`2"/> class.
            </summary>
            <param name="name">The name of the JSON-RPC request.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.LspRequest`2.Name">
            <summary>
            Gets the name of the JSON-RPC request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MarkdownClientCapabilities">
            <summary>
            Describes capabilities of the client's markdown parser
            </summary>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#markdownClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkdownClientCapabilities.Parser">
            <summary>
            The name of the parser.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkdownClientCapabilities.Version">
            <summary>
            The version of the parser.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkdownClientCapabilities.AllowedTags">
            <summary>
            A list of HTML tags that the client allows/support in markdown
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MarkedString">
            <summary>
            MarkedString can be used to render human readable text. It is either a
            markdown string or a code-block that provides a language and a code snippet.
            <para>
            The language identifier is semantically equal to the optional language
            identifier in fenced code blocks in GitHub issues.
            </para>
            <para>The pair of a language and a value is an equivalent to markdown:
            <code>
            ```${language}
            ${value}
            ```
            </code>
            </para>
            <para>Note that markdown strings will be sanitized - that means html will be escaped.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#markedString">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkedString.Language">
            <summary>
            Gets or sets the language of the code stored in <see cref="P:Roslyn.LanguageServer.Protocol.MarkedString.Value" />.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkedString.Value">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MarkupContent">
             <summary>
             Class representing text and an associated format that should be rendered.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#markupContentInnerDefinition">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkupContent.Kind">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.MarkupKind"/> representing the text's format.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MarkupContent.Value">
            <summary>
            Gets or sets the text that should be rendered.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MarkupKind">
             <summary>
             Value representing the various formats of markup text.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#markupContent">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.MarkupKind.#ctor(System.String)">
             <summary>
             Value representing the various formats of markup text.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#markupContent">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MarkupKind.PlainText">
            <summary>
            Markup type is plain text.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MarkupKind.Markdown">
            <summary>
            Markup type is Markdown.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MessageActionItem">
            <summary>
            Class which represent an action the user performs after a window/showMessageRequest request is sent.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#messageActionItem">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MessageActionItem.Title">
            <summary>
            A short title like 'Retry', 'Open Log' etc.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MessageActionItem.AdditionalProperties">
            <summary>
            Additional properties which will be returned to the server in the request's response.
            <para>
            Support for this depends on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.MessageActionItemClientCapabilities.AdditionalPropertiesSupport"/>.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MessageActionItemClientCapabilities">
            <summary>
            Capabilities specific to the `MessageActionItem` type
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MessageActionItemClientCapabilities.AdditionalPropertiesSupport">
            <summary>
            Whether the client supports additional attributes which
            are preserved and sent back to the server in the
            request's response.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MessageType">
             <summary>
             Message type enum.
            <para>
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#messageType">Language Server Protocol specification</see> for additional information.
            </para>
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MessageType.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MessageType.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MessageType.Info">
            <summary>
            Info message.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MessageType.Log">
            <summary>
            Log message.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MessageType.Debug">
            <summary>
            Debug message
            </summary>
            <remarks>Since LSP 3.18</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Methods">
            <summary>
            Class which contains the string values for all common language protocol methods.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ProgressNotificationName">
            <summary>
            Method name for '$/progress' notifications.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.PartialResultTokenName">
            <summary>
            Name of the progress token in the request.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkDoneTokenName">
            <summary>
            Name of the work done token in the request.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ProgressNotificationTokenName">
            <summary>
            Name of the progress token in the $/progress notification.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentPublishDiagnosticsName">
            <summary>
            Method name for 'textDocument/publishDiagnostics'.
            <para>
            Diagnostics notifications are sent from the server to the client to signal results of validation runs.
            </para>
            <para>
            Diagnostics are “owned” by the server so it is the server’s responsibility to clear them if necessary.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_publishDiagnostics">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentPublishDiagnostics">
            <summary>
            Strongly typed message object for 'textDocument/publishDiagnostics'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDiagnosticName">
            <summary>
            Method name for 'textDocument/diagnostic'.
            <para>
            Pull diagnostics are a preferred alternative to 'textDocument/publishDiagnostics' push diagnostics that give
            the client more control over the documents for which diagnostics should be computed and at which point in time.
            </para>
            <para>
            The text document diagnostic request is sent from the client to the server to ask the server to compute the
            diagnostics for a given document. As with other pull requests the server is asked to compute the diagnostics
            for the currently synced version of the document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_diagnostic">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDiagnostic">
            <summary>
            Strongly typed message object for 'textDocument/diagnostic'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDiagnosticName">
            <summary>
            Method name for 'workspace/diagnostic'.
            <para>
            The workspace diagnostic request is sent from the client to the server to ask the server to compute workspace
            wide diagnostics which previously were pushed from the server to the client.
            </para>
            <para>
            In contrast to the document diagnostic request the workspace request can be long running and is not bound
            to a specific workspace or document state.
            </para>
            <para>
            If the client supports streaming for the workspace diagnostic pull it is legal to provide a document diagnostic
            report multiple times for the same document URI. The last one reported will win over previous reports.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_diagnostic">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDiagnostic">
            <summary>
            Strongly typed message object for 'workspace/diagnostic'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDiagnosticRefreshName">
            <summary>
            Method name for 'workspace/diagnostic/refresh'.
            <para>
            The workspace/diagnostic/refresh request is sent from the server to the client. Servers can use it to ask clients
            to refresh all needed document and workspace diagnostics.
            </para>
            <para>
            This is useful if a server detects a project wide configuration change which requires a re-calculation of all diagnostics.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#diagnostic_refresh">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDiagnosticRefresh">
            <summary>
            Strongly typed message object for 'workspace/diagnostic/refresh'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentHoverName">
            <summary>
            Method name for 'textDocument/hover'.
            <para>
            The hover request is sent from the client to the server to request hover information at a given text document position.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_hover">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentHover">
            <summary>
            Strongly typed message object for 'textDocument/hover'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCodeLensName">
            <summary>
            Method name for 'textDocument/codeLens'.
            <para>
            The code lens request is sent from the client to the server to compute code lenses for a given text document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_codeLens">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCodeLens">
            <summary>
            Strongly typed message object for 'textDocument/codeLens'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CodeLensResolveName">
            <summary>
            Method name for 'codeLens/resolve'.
            <para>
            The code lens resolve request is sent from the client to the server to resolve the command for a given code lens item.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLens_resolve">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CodeLensResolve">
            <summary>
            Strongly typed message object for 'codeLens/resolve'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceCodeLensRefreshName">
            <summary>
            Method name for 'workspace/codeLens/refresh'.
            <para>
            The workspace/codeLens/refresh request is sent from the server to the client. Servers can use it to ask clients to
            refresh the code lenses currently shown in editors. As a result the client should ask the server to recompute the
            code lenses for these editors.
            <para>
            This is useful if a server detects a configuration change which requires a re-calculation of all code lenses. Note
            that the client still has the freedom to delay the re-calculation of the code lenses if for example an editor
            is currently not visible.
            </para>
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLens_refresh">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceCodeLensRefresh">
            <summary>
            Strongly typed message object for 'workspace/codeLens/refresh'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentFoldingRangeName">
            <summary>
            Method name for 'textDocument/foldingRange'.
            <para>
            The folding range request is sent from the client to the server to return all folding ranges found in a given text document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_foldingRange">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.10</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentFoldingRange">
            <summary>
            Strongly typed message object for 'textDocument/foldingRange'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSelectionRangeName">
            <summary>
            Method name for 'textDocument/selectionRange'.
            <para>
            The selection range request is sent from the client to the server to return suggested selection ranges at an array of given positions.
            </para>
            <para>
            A selection range is a range around the cursor position which the user might be interested in selecting.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_selectionRange">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSelectionRange">
            <summary>
            Strongly typed message object for 'textDocument/selectionRange'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentSymbolName">
            <summary>
            Method name for 'textDocument/documentSymbol'.
            <para>
            </para>
            The document symbol request is sent from the client to the server to return a collection of symbols in the document.
            <para>
            The returned result is either:
            <list type="bullet">
            <item>
            An array of <see cref="T:Roslyn.LanguageServer.Protocol.SymbolInformation"/>, which is a flat list of all symbols found in a given text document. Neither the symbol’s location range nor the symbol’s container name should be used to infer a hierarchy.
            </item>
            <item>
            An array of <see cref="T:Roslyn.LanguageServer.Protocol.DocumentSymbol"/>, which is a hierarchy of symbols found in a given text document.
            </item>
            </list>
            Servers should whenever possible return <see cref="T:Roslyn.LanguageServer.Protocol.DocumentSymbol"/> since it is the richer data structure.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_documentSymbol">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentSymbol">
            <summary>
            Strongly typed message object for 'textDocument/documentSymbol'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensName">
            <summary>
            Method name for 'textDocument/semanticTokens'.
            <para>
            This method name is used only for registering for semantic tokens requests.
            </para>
            <para>
            For actual requests, the specific methods <c>textDocument/semanticTokens/{full,full/delta,range}</c> are used.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokens_fullRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensFullName">
            <summary>
            Method name for 'textDocument/semanticTokens/full'.
            <para>
            Returns semantic tokens for the full document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokens_fullRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensFull">
            <summary>
            Strongly typed message object for 'textDocument/semanticTokens/full'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensFullDeltaName">
            <summary>
            Method name for 'textDocument/semanticTokens/full/delta'.
            <para>
            Returns a delta against a previous set of semantic tokens for the full document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokens_deltaRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensFullDelta">
            <summary>
            Strongly typed message object for 'textDocument/semanticTokens/full/delta'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensRangeName">
            <summary>
            Method name for 'textDocument/semanticTokens/range'.
            <para>
            Returns semantic tokens for a visible range of the document.
            </para>
            <para>
            This allows clients to improved rendering performance when opening files
            and allow rendering documents that are too large for full semantic coloring.
            </para>
            <para>
            A server is allowed to compute the semantic tokens for a broader range than
            requested by the client. However if the server does the semantic tokens
            for the broader range must be complete and correct.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokens_rangeRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSemanticTokensRange">
            <summary>
            Strongly typed message object for 'textDocument/semanticTokens/range'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceSemanticTokensRefreshName">
            <summary>
            Method name for 'workspace/semanticTokens/refresh'.
            <para>
            This request is sent from the server to the client. Servers can use it to ask clients to refresh the editors for
            which this server provides semantic tokens.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokens_refreshRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceSemanticTokensRefresh">
            <summary>
            Strongly typed message object for 'workspace/semanticTokens/refresh'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentInlayHintName">
            <summary>
            Method name for 'textDocument/inlayHint'.
            <para>
            The inlay hints request is sent from the client to the server to compute inlay hints
            for a given [text document, range] tuple that may be rendered in the editor in place with other text.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_inlayHint">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentInlayHint">
            <summary>
            Strongly typed message object for 'textDocument/inlayHint'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.InlayHintResolveName">
            <summary>
            Method name for 'inlayHint/resolve'.
            <para>
            The request is sent from the client to the server to resolve additional information for
            a given inlay hint.
            </para>
            <para>
            This is usually used to compute the tooltip, location or command
            properties of an inlay hint’s label part to avoid its unnecessary computation during
            the <c>textDocument/inlayHint</c> request.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#inlayHint_resolve">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.InlayHintResolve">
            <summary>
            Strongly typed message object for 'inlayHint/resolve'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceInlayHintRefreshName">
            <summary>
            Method name for 'workspace/inlayHint/refresh'.
            <para>
            This request is sent from the server to ask the client to refresh the inlay hints currently shown in editors.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_inlayHint_refresh">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceInlayHintRefresh">
            <summary>
            Strongly typed message object for 'workspace/inlayHint/refresh'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentInlineValueName">
            <summary>
            Method name for 'textDocument/inlineValue'.
            <para>
            The inline value request is sent from the client to the server to compute inline values for
            a given text document that may be rendered in the editor at the end of lines..
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_inlineValue">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentInlineValue">
            <summary>
            Strongly typed message object for 'textDocument/inlineValue'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceInlineValueRefreshName">
            <summary>
            Method name for 'workspace/inlineValue/refresh'.
            <para>
            This request is sent from the server to ask the client to refresh the inline values currently shown in editors.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_inlineValue_refresh">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceInlineValueRefresh">
            <summary>
            Strongly typed message object for 'workspace/inlineValue/refresh'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentMonikerName">
            <summary>
            Method name for 'textDocument/moniker'.
            <para>
            Provide the same symbol moniker information used by Language Server Index Format (LSIF) given a text document position.
            </para>
            <para>
            Clients can utilize this method to get the moniker at the current location in a file user is editing and do
            further code navigation queries in other services that rely on LSIF indexes and link symbols together.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_moniker">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentMoniker">
            <summary>
            Strongly typed message object for 'textDocument/moniker'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCompletionName">
            <summary>
            Method name for 'textDocument/completion'.
            <para>
            The Completion request is sent from the client to the server to compute completion items at a given cursor position.
            </para>
            <para>
            If computing full completion items is expensive, servers can additionally provide a handler for the completion
            item resolve request (‘completionItem/resolve’), which is sent when a completion item is selected in the user interface. 
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_completion">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCompletion">
            <summary>
            Strongly typed message object for 'textDocument/completion'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCompletionResolveName">
            <summary>
            Method name for 'completionItem/resolve'.
            <para>
            The request is sent from the client to the server to resolve additional information for a given completion item.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionItem_resolve">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCompletionResolve">
            <summary>
            Strongly typed message object for 'completionItem/resolve'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSignatureHelpName">
            <summary>
            Method name for 'textDocument/signatureHelp'.
            <para>
            The signature help request is sent from the client to the server to request signature information at a given cursor position.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_signatureHelp">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentSignatureHelp">
            <summary>
            Strongly typed message object for 'textDocument/signatureHelp'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCodeActionName">
            <summary>
            Method name for 'textDocument/codeAction'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentCodeAction">
            <summary>
            Strongly typed message object for 'textDocument/codeAction'.
            <para>
            The code action request is sent from the client to the server to compute commands for a
            given text document and range. These commands are typically code fixes to either fix
            problems or to beautify/refactor code.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_codeAction">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CodeActionResolveName">
            <summary>
            Method name for 'codeAction/resolve'.
            <para>
            The request is sent from the client to the server to resolve additional information
            for a given code action.
            </para>
            <para>
            This is usually used to compute the edit property of a code action to avoid its
            unnecessary computation during the textDocument/codeAction request.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeAction_resolve">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CodeActionResolve">
            <summary>
            Strongly typed message object for 'codeAction/resolve'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentColorName">
            <summary>
            Method name for 'textDocument/documentColor'.
            <para>
            The document color request is sent from the client to the server to list all color references
            found in a given text document. Along with the range, a color value in RGB is returned.
            </para>
            <para>
            Clients can use the result to decorate color references in an editor. For example:
            <list type="bullet">
            <item>
            Color boxes showing the actual color next to the reference
            </item>
            <item>
            Show a color picker when a color reference is edited
            </item>
            </list>
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_documentColor">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentColor">
            <summary>
            Strongly typed message object for 'textDocument/documentColor'.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentColorPresentationName">
            <summary>
            Method name for 'textDocument/colorPresentation'.
            <para>
            The color presentation request is sent from the client to the server to obtain a list of presentations for a color value at a given location.
            <para>
            </para>
            Clients can use the result to:
            <list type="bullet">
            <item>
            modify a color reference.
            </item>
            <item>
            show in a color picker and let users pick one of the presentations
            </item>
            </list>
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_colorPresentation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentColorPresentation">
            <summary>
            Strongly typed message object for 'textDocument/colorPresentation'.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentFormattingName">
            <summary>
            Method name for 'textDocument/formatting'.
            <para>
            The document formatting request is sent from the client to the server to format a whole document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_formatting">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentFormatting">
            <summary>
            Strongly typed message object for 'textDocument/formatting'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentRangeFormattingName">
            <summary>
            Method name for 'textDocument/rangeFormatting'.
            <para>
            The document range formatting request is sent from the client to the server to format a given range in a document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_rangeFormatting">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentRangeFormatting">
            <summary>
            Strongly typed message object for 'textDocument/rangeFormatting'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentOnTypeFormattingName">
            <summary>
            Method name for 'textDocument/onTypeFormatting'.
            <para>
            The document on type formatting request is sent from the client to the server to format parts of the document during typing.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_onTypeFormatting">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentOnTypeFormatting">
            <summary>
            Strongly typed message object for 'textDocument/onTypeFormatting'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentRenameName">
            <summary>
            Method name for 'textDocument/rename'.
            <para>
            The rename request is sent from the client to the server to ask the server to compute
            a workspace change so that the client can perform a workspace-wide rename of a symbol.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_rename">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentRename">
            <summary>
            Strongly typed message object for 'textDocument/rename'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentPrepareRenameName">
            <summary>
            Method name for 'textDocument/prepareRename'.
            <para>
            The prepare rename request is sent from the client to the server to setup and test the
            validity of a rename operation at a given location.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_prepareRename">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.12</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentPrepareRename">
            <summary>
            Strongly typed message object for 'textDocument/prepareRename'.
            </summary>
            <remarks>Since LSP 3.12</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentLinkedEditingRangeName">
            <summary>
            Method name for 'textDocument/linkedEditingRange'.
            <para>
            The linked editing request is sent from the client to the server to return for a given
            position in a document the range of the symbol at the position and all ranges that have the same content.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_prepareRename">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentLinkedEditingRange">
            <summary>
            Strongly typed message object for 'textDocument/linkedEditingRange'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidOpenName">
            <summary>
            Method name for 'textDocument/didOpen'.
            <para>
            The document open notification is sent from the client to the server to signal newly opened text documents.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_didOpen">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidOpen">
            <summary>
            Strongly typed message object for 'textDocument/didOpen'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidChangeName">
            <summary>
            Method name for 'textDocument/didChange'.
            <para>
            The document change notification is sent from the client to the server to signal changes to a text document.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_didChange">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidChange">
            <summary>
            Strongly typed message object for 'textDocument/didChange'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentWillSaveName">
            <summary>
            Method name for 'textDocument/willSave'.
            <para>
            The document will save notification is sent from the client to the server before the document is actually saved.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_willSave">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentWillSave">
            <summary>
            Strongly typed message object for 'textDocument/willSave'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentWillSaveWaitUntilName">
            <summary>
            Method name for 'textDocument/willSaveWaitUntil'.
            <para>
            The document will save wait until request is sent from the client to the server before the document is actually saved.
            The request can return an array of TextEdits which will be applied to the text document before it is saved.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_willSaveWaitUntil">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentWillSaveWaitUntil">
            <summary>
            Strongly typed message object for 'textDocument/willSaveWaitUntil'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidSaveName">
            <summary>
            Method name for 'textDocument/didSave'.
            <para>
            The document save notification is sent from the client to the server when the document was saved in the client.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_didSave">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidSave">
            <summary>
            Strongly typed message object for 'textDocument/didSave'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidCloseName">
            <summary>
            Method name for 'textDocument/didClose'.
            <para>
            The document close notification is sent from the client to the server when the document
            got closed in the client. The document’s master now exists where the document’s Uri
            points to (e.g. if the document’s Uri is a file Uri the master now exists on disk)
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_didClose">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDidClose">
            <summary>
            Strongly typed message object for 'textDocument/didSave'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.InitializeName">
            <summary>
            Method name for 'initialize'.
            <para>
            The initialize request is sent as the first request from the client to the server and is used to exchange capabilities.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.Initialize">
            <summary>
            Strongly typed message object for 'initialize'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.InitializedName">
            <summary>
            Method name for 'initialized'.
            <para>
            The initialized notification is sent from the client to the server after the client received the
            result of the initialize request but before the client is sending any other request or notification to the server.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialized">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.Initialized">
            <summary>
            Strongly typed message object for 'initialized'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ClientRegisterCapabilityName">
            <summary>
            Method name for 'client/registerCapability'.
            <para>
            The client/registerCapability request is sent from the server to the client to register for a new capability on the client side.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#client_registerCapability">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ClientRegisterCapability">
            <summary>
            Strongly typed message object for 'client/registerCapability'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ClientUnregisterCapabilityName">
            <summary>
            Method name for 'client/unregisterCapability'.
            <para>
            The client/unregisterCapability request is sent from the server to the client to unregister a previously registered capability.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#client_unregisterCapability">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ClientUnregisterCapability">
            <summary>
            Strongly typed message object for 'client/unregisterCapability'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.SetTraceName">
            <summary>
            Method name for '$/setTrace' notifications.
            <para>
            A notification that should be used by the client to modify the trace setting of the server.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#setTrace">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.SetTrace">
            <summary>
            Strongly typed message object for '$/setTrace'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.LogTraceName">
            <summary>
            Method name for '$/logTrace' notifications.
            <para>
            A notification to log the trace of the server’s execution. This must
            respect the current trace configuration set by the $/logTrace notification.
            </para>
            <para>
            This should only be used for systematic trace reporting For single debugging messages,
            the server should instead send window/logMessage notifications.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#logTrace">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.LogTrace">
            <summary>
            Strongly typed message object for '$/logTrace'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ShutdownName">
            <summary>
            Method name for 'shutdown'.
            <para>
            The shutdown request is sent from the client to the server. It asks the server to shut
            down, but to not exit (otherwise the response might not be delivered correctly to the
            client). There is a separate exit notification that asks the server to exit.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#shutdown">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.Shutdown">
            <summary>
            Strongly typed message object for 'shutdown'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.ExitName">
            <summary>
            Method name for 'exit'.
            <para>
            A notification to ask the server to exit its process.
            <para>
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#shutdown">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.Exit">
            <summary>
            Strongly typed message object for 'exit'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDeclarationName">
            <summary>
            Method name for 'textDocument/declaration'.
            <para>
            The go to declaration request is sent from the client to the server to resolve the declaration location of a symbol at a given text document position.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_declaration">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDeclaration">
            <summary>
            Strongly typed message object for 'textDocument/declaration'.
            <para>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be returned if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DeclarationClientCapabilities.LinkSupport"/>
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDefinitionName">
            <summary>
            Method name for 'textDocument/definition'.
            <para>
            The go to definition request is sent from the client to the server to resolve the definition location of a symbol at a given text document position.
            </para>
            <para>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be returned if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDefinition">
            <summary>
            Strongly typed message object for 'textDocument/definition'.
            <para>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be returned if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentTypeDefinitionName">
            <summary>
            Method name for 'textDocument/typeDefinition'.
            <para>
            The go to type definition request is sent from the client to the server to resolve the type definition location of a symbol at a given text document position.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_typeDefinition">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentTypeDefinition">
            <summary>
            Strongly typed message object for 'textDocument/typeDefinition'.
            <para>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be returned if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.TypeDefinitionClientCapabilities.LinkSupport"/>
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentImplementationName">
            <summary>
            Method name for 'textDocument/implementation'.
            <para>
            The go to implementation request is sent from the client to the server to resolve the implementation location of a symbol at a given text document position.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_implementation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentImplementation">
            <summary>
            Strongly typed message object for 'textDocument/implementation'.
            <para>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be returned if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.TypeDefinitionClientCapabilities.LinkSupport"/>
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentReferencesName">
            <summary>
            Method name for 'textDocument/references'.
            <para>
            The references request is sent from the client to the server to resolve project-wide references for the symbol denoted by the given text document position.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_references">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentReferences">
            <summary>
            Strongly typed message object for 'textDocument/references'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.PrepareCallHierarchyName">
            <summary>
            Method name for 'textDocument/prepareCallHierarchy'.
            <para>
            The call hierarchy request is sent from the client to the server to return a call hierarchy for the language element of given text document positions. The call hierarchy requests are executed in two steps:
            <list type="bullet">
            <item>first a call hierarchy item is resolved for the given text document position</item>
            <item>for a call hierarchy item the incoming or outgoing call hierarchy items are resolved.</item>
            </list>
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_prepareCallHierarchy">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.PrepareCallHierarchy">
            <summary>
            Strongly typed message object for 'textDocument/prepareCallHierarchy'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CallHierarchyIncomingCallsName">
            <summary>
            Method name for 'callHierarchy/incomingCalls'.
            <para>
            The request is sent from the client to the server to resolve incoming calls for a given call hierarchy item.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchy_incomingCalls">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CallHierarchyIncomingCalls">
            <summary>
            Strongly typed message object for 'callHierarchy/incomingCalls'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CallHierarchyOutgoingCallsName">
            <summary>
            Method name for 'callHierarchy/outgoingCalls'.
            <para>
            The request is sent from the client to the server to resolve outgoing calls for a given call hierarchy item.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchy_outgoingCalls">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.CallHierarchyOutgoingCalls">
            <summary>
            Strongly typed message object for 'callHierarchy/outgoingCalls'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.PrepareTypeHierarchyName">
            <summary>
            Method name for 'textDocument/prepareTypeHierarchy'.
            <para>
            The type hierarchy request is sent from the client to the server to return a type hierarchy for the language element of given text
            document positions. Will return null if the server couldn't infer a valid type from the position.
            <para>
            </para>
            The type hierarchy requests are executed in two steps:
            <list type="bullet">
            <item>first a type hierarchy item is prepared for the given text document position.</item>
            <item>for a type hierarchy item the supertype or subtype type hierarchy items are resolved.</item>
            </list>
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_prepareTypeHierarchy">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.PrepareTypeHierarchy">
            <summary>
            Strongly typed message object for 'textDocument/prepareTypeHierarchy'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TypeHierarchySupertypesName">
            <summary>
            Method name for 'typeHierarchy/supertypes'.
            <para>
            The request is sent from the client to the server to resolve the supertypes for a given type hierarchy item.
            Will return null if the server couldn't infer a valid type from item in the params.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchy_supertypes">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TypeHierarchySupertypes">
            <summary>
            Strongly typed message object for 'typeHierarchy/supertypes'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TypeHierarchySubtypesName">
            <summary>
            Method name for 'typeHierarchy/subtypes'.
            <para>
            The request is sent from the client to the server to resolve outgoing calls for a given call hierarchy item.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchy_subtypes">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TypeHierarchySubtypes">
            <summary>
            Strongly typed message object for 'typeHierarchy/subtypes'.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentHighlightName">
            <summary>
            Method name for 'textDocument/documentHighlight'.
            <para>
            The document highlight request is sent from the client to the server to resolve document highlights for a given text document position.
            For programming languages this usually highlights all references to the symbol scoped to this file.
            </para>
            <para>
            However, we kept ‘textDocument/documentHighlight’ and ‘textDocument/references’ separate requests since the first one is allowed to be
            more fuzzy. Symbol matches usually have a <see cref="T:Roslyn.LanguageServer.Protocol.DocumentHighlightKind"/> of <see cref="F:Roslyn.LanguageServer.Protocol.DocumentHighlightKind.Read"/> or
            <see cref="F:Roslyn.LanguageServer.Protocol.DocumentHighlightKind.Write"/> whereas fuzzy or textual matches use <see cref="F:Roslyn.LanguageServer.Protocol.DocumentHighlightKind.Text"/> as the kind.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_documentHighlight">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentHighlight">
            <summary>
            Strongly typed message object for 'textDocument/documentHighlight'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentLinkName">
            <summary>
            Method name for 'textDocument/documentLink'.
            <para>
            The document links request is sent from the client to the server to request the location of links in a document.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_documentLink">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TextDocumentDocumentLink">
            <summary>
            Strongly typed message object for 'textDocument/documentLink'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.DocumentLinkResolveName">
            <summary>
            Method name for 'documentLink/resolve'.
            <para>
            The document link resolve request is sent from the client to the server to resolve the target of a given document link.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentLink_resolve">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.DocumentLinkResolve">
            <summary>
            Strongly typed message object for 'documentLink/resolve'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidOpenName">
            <summary>
            Method name for 'notebookDocument/didOpen'.
            <para>
            The open notification is sent from the client to the server when a notebook document is opened. It is only
            sent by a client if the server specified a <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector.Notebook"/> in its
            <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions.NotebookSelector"/> capability.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocument_didOpen">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidOpen">
            <summary>
            Strongly typed message object for 'notebookDocument/didOpen'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidChangeName">
            <summary>
            Method name for 'notebookDocument/didChange'.
            <para>
            The change notification is sent from the client to the server when a notebook document changes. It is only
            sent by a client if the server specified a <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector.Notebook"/> in its
            <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions.NotebookSelector"/> capability.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocument_didChange">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidChange">
            <summary>
            Strongly typed message object for 'notebookDocument/didChange'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidSaveName">
            <summary>
            Method name for 'notebookDocument/didSave'.
            <para>
            The change notification is sent from the client to the server when a notebook document is saved. It is only
            sent by a client if the server specified a <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector.Notebook"/> in its
            <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions.NotebookSelector"/> capability.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocument_didSave">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidSave">
            <summary>
            Strongly typed message object for 'notebookDocument/didSave'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidCloseName">
            <summary>
            Method name for 'notebookDocument/didClose'.
            <para>
            The change notification is sent from the client to the server when a notebook document is closed. It is only
            sent by a client if the server specified a <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector.Notebook"/> in its
            <see cref="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions.NotebookSelector"/> capability.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocument_didClose">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.NotebookDidClose">
            <summary>
            Strongly typed message object for 'notebookDocument/didClose'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowShowMessageName">
            <summary>
            Method name for 'window/showMessage'.
            <para>
            The show message notification is sent from a server to a client to ask the client to display a particular message in the user interface.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_showMessage">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowShowMessage">
            <summary>
            Strongly typed message object for 'window/showMessage'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowShowMessageRequestName">
            <summary>
            Method name for 'window/showMessageRequest'.
            <para>
            The show message request is sent from a server to a client to ask the client to display a particular message in the user interface.
            </para>
            <para>
            In addition to the show message notification the request allows to pass actions and to wait for an answer from the client.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_showMessageRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowShowMessageRequest">
            <summary>
            Strongly typed message object for 'window/showMessageRequest'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowShowDocumentName">
            <summary>
            Method name for 'window/showDocument'.
            <para>
            The show document request is sent from a server to a client to ask the client to display a particular resource referenced by a URI in the user interface.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_showDocument">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowShowDocument">
            <summary>
            Strongly typed message object for 'window/showDocument'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowLogMessageName">
            <summary>
            Method name for 'window/logMessage'.
            <para>
            The log message notification is sent from the server to the client to ask the client to log a particular message.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_logMessage">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowLogMessage">
            <summary>
            Strongly typed message object for 'window/logMessage'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowWorkDoneProgressCreateName">
            <summary>
            Method name for 'window/workDoneProgress/create'
            <para>
            Sent from the server to the client to ask the client to create a work done progress.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_workDoneProgress_create">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowWorkDoneProgressCreate">
            <summary>
            Strongly typed message object for 'window/workDoneProgress/create'.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowWorkDoneProgressCancelName">
            <summary>
            Method name for 'window/workDoneProgress/cancel'
            <para>
            The window/workDoneProgress/cancel notification is sent from the client to the server to cancel a progress
            initiated on the server side using the window/workDoneProgress/create.
            </para>
            <para>
            The progress need not be marked as cancellable to be cancelled and a client may cancel a
            progress for any number of reasons: in case of error, reloading a workspace etc.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_workDoneProgress_cancel">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WindowWorkDoneProgressCancel">
            <summary>
            Strongly typed message object for 'window/workDoneProgress/cancel'.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TelemetryEventName">
            <summary>
            Method name for 'telemetry/event'.
            <para>
            The telemetry notification is sent from the server to the client to ask the client to log a telemetry event.
            </para>
            <para>
            The protocol doesn't specify the payload since no interpretation of the data happens in the protocol.
            Most clients even don’t handle the event directly but forward them to the extensions owing the
            corresponding server issuing the event.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#telemetry_event">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.TelemetryEvent">
            <summary>
            Strongly typed message object for 'telemetry/event'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceSymbolName">
            <summary>
            Method name for 'workspace/symbol'.
            <para>
            The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_symbol">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceSymbol">
            <summary>
            Strongly typed message object for 'workspace/symbol'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceSymbolResolveName">
            <summary>
            Method name for 'workspaceSymbol/resolve'.
            <para>
            The request is sent from the client to the server to resolve additional information for a given workspace symbol.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_symbolResolve">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceSymbolResolve">
            <summary>
            Strongly typed message object for 'workspaceSymbol/resolve'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceConfigurationName">
            <summary>
            Method name for 'workspace/configuration'.
            <para>
            The workspace/configuration request is sent from the server to the client to fetch configuration
            settings from the client. The request can fetch several configuration settings in one roundtrip.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_configuration">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceConfiguration">
            <summary>
            Strongly typed message object for 'workspace/configuration'.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidChangeConfigurationName">
            <summary>
            Method name for 'workspace/didChangeConfiguration'.
            <para>
            A notification sent from the client to the server to signal the change of configuration settings.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didChangeConfiguration">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidChangeConfiguration">
            <summary>
            Strongly typed message object for 'workspace/didChangeConfiguration'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceFoldersName">
            <summary>
            Method name for 'workspace/workspaceFolders'.
            <para>
            The workspace/workspaceFolders request is sent from the server to the client to fetch the current open
            list of workspace folders. Returns <see langword="null"/> in the response if only a single file is open in the tool.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_workspaceFolders">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceFolders">
            <summary>
            Strongly typed message object for 'workspace/workspaceFolders'.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidChangeWorkspaceFoldersName">
            <summary>
            Method name for 'workspace/didChangeWorkspaceFolders'.
            <para>
            The <c>workspace/didChangeWorkspaceFolders</c> notification is sent from the client to the server
            to inform the server about workspace folder configuration changes.
            </para>
            <para>
            A server can register for this notification by using either the server capability
            <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceFoldersServerCapabilities.ChangeNotifications"/> or by using the dynamic capability registration mechanism.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didChangeWorkspaceFolders">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidChangeWorkspaceFolders">
            <summary>
            Strongly typed message object for 'workspace/didChangeWorkspaceFolders'.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceWillCreateFilesName">
            <summary>
            Method name for 'workspace/willCreateFiles'.
            <para>
            The will create files request is sent from the client to the server before files are actually created as long
            as the creation is triggered from within the client either by a user action or by applying a workspace edit.
            </para>
            <para>
            The request can return a <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceEdit"/> which will be applied to the workspace before the files are created
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_willCreateFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceWillCreateFiles">
            <summary>
            Strongly typed message object for 'workspace/willCreateFiles'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidCreateFilesName">
            <summary>
            Method name for 'workspace/didCreateFiles'.
            <para>
            The did create files notification is sent from the client to the server when files were created from within the client.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didCreateFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidCreateFiles">
            <summary>
            Strongly typed message object for 'workspace/didCreateFiles'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceWillRenameFilesName">
            <summary>
            Method name for 'workspace/willRenameFiles'.
            <para>
            The will rename files request is sent from the client to the server before files are actually renamed as long as the
            rename is triggered from within the client either by a user action or by applying a workspace edit.
            </para>
            <para>
            The request can return a <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceEdit"/> which will be applied to the workspace before the files are renamed.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_willRenameFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceWillRenameFiles">
            <summary>
            Strongly typed message object for 'workspace/willRenameFiles'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidRenameFilesName">
            <summary>
            Method name for 'workspace/didRenameFiles'.
            <para>
            The did rename files notification is sent from the client to the server when files were renamed from within the client.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didRenameFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidRenameFiles">
            <summary>
            Strongly typed message object for 'workspace/didRenameFiles'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceWillDeleteFilesName">
            <summary>
            Method name for 'workspace/willDeleteFiles'.
            <para>
            The will delete files request is sent from the client to the server before files are actually deleted as
            long as the deletion is triggered from within the client either by a user action or by applying a workspace edit.
            </para>
            <para>
            The request can return a <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceEdit"/> which will be applied to workspace before the files are deleted.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_willDeleteFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceWillDeleteFiles">
            <summary>
            Strongly typed message object for 'workspace/willDeleteFiles'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidDeleteFilesName">
            <summary>
            Method name for 'workspace/didDeleteFiles'.
            <para>
            The did delete files notification is sent from the client to the server when files were deleted from within the client.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didDeleteFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidDeleteFiles">
            <summary>
            Strongly typed message object for 'workspace/didDeleteFiles'.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidChangeWatchedFilesName">
            <summary>
            Method name for 'workspace/didChangeWatchedFiles'.
            <para>
            The watched files notification is sent from the client to the server when the client detects changes to files
            and folders watched by the language client.
            </para>
            <para>
            Note that although the name suggest that only file events are sent, it is about file system events, which includes folders as well.
            It is recommended that servers register for these file system events using the registration mechanism.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didChangeWatchedFiles">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceDidChangeWatchedFiles">
            <summary>
            Strongly typed message object for 'workspace/didChangeWatchedFiles'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceExecuteCommandName">
            <summary>
            Method name for 'workspace/executeCommand'.
            <para>
            The workspace/executeCommand request is sent from the client to the server to trigger command execution on the server.
            </para>
            <para>
            In most cases the server creates a WorkspaceEdit structure and applies the changes to the workspace using the
            request <c>workspace/applyEdit</c> which is sent from the server to the client.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_executeCommand">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceExecuteCommand">
            <summary>
            Strongly typed message object for 'workspace/executeCommand'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceApplyEditName">
            <summary>
            Method name for 'workspace/applyEdit'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.Methods.WorkspaceApplyEdit">
            <summary>
            Strongly typed message object for 'workspace/applyEdit'.
            <para>
            The <c>workspace/applyEdit</c> request is sent from the server to the client to modify resource on the client side.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_applyEdit">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Moniker">
            <summary>
            Moniker definition to match LSIF 0.5 moniker definition.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#moniker">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Moniker.Scheme">
            <summary>
            The scheme of the moniker. For example tsc or .Net
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Moniker.Identifier">
            <summary>
            The identifier of the moniker. The value is opaque in LSIF however
            schema owners are allowed to define the structure if they want.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Moniker.Unique">
            <summary>
            The scope in which the moniker is unique
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Moniker.Kind">
            <summary>
            The moniker kind if known.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MonikerClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/moniker` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#monikerClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MonikerKind">
            <summary>
            The kind of a <see cref="T:Roslyn.LanguageServer.Protocol.Moniker"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#monikerKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.MonikerKind.#ctor(System.String)">
            <summary>
            The kind of a <see cref="T:Roslyn.LanguageServer.Protocol.Moniker"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#monikerKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MonikerKind.Import">
            <summary>
            The moniker represent a symbol that is imported into a project
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MonikerKind.Export">
            <summary>
            The moniker represents a symbol that is exported from a project
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.MonikerKind.Local">
            <summary>
            The moniker represents a symbol that is local to a project (e.g. a local
            variable of a function, a class not visible outside the project, ...)
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MonikerOptions">
            <summary>
            Class which represents Moniker capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#monikerOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MonikerOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MonikerParams">
            <summary>
            Class representing the parameters sent from the client to the server for a textDocument/moniker request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#monikerParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MonikerParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MonikerParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.MonikerRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.MonikerOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#monikerRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MonikerRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.MonikerRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.UniquenessLevel">
            <summary>
            Moniker uniqueness level to define scope of a <see cref="T:Roslyn.LanguageServer.Protocol.Moniker"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#uniquenessLevel">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
            
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.UniquenessLevel.#ctor(System.String)">
            <summary>
            Moniker uniqueness level to define scope of a <see cref="T:Roslyn.LanguageServer.Protocol.Moniker"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#uniquenessLevel">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
            
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.UniquenessLevel.Document">
            <summary>
            The moniker is only unique inside a document
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.UniquenessLevel.Project">
            <summary>
            The moniker is unique inside a project for which a dump got created
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.UniquenessLevel.Group">
            <summary>
            The moniker is unique inside the group to which a project belongs
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.UniquenessLevel.Scheme">
            <summary>
            The moniker is unique inside the moniker scheme.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.UniquenessLevel.Global">
            <summary>
            The moniker is globally unique
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyClientCapabilities">
            <summary>
            Capabilities specific to the various type hierarchy requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCall">
            <summary>
            The item returned from a 'callHierarchy/incomingCalls' request
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyIncomingCall">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCall.From">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.CallHierarchyItem"/> for which to return incoming calls
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCall.FromRanges">
            <summary>
            The ranges at which the calls appear. This is relative to the caller
            denoted by [`this.from`](#CallHierarchyIncomingCall.from).
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCallsParams">
            <summary>
            The params sent in a 'callHierarchy/incomingCalls' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyIncomingCallsParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCallsParams.Item">
            <summary>
            The item returned from `textDocument/prepareCallHierarchy`
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCallsParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyIncomingCallsParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyItem">
            <summary>
            Represents an item in the call hierarchy
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyItem">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Name">
            <summary>
            The name of this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Kind">
            <summary>
            The kind of this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Tags">
            <summary>
            Tags for this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Detail">
            <summary>
            More detail for this item, e.g. the signature of a function.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Uri">
            <summary>
            The resource identifier of this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Range">
            <summary>
            The range enclosing this symbol not including leading/trailing whitespace
            but everything else, e.g. comments and code.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.SelectionRange">
            <summary>
            The range that should be selected and revealed when this symbol is being
            picked, e.g. the name of a function. Must be contained by the
            <see cref="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Range"/>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyItem.Data">
            <summary>
            A data field that is preserved between a call hierarchy prepare and
            incoming calls or outgoing calls requests.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyOptions">
            <summary>
            Class which represents Call Hierarchy server capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCall">
            <summary>
            The item returned from a 'callHierarchy/outgoingCalls' request
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyOutgoingCall">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCall.To">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.CallHierarchyItem"/> for which to return outgoing calls
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCall.FromRanges">
            <summary>
            The range at which this item is called. This is the range relative to
            the caller, e.g the item passed to the <c>callHierarchy/outgoingCalls</c> request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCallsParams">
            <summary>
            The params sent in a 'callHierarchy/incomingCalls' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyIncomingCallsParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCallsParams.Item">
            <summary>
            The item returned from `textDocument/prepareCallHierarchy`
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCallsParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyOutgoingCallsParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyPrepareParams">
            <summary>
            The params sent in a 'textDocument/prepareCallHierarchy' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyPrepareParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyPrepareParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.CallHierarchyRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.CallHierarchyOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#callHierarchyRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.CallHierarchyRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeclarationClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/declaration` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#declarationClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeclarationClientCapabilities.LinkSupport">
            <summary>
            Whether the client supports supports additional metadata in the form of <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> definition links
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeclarationOptions">
            <summary>
            Server capabilities specific to Go to Declaration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#declarationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeclarationOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeclarationParams">
            <summary>
            The params sent in a 'textDocument/declaration' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#declarationParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeclarationParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeclarationParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DeclarationClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DeclarationRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DeclarationOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#declarationRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeclarationRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DeclarationRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/definition` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#definitionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport">
            <summary>
            Whether the client supports supports additional metadata in the form of <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> definition links
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DefinitionOptions">
            <summary>
            Server capabilities specific to Go to Definition.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#definitionOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DefinitionOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DefinitionParams">
            <summary>
            The params sent in a 'textDocument/definition' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#definitionParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DefinitionParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DefinitionParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DefinitionRegistrationOptions">
             <summary>
             Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DefinitionOptions"/> that allows scoping the registration.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#definitionRegistrationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DefinitionRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ImplementationClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/implementation` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#implementationClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ImplementationClientCapabilities.LinkSupport">
            <summary>
            Whether the client supports supports additional metadata in the form of definition links
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ImplementationOptions">
             <summary>
             Server capabilities specific to Go to Implementation.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#implementationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ImplementationOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ImplementationParams">
            <summary>
            The params sent in a 'textDocument/implementation' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#implementationParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ImplementationParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ImplementationParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.ImplementationClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ImplementationRegistrationOptions">
             <summary>
             Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.ImplementationOptions"/> that allows scoping the registration.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#implementationRegistrationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ImplementationRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ImplementationRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ReferenceClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/references` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#referenceClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ReferenceContext">
            <summary>
            Class representing reference context information for find reference request parameter.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#referenceContext">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ReferenceContext.IncludeDeclaration">
            <summary>
            Include the declaration of the current symbol.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ReferenceOptions">
             <summary>
             Server capabilities specific to Find References.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#referenceOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ReferenceOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ReferenceParams">
            <summary>
            The params sent in a <c>textDocument/references</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#referenceParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ReferenceParams.Context">
            <summary>
            Gets or sets the reference context.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ReferenceParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ReferenceParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ReferenceRegistrationOptions">
             <summary>
             Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.ReferenceOptions"/> that allows scoping the registration.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#referenceRegistrationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ReferenceRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeDefinitionClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/typeDefinition` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_typeDefinition">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeDefinitionClientCapabilities.LinkSupport">
            <summary>
            Whether the client supports supports additional metadata in the form of definition links
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeDefinitionOptions">
            <summary>
            Server capabilities specific to Go to Type Declaration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeDefinitionOption">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeDefinitionOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeDefinitionParams">
            <summary>
            The params sent in a 'textDocument/typeDefinition' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeDefinitionParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeDefinitionParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeDefinitionParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.TypeDefinitionClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeDefinitionRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.TypeDefinitionOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeDefinitionRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeDefinitionRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeDefinitionRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchyClientCapabilities">
            <summary>
            Capabilities specific to the various type hierarchy requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchyClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchyItem">
            <summary>
            Represents an item in the type hierarchy
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchyItem">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Name">
            <summary>
            The name of this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Kind">
            <summary>
            The kind of this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Tags">
            <summary>
            Tags for this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Detail">
            <summary>
            More detail for this item, e.g. the signature of a function.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Uri">
            <summary>
            The resource identifier of this item.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Range">
            <summary>
            The range enclosing this symbol not including leading/trailing whitespace
            but everything else, e.g. comments and code.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.SelectionRange">
            <summary>
            The range that should be selected and revealed when this symbol is being
            picked, e.g. the name of a function. Must be contained by the
            <see cref="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Range"/>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyItem.Data">
            <summary>
            A data field that is preserved between a type hierarchy prepare and
            supertypes or subtypes requests. It could also be used to identify the
            type hierarchy in the server, helping improve the performance on
            resolving supertypes and subtypes.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchyOptions">
             <summary>
             Sever capabilities specific to Type Hierarchy.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchyOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchyPrepareParams">
            <summary>
            The params sent in a 'textDocument/prepareTypeHierarchy' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchyPrepareParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyPrepareParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchyRegistrationOptions">
             <summary>
             Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.TypeHierarchyOptions"/> that allows scoping the registration.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchyRegistrationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchyRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchySubtypesParams">
            <summary>
            The params sent in a 'typeHierarchy/subtypes' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchySubtypesParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchySubtypesParams.Item">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.TypeHierarchyItem"/> for which to return subtypes
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchySubtypesParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchySubtypesParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TypeHierarchySupertypesParams">
            <summary>
            The params sent in a 'typeHierarchy/supertypes' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#typeHierarchySubtypesParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchySupertypesParams.Item">
            <summary>
            The <see cref="T:Roslyn.LanguageServer.Protocol.TypeHierarchyItem"/> for which to return supertypes
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchySupertypesParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TypeHierarchySupertypesParams.PartialResultToken">
            <inheritdoc/>
            <remarks>
            <see cref="T:Roslyn.LanguageServer.Protocol.LocationLink"/> may only be used if the client opts in via <see cref="P:Roslyn.LanguageServer.Protocol.DefinitionClientCapabilities.LinkSupport"/>
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidChangeNotebookDocumentParams">
            <summary>
            The params sent in a <c>notebookDocument/didChange</c> notification.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didChangeNotebookDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeNotebookDocumentParams.NotebookDocument">
            <summary>
            The notebook document that did change. The version number points
            to the version after all provided changes have been applied.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidChangeNotebookDocumentParams.Change">
            <summary>
            The actual changes to the notebook document.
            <para>
            The change describes single state change to the notebook document.
            So it moves a notebook document, its cells and its cell text document
            contents from state S to S'.
            </para>
            <para>
            To mirror the content of a notebook using change events use the
            following approach:
            <list type="bullet">
            <item>start with the same initial content</item>
            <item>apply the <c>notebookDocument/didChange</c> notifications in the order you receive them.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidCloseNotebookDocumentParams">
            <summary>
            The params sent in a <c>notebookDocument/didClose</c> notification.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didCloseNotebookDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidCloseNotebookDocumentParams.NotebookDocument">
            <summary>
            The notebook document that got closed.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidCloseNotebookDocumentParams.CellTextDocuments">
            <summary>
            The text documents that represent the content
            of a notebook cell that got closed.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidOpenNotebookDocumentParams">
            <summary>
            The params sent in <c>notebookDocument/didOpen</c> notification.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didOpenNotebookDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidOpenNotebookDocumentParams.NotebookDocument">
            <summary>
            The notebook document that got opened.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidOpenNotebookDocumentParams.CellTextDocuments">
            <summary>
            The text documents that represent the content of a notebook cell.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.DidSaveNotebookDocumentParams">
            <summary>
            The params sent in a <c>notebookDocument/didSave</c> notification.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#didSaveNotebookDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.DidSaveNotebookDocumentParams.NotebookDocument">
            <summary>
            The notebook document that got saved.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ExecutionSummary">
            <summary>
            Additional execution summary information
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#executionSummary">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecutionSummary.ExecutionOrder">
            <summary>
            A strict monotonically increasing value indicating the
            execution order of a cell inside a notebook.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ExecutionSummary.Success">
            <summary>
            Whether the execution was successful or not, if known by the client.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookCell">
            <summary>
            A notebook cell.
            <para>
            A cell's document URI must be unique across ALL notebook
            cells and can therefore be used to uniquely identify a
            notebook cell or the cell's text document.
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookCell">Language Server Protocol specification</see> for additional information.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCell.Kind">
            <summary>
            The cell's kind
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCell.Document">
            <summary>
            The URI of the cell's text document content.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCell.Metadata">
            <summary>
            Additional metadata stored with the cell.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCell.ExecutionSummary">
            <summary>
            Additional execution summary information if supported by the client.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookCellArrayChange">
            <summary>
            A change describing how to move a <see cref="T:Roslyn.LanguageServer.Protocol.NotebookCell"/> array from state S to S'.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookCellArrayChange">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCellArrayChange.Start">
            <summary>
            The start offset of the cell that changed.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCellArrayChange.DeleteCount">
            <summary>
            The deleted cells
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCellArrayChange.Cells">
            <summary>
            The new cells, if any
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookCellKind">
            <summary>
            A notebook cell kind.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookCellKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.NotebookCellKind.Markup">
            <summary>
            A markup-cell is formatted source that is used for display.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.NotebookCellKind.Code">
            <summary>
            A code-cell is source code.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookCellTextDocumentFilter">
            <summary>
            A notebook cell text document filter denotes a cell text document by
            different properties.
            
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookCellTextDocumentFilter">Language Server Protocol specification</see> for additional information.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCellTextDocumentFilter.Notebook">
            <summary>
            A filter that matches against the notebook
            containing the notebook cell. If a string
            value is provided it matches against the
            notebook type. '*' matches every notebook.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookCellTextDocumentFilter.Language">
            <summary>
            A language id like `python`.
            
            Will be matched against the language id of the
            notebook cell document. '*' matches every language.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocument">
            <summary>
            A notebook document.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocument">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocument.Uri">
            <summary>
            The notebook document's URI.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocument.NotebookType">
            <summary>
            The type of the notebook.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocument.Version">
            <summary>
            The version number of this document (it will increase after each change, including undo/redo).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocument.Metadata">
            <summary>
            Additional metadata stored with the notebook document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocument.Cells">
            <summary>
            The cells of a notebook.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCells">
            <summary>
            Represents changes to the notebook cells in a <see cref="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeEvent"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentChangeEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCells.Structure">
            <summary>
            Changes to the cell structure to add or remove cells.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCells.Data">
            <summary>
            Changes to notebook cells properties like its
            kind, execution summary or metadata.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCells.TextContent">
            <summary>
            Changes to the text content of notebook cells.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsStructure">
            <summary>
            Represents changes to the notebook structure to add or remove cells in a <see cref="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCells"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentChangeEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsStructure.Array">
            <summary>
            The change to the cell array.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsStructure.DidOpen">
            <summary>
            Additional opened cell text documents.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsStructure.DidClose">
            <summary>
            Additional closed cell text documents.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsText">
            <summary>
            Changes to the text content of a notebook cell in a <see cref="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCells"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentChangeEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsText.Document">
            <summary>
            Identifier for the document representing the cell
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeCellsText.Changes">
            <summary>
            The changes to the document representing the cell
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeEvent">
            <summary>
            A change event for a notebook document.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentChangeEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeEvent.Metadata">
            <summary>
            The changed metadata, if any.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentChangeEvent.Cells">
            <summary>
            Changes to cells
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentClientCapabilities">
            <summary>
            Capabilities specific to the notebook document support
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentClientCapabilities.Synchronization">
            <summary>
            Capabilities specific to notebook document synchronization
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentFilter">
            <summary>
            A notebook document filter denotes a notebook document by
            different properties.
            <para>
            NOTE: One or more of the properties NotebookType, Scheme and Pattern must be non-null
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentFilter">Language Server Protocol specification</see> for additional information.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentFilter.NotebookType">
            <summary>
            The type of the enclosing notebook. */
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentFilter.Scheme">
            <summary>
            A Uri scheme (<see cref="P:System.Uri.Scheme"/>) like <c>file</c> or <c>untitled</c>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentFilter.Pattern">
            <summary>
            A glob pattern.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentIdentifier">
            <summary>
            A literal to identify a notebook document in the client.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentIdentifier">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentIdentifier.Uri">
            <summary>
            The notebook document's URI.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncCellSelector">
            <summary>
            Specifies languages of cells to be matched in a notebook sync.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentSyncOptions">Language Server Protocol specification</see> for additional information.
            </para>
            <remarks>Since LSP 3.17</remarks>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncClientCapabilities">
            <summary>
            Notebook specific client capabilities
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentSyncClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncClientCapabilities.ExecutionSummarySupport">
            <summary>
            The client supports sending execution summary data per cell.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncClientCapabilities.DynamicRegistration">
            <summary>
            Whether the implementation supports dynamic registration. If this is set to <see langword="true"/>
            the client supports the new <see cref="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncRegistrationOptions"/> and <see cref="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions"/>
            return values for the corresponding server capabilities.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions">
            <summary>
            Options specific to a notebook plus its cells
            to be synced to the server.
            <para>
            If a selector provides a notebook document
            filter but no cell selector all cells of a
            matching notebook document will be synced.
            </para>
            <para>
            If a selector provides no notebook document
            filter but only a cell selector all notebook
            documents that contain at least one matching
            cell will be synced.
            </para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentSyncOptions">Language Server Protocol specification</see> for additional information.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions.NotebookSelector">
            <summary>
            The notebooks to be synced
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions.Save">
            <summary>
            Whether save notification should be forwarded to
            the server. Will only be honored if mode === `notebook`.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncOptions"/> that implements
            <see cref="T:Roslyn.LanguageServer.Protocol.IStaticRegistrationOptions"/>, allowing it to be registered
            with an ID that can be used to unregister it later.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentSyncRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector">
            <summary>
            Matches notebooks and cells to be synced
            <para>
            NOTE: either one or both of the Notebook and Cells properties must be non-null.
            </para>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#notebookDocumentSyncOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector.Notebook">
            <summary>
            The notebook to be synced. If a string
            value is provided it matches against the
            notebook type. '*' matches every notebook.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.NotebookDocumentSyncSelector.Cells">
            <summary>
            The cells of the matching notebook to be synced.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VersionedNotebookDocumentIdentifier">
            <summary>
            A versioned notebook document identifier.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#versionedNotebookDocumentIdentifier">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VersionedNotebookDocumentIdentifier.Version">
            <summary>
            The version number of this notebook document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VersionedNotebookDocumentIdentifier.Uri">
            <summary>
            The notebook document's URI.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.OnTypeFormattingClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/onTypeFormatting` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentOnTypeFormattingClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier">
             <summary>
             Class which represents a text document, but optionally has a version identifier.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#optionalVersionedTextDocumentIdentifier">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier.Version">
            <summary>
            Gets or sets the version of the document.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier.Equals(Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.OptionalVersionedTextDocumentIdentifier.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ParameterInformation">
            <summary>
            Represents a parameter of a callable-signature. A parameter can 
            have a label and documentation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#parameterInformation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ParameterInformation.Label">
            <summary>
            The label of this parameter information.
            <para>
            Either a string or an inclusive start and exclusive end offsets within
            its containing signature label (see <see cref="P:Roslyn.LanguageServer.Protocol.SignatureInformation.Label"/>).
            The offsets are based on a UTF-16 string representation, like <see cref="T:Roslyn.LanguageServer.Protocol.Position"/> and
            <see cref="T:Roslyn.LanguageServer.Protocol.Range"/>.
            </para>
            <para>
            Note*: a label of type <see langword="string"/> should be a substring of its containing
            signature label. Its intended use case is to highlight the parameter
            label part in the <see cref="P:Roslyn.LanguageServer.Protocol.SignatureInformation.Label"/>.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ParameterInformation.Documentation">
            <summary>
            Human-readable documentation of the parameter. Will be shown in the UI but can be omitted.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ParameterInformationSetting">
            <summary>
            Client capabilities specific to <see cref="T:Roslyn.LanguageServer.Protocol.ParameterInformation"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ParameterInformationSetting.LabelOffsetSupport">
            <summary>
            The client supports processing label offsets instead of a simple label string.
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Position">
             <summary>
             Class which represents a position on a text document.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#position">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.Position"/> class.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.Position"/> class.
            </summary>
            <param name="line">Line number.</param>
            <param name="character">Character number.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Position.Line">
            <summary>
            Gets or sets the line number.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Position.Character">
            <summary>
            Gets or sets the character number.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.op_Equality(Roslyn.LanguageServer.Protocol.Position,Roslyn.LanguageServer.Protocol.Position)">
            <summary>
            Overrides default equals operator.  Two positions are equal if they are both null or one of them is the object equivalent of the other.
            </summary>
            <param name="firstPosition">The first position to compare.</param>
            <param name="secondPosition">The second position to compare.</param>
            <returns>True if both positions are null or one of them is the object equivalent of the other, false otherwise.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.op_Inequality(Roslyn.LanguageServer.Protocol.Position,Roslyn.LanguageServer.Protocol.Position)">
            <summary>
            Overrides the default not equals operator.
            </summary>
            <param name="firstPosition">The first position to compare.</param>
            <param name="secondPosition">The second position to compare.</param>
            <returns>True if first and second positions are not equivalent.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.Equals(System.Object)">
            <summary>
            Overrides base class method <see cref="M:System.Object.Equals(System.Object)"/>. Two positions are equal if their line and character are the same.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the given position has the same line and character; false otherwise.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.Equals(Roslyn.LanguageServer.Protocol.Position)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Position.GetHashCode">
            <summary>
            Overrides base class method <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>Hashcode for this object.</returns>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.PositionEncodingKind">
            <summary>
            The encoding used for representing character offsets in documents
            as negotiated between the client and server during initialization
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#positionEncodingKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.PositionEncodingKind.#ctor(System.String)">
            <summary>
            The encoding used for representing character offsets in documents
            as negotiated between the client and server during initialization
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#positionEncodingKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.PositionEncodingKind.UTF8">
            <summary>
            Character offsets count UTF-8 code units (e.g bytes).
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.PositionEncodingKind.UTF16">
            <summary>
            Character offsets count UTF-16 code units.
            <para>
            This is the default and must always be supported by servers
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.PositionEncodingKind.UTF32">
            <summary>
            Character offsets count UTF-32 code units.
            </summary>
            <remarks> Implementation note: these are the same as Unicode code points, so
            this <see cref="T:Roslyn.LanguageServer.Protocol.PositionEncodingKind"/> may also be used for an encoding-agnostic
            representation of character offsets.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.PrepareRenameParams">
            <summary>
            Class representing the parameters for the 'textDocument/prepareRename' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#prepareRenameParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.12</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PrepareRenameParams.TextDocument">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PrepareRenameParams.Position">
            <summary>
            The position in which the rename is requested.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PrepareRenameParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.PrepareSupportDefaultBehavior">
            <summary>
            Enum representing the default behavior used by the client for computing a rename range.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#prepareSupportDefaultBehavior">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.PrepareSupportDefaultBehavior.Identifier">
            <summary>
            The client's default behavior is to select the identifier according to the language's syntax rule.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.PreviousResultId">
            <summary>
            Class representing a previous result id in a 'workspace/diagnostic' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#previousResultId">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PreviousResultId.Uri">
            <summary>
            Gets or sets the URI for which the client knows a result id.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PreviousResultId.Value">
            <summary>
            Gets or sets the value of the previous result id.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.PublishDiagnosticParams">
             <summary>
             Class which represents the parameter that's sent with 'textDocument/publishDiagnostics' messages.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#publishDiagnosticsParams">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticParams.Uri">
            <summary>
            Gets or sets the URI of the text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticParams.Version">
            <summary>
            Optional version number of the document for which the diagnostics are published
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticParams.Diagnostics">
            <summary>
            Gets or sets the collection of diagnostics.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.PublishDiagnosticsSetting">
            <summary>
            Client capabilities specific to the <c>textDocument/publishDiagnostics</c> notification
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#publishDiagnosticsClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticsSetting.RelatedInformation">
            <summary>
            Whether the client supports the <see cref="P:Roslyn.LanguageServer.Protocol.Diagnostic.RelatedInformation"/> property.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticsSetting.TagSupport">
            <summary>
            Client supports the <see cref="P:Roslyn.LanguageServer.Protocol.Diagnostic.Tags"/> property to provide meta data about a diagnostic.
            <para>
            Clients supporting tags have to handle unknown tags gracefully.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticsSetting.VersionSupport">
            <summary>
            Whether the client interprets the <see cref="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticParams.Version"/> property
            of the <c>textDocument/publishDiagnostics</c> notification's parameter.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticsSetting.CodeDescriptionSupport">
            <summary>
            Whether the client supports the <see cref="P:Roslyn.LanguageServer.Protocol.Diagnostic.CodeDescription"/> property.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.PublishDiagnosticsSetting.DataSupport">
            <summary>
            Whether the client supports propagating the <see cref="P:Roslyn.LanguageServer.Protocol.Diagnostic.Data"/> property from
            a <c>textDocument/publishDiagnostics</c> notification to a <c>textDocument/codeAction</c> request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Range">
             <summary>
             Class which represents a text document text range.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#range">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Range.Start">
            <summary>
            Gets or sets the text start position.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Range.End">
            <summary>
            Gets or sets the text end position.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Range.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Range.Equals(Roslyn.LanguageServer.Protocol.Range)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.Range.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RangeFormattingClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/rangeFormatting` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#documentRangeFormattingClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Registration">
             <summary>
             Class representing the general registration information for registering for a capability.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#registration">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Registration.Id">
            <summary>
            Gets or sets the id used to register the request. This can be used to deregister later.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Registration.Method">
            <summary>
            Gets or sets the method / capability to register for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Registration.RegisterOptions">
            <summary>
            Gets or sets the options necessary for registration.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RegistrationParams">
             <summary>
             Class representing the parameters sent for the client/registerCapability request.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#registrationParams">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RegistrationParams.Registrations">
            <summary>
            Gets or sets the set of capabilities that are being registered.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RegularExpressionsClientCapabilities">
            <summary>
            Describes the client's regular expression engine
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#regExp">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RegularExpressionsClientCapabilities.Engine">
            <summary>
            The name of the regular expression engine.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RegularExpressionsClientCapabilities.Version">
            <summary>
            The version of the regular expression engine.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RelatedFullDocumentDiagnosticReport">
            <summary>
            Class representing a full diagnostic report with a set of related documents.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#relatedFullDocumentDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RelatedFullDocumentDiagnosticReport.RelatedDocuments">
            <summary>
            Diagnostics of related documents.
            <para>
            </para>
            This information is useful in programming languages where code in a
            file A can generate diagnostics in a file B which A depends on. An
            example of such a language is C/C++ where macro definitions in a file
            a.cpp can result in errors in a header file b.hpp.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RelatedUnchangedDocumentDiagnosticReport">
            <summary>
            Class representing an unchanged diagnostic report with a set of related documents.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#relatedUnchangedDocumentDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RelatedUnchangedDocumentDiagnosticReport.RelatedDocuments">
            <summary>
            Diagnostics of related documents.
            <para>
            </para>
            This information is useful in programming languages where code in a
            file A can generate diagnostics in a file B which A depends on. An
            example of such a language is C/C++ where macro definitions in a file
            a.cpp can result in errors in a header file b.hpp.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameClientCapabilities">
            <summary>
            Class which represents renaming client capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameClientCapabilities.PrepareSupport">
            <summary>
            Gets or sets a value indicating whether the client supports testing for validity of rename operations before execution.
            </summary>
            <remarks>Since LSP 3.12</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameClientCapabilities.PrepareSupportDefaultBehavior">
            <summary>
            Gets or sets the value indicating the default behavior used by the client when the
            <see cref="P:Roslyn.LanguageServer.Protocol.DefaultBehaviorPrepareRename.DefaultBehavior"/> result is used in the 'textDocument/prepareRename' request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameClientCapabilities.HonorsChangeAnnotations">
            <summary>
            Whether the client honors the change annotations in text edits and resource
            operations returned via the rename request's workspace edit, by for example presenting the workspace edit in
            the user interface and asking for confirmation.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameFile">
            <summary>
            Class representing a rename file operation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameFile">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFile.Kind">
            <summary>
            Gets the kind value.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFile.OldUri">
            <summary>
            Gets or sets the old (existing) location.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFile.NewUri">
            <summary>
            Gets or sets the new location.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFile.Options">
            <summary>
            Gets or sets the rename options.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFile.AnnotationId">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameFileOptions">
            <summary>
            Class representing the options for a create file operation.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameFileOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFileOptions.Overwrite">
            <summary>
            Gets or sets a value indicating whether the rename should overwrite the target if it already exists. (Overwrite wins over ignoreIfExists).
            </summary>
            <remarks>
            <see cref="P:Roslyn.LanguageServer.Protocol.RenameFileOptions.Overwrite"/> wins over <see cref="P:Roslyn.LanguageServer.Protocol.RenameFileOptions.IgnoreIfExists"/>.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameFileOptions.IgnoreIfExists">
            <summary>
            Gets or sets a value indicating whether the action should be ignored if the file already exists.
            </summary>
            <remarks>
            <see cref="P:Roslyn.LanguageServer.Protocol.RenameFileOptions.Overwrite"/> wins over <see cref="P:Roslyn.LanguageServer.Protocol.RenameFileOptions.IgnoreIfExists"/>.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameOptions">
            <summary>
            Class representing the rename options for server capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameOptions.PrepareProvider">
            <summary>
            Gets or sets a value indicating whether renames should be checked and tested before being executed.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameParams">
            <summary>
            Class representing the rename parameters for the textDocument/rename request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameParams.NewName">
            <summary>
            The new name of the symbol. If the given name is not valid the
            request must return a ResponseError with an
            appropriate message set.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameRange">
            <summary>
            Class which represents a possible result value of the 'textDocument/prepareRename' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_prepareRename">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.12</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameRange.Range">
            <summary>
            Gets or sets the range of the string to rename.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameRange.Placeholder">
            <summary>
            Gets or sets the placeholder text of the string content to be renamed.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.RenameRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.RenameOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#renameRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.RenameRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ResolveSupportSetting">
            <summary>
            Indicates which properties a client can resolve lazily on a <see cref="T:Roslyn.LanguageServer.Protocol.CompletionItem"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#completionClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ResolveSupportSetting.Properties">
            <summary>
            Gets or sets a value indicating the properties that a client can resolve lazily.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ResourceOperationKind">
            <summary>
            Value representing the kind of resource operations supported by the client.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#resourceOperationKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.ResourceOperationKind.#ctor(System.String)">
            <summary>
            Value representing the kind of resource operations supported by the client.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#resourceOperationKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.ResourceOperationKind.Create">
            <summary>
            Supports creating new files and folders.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.ResourceOperationKind.Rename">
            <summary>
            Supports renaming existing files and folders.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.ResourceOperationKind.Delete">
            <summary>
            Supports deleting existing files and folders.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SaveOptions">
            <summary>
            Class which represents save option configurations.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#saveOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SaveOptions.IncludeText">
            <summary>
            Gets or sets a value indicating whether clients include text content on save.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SelectionRange">
            <summary>
            A selection range is a range around the cursor position which the user might be interested in selecting.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#selectionRangeRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRange.Range">
            <summary>
            The range of the selection range
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRange.Parent">
            <summary>
            The parent selection range containing this range.
            <para>
            <c>Parent.Range</c> must contain <c>this.Range</c>.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SelectionRangeClientCapabilities">
            <summary>
            Capabilities specific to the `textDocument/selectionRange` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#selectionRangeClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SelectionRangeOptions">
            <summary>
            Server capabilities specific to Selection Range.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#selectionRangeOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeOptions.WorkDoneProgress">
            <summary>
            Gets or sets a value indicating whether work done progress is supported.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SelectionRangeParams">
            <summary>
            Class representing the parameter for the 'textDocument/selectionRange' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#foldingRangeParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeParams.TextDocument">
            <summary>
            The text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeParams.Positions">
            <summary>
            The positions inside the text document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SelectionRangeRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.DeclarationOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#selectionRangeRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SelectionRangeRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokenFormat">
            <summary>
            Value representing the format used to describe semantic tokens.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#tokenFormat">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SemanticTokenFormat.#ctor(System.String)">
            <summary>
            Value representing the format used to describe semantic tokens.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#tokenFormat">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenFormat.Relative">
            <summary>
            Tokens are described using relative positions.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers">
            <summary>
            Well-known semantic token modifiers.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokenModifiers">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Declaration">
            <summary>
            Semantic token modifier for 'declaration'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Definition">
            <summary>
            Semantic token modifier for 'definition'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Readonly">
            <summary>
            Semantic token modifier for 'readonly'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Static">
            <summary>
            Semantic token modifier for 'static'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Deprecated">
            <summary>
            Semantic token modifier for 'deprecated'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Abstract">
            <summary>
            Semantic token modifier for 'abstract'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Async">
            <summary>
            Semantic token modifier for 'async'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Modification">
            <summary>
            Semantic token modifier for 'modification'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.Documentation">
            <summary>
            Semantic token modifier for 'documentation'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.DefaultLibrary">
            <summary>
            Semantic token modifier for 'defaultLibrary'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenModifiers.AllModifiers">
            <summary>
            Collection containing all well-known semantic tokens modifiers.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokens">
            <summary>
            Class representing response to semantic tokens messages.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokens">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokens.ResultId">
            <summary>
            An optional result id.
            <para>
            If provided and clients support delta updating the client will include the
            result id in the next semantic token request. A server can then instead of
            computing all semantic tokens again simply send a delta.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokens.Data">
            <summary>
            Gets or sets and array containing encoded semantic tokens data.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensDelta">
            <summary>
            Represents a response from a semantic tokens Document provider Edits request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensDelta">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDelta.ResultId">
            <summary>
            The ID of this result, which can then be used as a base for future deltas.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDelta.Edits">
            <summary>
            Gets or sets an array of edits to apply to a previous response from a
            semantic tokens Document provider.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaParams">
            <summary>
            Parameters for 'textDocument/semanticTokens/full/delta' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensDeltaParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaParams.TextDocument">
            <summary>
            Gets or sets an identifier for the document to fetch semantic tokens from.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaParams.PreviousResultId">
            <summary>
            The result id of a previous response. The result Id can either point to
            a full response or a delta response depending on what was received last.
            The delta should be relative to this previous response.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaPartialResult">
            <summary>
            Represents a response from a semantic tokens Document provider Edits request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensDeltaPartialResult">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensDeltaPartialResult.Edits">
            <summary>
            The semantic token edits to transform a previous result into a new result.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensEdit">
            <summary>
            Class representing an individual edit incrementally applied to a previous
            semantic tokens response from the Document provider.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensEdit">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensEdit.Start">
            <summary>
            Gets or sets the position in the previous response's <see cref="P:Roslyn.LanguageServer.Protocol.SemanticTokens.Data"/>
            to begin the edit.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensEdit.DeleteCount">
            <summary>
            Gets or sets the number of numbers to delete in the <see cref="P:Roslyn.LanguageServer.Protocol.SemanticTokens.Data"/>
            from the previous response.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensEdit.Data">
            <summary>
            Gets or sets an array containing the encoded semantic tokens information to insert
            into a previous response.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SemanticTokensEdit.CompareTo(Roslyn.LanguageServer.Protocol.SemanticTokensEdit)">
            <summary>
            Compares two <see cref="T:Roslyn.LanguageServer.Protocol.SemanticTokensEdit"/>s based on their order.
            </summary>
            <param name="other">The other edit.</param>
            <returns>-1 if this item comes first and 1 if it comes second.</returns>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensFullOptions">
            <summary>
            Options for the full document semantic tokens classification provider.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensFullOptions.Delta">
            <summary>
            Gets or sets a value indicating whether the server supports deltas for full documents.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensLegend">
            <summary>
            Legend used by the server to describe how it encodes semantic token types in <see cref="P:Roslyn.LanguageServer.Protocol.SemanticTokens.Data"/>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensLegend">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensLegend.TokenTypes">
            <summary>.
            The semantic token types the server uses. Indices into this array are used to encode token types in semantic tokens responses.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensLegend.TokenModifiers">
            <summary>
            The semantic token modifiers the server uses. Indices into this array are used to encode modifiers in semantic tokens responses.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensOptions">
            <summary>
            Initialization options for semantic tokens support.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensOptions.Legend">
            <summary>
            Gets or sets a legend describing how semantic token types and modifiers are encoded in responses.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensOptions.Range">
            <summary>
            Gets or sets a value indicating whether semantic tokens Range provider requests are supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensOptions.Full">
            <summary>
            Gets or sets whether or not the server supports providing semantic tokens for a full document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensParams">
            <summary>
            Parameters for 'textDocument/semanticTokens/full' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensParams.TextDocument">
            <summary>
            Gets or sets an identifier for the document to fetch semantic tokens from.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensPartialResult">
            <summary>
            Class representing response to semantic tokens messages.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensPartialResult">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensPartialResult.Data">
            <summary>
            Gets or sets and array containing encoded semantic tokens data.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensRangeParams">
            <summary>
            Parameters for 'textDocument/semanticTokens/range' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensRangeParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRangeParams.TextDocument">
            <summary>
            Gets or sets an identifier for the document to fetch semantic tokens from.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRangeParams.Range">
            <summary>
            Gets or sets the range within the document to fetch semantic tokens for.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRangeParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRangeParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensRegistrationOptions">
             <summary>
             Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.SemanticTokensOptions"/> that allows scoping the registration.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensRegistrationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
             <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRegistrationOptions.DocumentSelector">
            <summary>
            A document selector to identify the scope of the registration. If set to
            null the document selector provided on the client side will be used.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRegistrationOptions.Id">
            <summary>
            The id used to register the request. The id can be used to deregister the request again.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsFullSetting">
            <summary>
            Client capabilities specific to the <c>textDocument/semanticTokens/full</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsFullSetting.Delta">
            <summary>
            Gets or sets a value indicating whether the client will send the
            <c>textDocument/semanticTokens/full/delta</c> request if the server
            provides a corresponding handler.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsSetting">
            <summary>
            Represents which semantic token requests are supported by the client.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsSetting.Range">
            <summary>
            The client will send the <c>textDocument/semanticTokens/range</c> request
            if the server provides a corresponding handler.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsSetting.Full">
            <summary>
            The client will send the <c>textDocument/semanticTokens/full</c> request
            if the server provides a corresponding handler.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensSetting">
            <summary>
            Client capabilities for semantic tokens.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.Requests">
            <summary>
            Which requests the client supports and might send to the server
            depending on the server's capability.
            </summary>
            <remarks>
            Please note that clients might not
            show semantic tokens or degrade some of the user experience if a range
            or full request is advertised by the client but not provided by the
            server. If for example the client capability <see cref="P:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsSetting.Full"/>
            and <see cref="P:Roslyn.LanguageServer.Protocol.SemanticTokensRequestsSetting.Range"/> are both set to true
            but the server only provides a  range provider the client might not
            render a minimap correctly or might even decide to not show any
            semantic tokens at all.
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.TokenTypes">
            <summary>
            Gets or sets an array of token types supported by the client for encoding
            semantic tokens.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.TokenModifiers">
            <summary>
            Gets or sets an array of token modifiers supported by the client for encoding
            semantic tokens.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.Formats">
            <summary>
            Gets or sets an array of formats the clients supports.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.OverlappingTokenSupport">
            <summary>
            Gets or sets a value indicating whether the client supports tokens that can overlap each other.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.MultilineTokenSupport">
            <summary>
            Gets or sets a value indicating whether the client supports tokens that can span multiple lines.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.ServerCancelSupport">
            <summary>
            Whether the client allows the server to actively cancel a
            semantic token request, e.g. supports returning
            ErrorCodes.ServerCancelled.
            <para>
            If a server does the client needs to retrigger the request.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensSetting.AugmentsSyntaxTokens">
            <summary>
            Whether the client uses semantic tokens to augment existing
            syntax tokens. If set to <see langword="true"/> client side created syntax
            tokens and semantic tokens are both used for colorization. If
            set to <see langword="false"/> the client only uses the returned semantic tokens
            for colorization.
            <para>
            If the value is <see langword="null"/> then the client behavior is not
            specified.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokensWorkspaceSetting">
            <summary>
            Capabilities specific to the semantic token requests scoped to the workspace.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokensWorkspaceClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SemanticTokensWorkspaceSetting.RefreshSupport">
            <summary>
            Gets or sets a value indicating whether the client implementation
            supports a refresh request sent from the server to the client.
            </summary>
            <remarks>
            Note that this event is global and will force the client to refresh all
            semantic tokens currently shown. It should be used with absolute care
            and is useful for situation where a server for example detect a project
            wide change that requires such a calculation.
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SemanticTokenTypes">
            <summary>
            Well-known semantic tokens types.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#semanticTokenTypes">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Namespace">
            <summary>
            Semantic token modifier for 'namespace'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Type">
            <summary>
            Represents a generic type. Acts as a fallback for types which
            can't be mapped to a specific type like class or enum
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Class">
            <summary>
            Semantic token modifier for 'class'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Enum">
            <summary>
            Semantic token modifier for 'enum'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Interface">
            <summary>
            Semantic token modifier for 'interface'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Struct">
            <summary>
            Semantic token modifier for 'struct'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.TypeParameter">
            <summary>
            Semantic token modifier for 'typeParameter'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Parameter">
            <summary>
            Semantic token modifier for 'parameter'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Variable">
            <summary>
            Semantic token modifier for 'variable'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Property">
            <summary>
            Semantic token modifier for 'property'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.EnumMember">
            <summary>
            Semantic token modifier for 'enumMember'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Event">
            <summary>
            Semantic token modifier for 'event'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Function">
            <summary>
            Semantic token modifier for 'function'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Method">
            <summary>
            Semantic token modifier for 'method'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Macro">
            <summary>
            Semantic token modifier for 'macro'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Keyword">
            <summary>
            Semantic token modifier for 'keyword'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Modifier">
            <summary>
            Semantic token modifier for 'modifier'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Comment">
            <summary>
            Semantic token modifier for 'comment'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.String">
            <summary>
            Semantic token modifier for 'string'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Number">
            <summary>
            Semantic token modifier for 'number'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Regexp">
            <summary>
            Semantic token modifier for 'regexp'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Operator">
            <summary>
            Semantic token modifier for 'operator'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.Decorator">
            <summary>
            Semantic token modifier for 'decorator'.
            </summary>
            <remarks>Sicne LSP 3.17</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SemanticTokenTypes.AllTypes">
            <summary>
            Collection containing all well-known semantic tokens types.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ServerCapabilities">
            <summary>
            Class which represents server capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#serverCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.PositionEncoding">
             <summary>
             The position encoding the server picked from the encodings offered
             by the client via the client capability `general.positionEncodings`.
            <para>
             If the client didn't provide any position encodings the only valid
             value that a server can return is 'utf-16'.
             If omitted it defaults to 'utf-16'.
            </para>
             </summary>
             <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.TextDocumentSync">
            <summary>
            Gets or sets the value which indicates how text document are synced.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.NotebookDocumentSync">
            <summary>
            Defines how notebook documents are synced.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.CompletionProvider">
            <summary>
            The server provides completion support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.HoverProvider">
            <summary>
            The server provides hover support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.SignatureHelpProvider">
            <summary>
            The server provides signature help support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DeclarationProvider">
            <summary>
            The server provides Go to Declaration support.
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DefinitionProvider">
            <summary>
            The server provides Go to Definition support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.TypeDefinitionProvider">
            <summary>
            The server provides Go to Type Definition support.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.ImplementationProvider">
            <summary>
            The server provides Go to Implementation support.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.ReferencesProvider">
            <summary>
            The server provides Find References support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentHighlightProvider">
            <summary>
            The server provides Document Highlight support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentSymbolProvider">
            <summary>
            The server provides Document Symbols support.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.CodeActionProvider">
            <summary>
            The server provides code actions. The <see cref="T:Roslyn.LanguageServer.Protocol.CodeActionOptions"/> return type is
            only valid if the client signals code action literal support via the
            property <see cref="P:Roslyn.LanguageServer.Protocol.CodeActionSetting.CodeActionLiteralSupport"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.CodeLensProvider">
            <summary>
            Gets or sets the value which indicates if code lens is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentLinkProvider">
            <summary>
            Gets or sets the value which indicates if document link is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentColorProvider">
            <summary>
            Gets or sets the value which indicates if document color is supported.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentFormattingProvider">
            <summary>
            Gets or sets a value indicating whether document formatting is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentRangeFormattingProvider">
            <summary>
            Gets or sets a value indicating whether document range formatting is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DocumentOnTypeFormattingProvider">
            <summary>
            Gets or sets the value which indicates if document on type formatting is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.RenameProvider">
            <summary>
            Gets or sets a value indicating whether rename is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.FoldingRangeProvider">
            <summary>
            Gets or sets the value which indicates if folding range is supported.
            </summary>
            <remarks>Since LSP 3.10</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.ExecuteCommandProvider">
            <summary>
            Gets or sets the value which indicates if execute command is supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.SelectionRangeProvider">
            <summary>
            The server provides selection range support.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.LinkedEditingRangeProvider">
            <summary>
            Gets or sets a value indicating whether the server supports linked editing range.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.CallHierarchyProvider">
            <summary>
            The server provides call hierarchy support.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.SemanticTokensOptions">
            <summary>
            Gets or sets the value which indicates if semantic tokens is supported.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.MonikerProvider">
            <summary>
            Whether server provides moniker support.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.TypeHierarchyProvider">
            <summary>
            The server provides type hierarchy support.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.InlineValueProvider">
            <summary>
            The server provides inline values.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.InlayHintOptions">
            <summary>
            Gets or sets the value which indicates what support the server has for inlay hints.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.DiagnosticOptions">
            <summary>
            Gets or sets the value which indicates what support the server has for pull diagnostics.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.WorkspaceSymbolProvider">
            <summary>
            Gets or sets a value indicating whether workspace symbols are supported.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.Workspace">
            <summary>
            Workspace specific server capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerCapabilities.Experimental">
            <summary>
            Gets or sets experimental server capabilities.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ServerInfo">
            <summary>
            Information about the server name and version
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerInfo.Name">
            <summary>
            The server name
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ServerInfo.Version">
            <summary>
            The server version
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SetTraceParams">
            <summary>
            Class representing the parameters for the $/setTrace notification.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#setTrace">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SetTraceParams.Value">
            <summary>
            The new value that should be assigned to the trace setting.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ShowDocumentClientCapabilities">
            <summary>
            Client capabilities for the 'window/showDocument' request
            </summary>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_showDocument">Language Server Protocol specification</see> for additional information.
            </para>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowDocumentClientCapabilities.Support">
            <summary>
            The client has support for the show document request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ShowDocumentParams">
            <summary>
            Params for the 'windows/showDocument' request
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#showDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowDocumentParams.Uri">
            <summary>
            The uri to show.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowDocumentParams.External">
            <summary>
            Indicates whether to show the resource in an external program.
            <para>
            To show, for example, <c>https://code.visualstudio.com/</c> in the default
            web browser, set <see cref="P:Roslyn.LanguageServer.Protocol.ShowDocumentParams.External"/> to <see langword="true"/>.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowDocumentParams.TakeFocus">
            <summary>
            Optionally indicates whether the editor showing the document should take focus or not.
            <para>
            Clients might ignore this property if an external program is started.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowDocumentParams.Selection">
            <summary>
            An optional selection range if the document is a text document.
            <para>
            Clients might ignore the property if an external program is started or the file is not a text file.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ShowDocumentResult">
            <summary>
            The result of a 'windows/showDocument' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#showDocumentResult">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowDocumentResult.Success">
            <summary>
            Indicates whether the show was successful.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ShowMessageParams">
            <summary>
            The parameters sent with window/showMessage requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_showMessage">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowMessageParams.MessageType">
            <summary>
            Gets or sets the type of message.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowMessageParams.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ShowMessageRequestClientCapabilities">
            <summary>
            Capabilities specific to the 'window/showMessage' request
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_showMessageRequest">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowMessageRequestClientCapabilities.MessageActionItem">
            <summary>
            Capabilities specific to the `MessageActionItem` type
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.ShowMessageRequestParams">
            <summary>
            Class which represents parameter sent with window/showMessageRequest requests.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#showMessageRequestParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.ShowMessageRequestParams.Actions">
            <summary>
            Gets or sets an array of <see cref="T:Roslyn.LanguageServer.Protocol.MessageActionItem"/>s to present.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelp">
            <summary>
            Class representing the signature of something callable. This class is returned from the textDocument/signatureHelp request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelp">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelp.Signatures">
            <summary>
            One or more signatures.
            <para>
            If no signatures are available the signature help
            request should return <see langword="null"/>.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelp.ActiveSignature">
            <summary>
            The active signature.
            <para>
            </para>
            If omitted or the value lies outside the range of <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelp.Signatures"/> the
            value defaults to zero or is ignored if the <see cref="T:Roslyn.LanguageServer.Protocol.SignatureHelp"/> has no signatures.
            <para>
            Whenever possible implementors should make an active decision about
            the active signature and shouldn't rely on a default value.
            </para>
            <para>
            In a future version of the protocol this property might become
            mandatory to better express this.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelp.ActiveParameter">
            <summary>
            The active parameter of the active signature.
            <para>
            If omitted or the value lies outside the range of <c>Signatures[ActiveSignature].Parameters</c>
            it defaults to 0 if the active signature has parameters.
            If the active signature has no parameters it is ignored.
            </para>
            <para>
            In a future version of the protocol this property might become
            mandatory to better express the active parameter if the active
            signature has any parameters.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelpContext">
            <summary>
            Class representing additional information about the context in which a signature help request is triggered.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpContext">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpContext.TriggerKind">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.SignatureHelpTriggerKind"/> indicating how the signature help was triggered.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpContext.TriggerCharacter">
            <summary>
            Gets or sets the character that caused signature help to be triggered.
            <para>
            This is defined when <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelpContext.TriggerCharacter"/> when is not
            <see cref="F:Roslyn.LanguageServer.Protocol.SignatureHelpTriggerKind.TriggerCharacter"/>.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpContext.IsRetrigger">
            <summary>
            Gets or sets a value indicating whether signature help was already showing when it was triggered.
            <para>
            Retriggers occur when the signature help is already active and can be 
            caused by actions such as typing a trigger character, a cursor move, or 
            document content changes.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpContext.ActiveSignatureHelp">
            <summary>
            The currently active <see cref="T:Roslyn.LanguageServer.Protocol.SignatureHelp"/>.
            <para>
            The <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelpContext.ActiveSignatureHelp"/> has its <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelp.ActiveSignature"/>
            updated based on the user navigating through available signatures.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelpOptions">
            <summary>
            Class representing the options for signature help support.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpOptions.TriggerCharacters">
            <summary>
            Gets or sets the characters that trigger signature help automatically.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpOptions.RetriggerCharacters">
            <summary>
            Gets or sets the characters that re-trigger signature help
            when signature help is already showing.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelpParams">
            <summary>
            Class representing the parameters for the textDocument/signatureHelp request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpParams.Context">
            <summary>
            The signature help context.
            <para>
            This is only available if the client specifies the client
            capability <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelpSetting.ContextSupport"/>
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelpRegistrationOptions">
            <summary>
            Subclass of <see cref="T:Roslyn.LanguageServer.Protocol.SignatureHelpOptions"/> that allows scoping the registration.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpRegistrationOptions.DocumentSelector">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelpSetting">
            <summary>
            Client capabilities specific to the `textDocument/signatureHelp` request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpSetting.SignatureInformation">
            <summary>
            Client capabilities specific to <see cref="T:Roslyn.LanguageServer.Protocol.SignatureInformation"/>.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureHelpSetting.ContextSupport">
            <summary>
            The client supports sending additional context information for
            the <c>textDocument/signatureHelp</c> request.
            <para>
            A client that opts into this will also support <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelpOptions.RetriggerCharacters"/>.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureHelpTriggerKind">
            <summary>
            Enum which represents the various ways in which completion can be triggered.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpTriggerKind">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SignatureHelpTriggerKind.Invoked">
            <summary>
            Signature help was invoked manually by the user or a command.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SignatureHelpTriggerKind.TriggerCharacter">
            <summary>
            Signature help was triggered by a trigger character.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SignatureHelpTriggerKind.ContentChange">
            <summary>
            Signature help was triggered by the cursor moving or by the document content changing.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureInformation">
            <summary>
            Class representing a single signature of a callable item.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureInformation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformation.Label">
            <summary>
            The label of this signature. Will be shown in the UI.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformation.Documentation">
            <summary>
            The human-readable documentation of this signature.
            Will be shown in the UI but can be omitted.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformation.Parameters">
            <summary>
            Gets or sets the parameters of this signature.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformation.ActiveParameter">
            <summary>
            The index of the active parameter.
            <para>
            If provided, this is used in place of <see cref="P:Roslyn.LanguageServer.Protocol.SignatureHelp.ActiveParameter"/>.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SignatureInformationSetting">
            <summary>
            Class representing the signature information initialization setting.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#signatureHelpClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformationSetting.DocumentationFormat">
            <summary>
            The client supports the following content formats for the <see cref="P:Roslyn.LanguageServer.Protocol.SignatureInformation.Documentation"/>
            property. The order describes the preferred format of the client.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformationSetting.ParameterInformation">
            <summary>
            Client capabilities specific to <see cref="P:Roslyn.LanguageServer.Protocol.SignatureInformationSetting.ParameterInformation"/>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SignatureInformationSetting.ActiveParameterSupport">
            <summary>
            The client supports the <see cref="P:Roslyn.LanguageServer.Protocol.SignatureInformation.ActiveParameter"/> property
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.StaleRequestSupport">
            <summary>
            Describes how the client handles stale requests
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.StaleRequestSupport.Cancel">
            <summary>
            The client will actively cancel the request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.StaleRequestSupport.RetryOnContentModified">
            <summary>
            The list of requests for which the client
            will retry the request if it receives a
            response with error code `ContentModified`
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SumType`2">
            <summary>
            Struct that may contain a <typeparamref name="T1"/> or a <typeparamref name="T2"/>.
            </summary>
            <typeparam name="T1">The first type this struct is designed to contain.</typeparam>
            <typeparam name="T2">The second type this struct is designed to contain.</typeparam>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> struct containing a <typeparamref name="T1"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> struct containing a <typeparamref name="T2"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`2.Value">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`2.First">
            <summary>
            Gets the value as the first specified type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`2.Second">
            <summary>
            Gets the value as the second specified type.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.op_Implicit(`0)~Roslyn.LanguageServer.Protocol.SumType{`0,`1}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T1"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.op_Implicit(`0)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T1??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.op_Implicit(`1)~Roslyn.LanguageServer.Protocol.SumType{`0,`1}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T2"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.op_Implicit(`1)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T2??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1})~`0">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> to an instance of <typeparamref name="T1"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> does not contain an instance of <typeparamref name="T1"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1})~`1">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> to an instance of <typeparamref name="T2"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> does not contain an instance of <typeparamref name="T2"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.TryGetFirst(`0@)">
            <summary>
            Tries to get the value as the first specified type.
            </summary>
            <param name="value">the value in the specified type.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.TryGetSecond(`1@)">
            <summary>
            Tries to get the value as the second specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{``0})">
            <summary>
            Runs a delegate corresponding to which type is contained inside this instance.
            </summary>
            <typeparam name="TResult">The type that all the delegates will return.</typeparam>
            <param name="firstMatch">Delegate to handle the case where this instance contains a <typeparamref name="T1"/>.</param>
            <param name="secondMatch">Delegate to handle the case where this instance contains a <typeparamref name="T2"/>.</param>
            <param name="defaultMatch">
            Delegate to handle the case where this instance is uninhabited. If this delegate isn't provided the default
            <typeparamref name="TResult"/> will be returned instead.
            </param>
            <returns>The <typeparamref name="TResult"/> instance created by the delegate corresponding to the current type stored in this instance.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.Equals(Roslyn.LanguageServer.Protocol.SumType{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SumType`3">
            <summary>
            Struct that may contain a <typeparamref name="T1"/>, a <typeparamref name="T2"/>, or a <typeparamref name="T3"/>.
            </summary>
            <typeparam name="T1">The first type this struct is designed to contain.</typeparam>
            <typeparam name="T2">The second type this struct is designed to contain.</typeparam>
            <typeparam name="T3">The third type this struct is designed to contain.</typeparam>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> struct containing a <typeparamref name="T1"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> struct containing a <typeparamref name="T2"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> struct containing a <typeparamref name="T3"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`3.Value">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`3.First">
            <summary>
            Gets the value as the first specified type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`3.Second">
            <summary>
            Gets the value as the second specified type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`3.Third">
            <summary>
            Gets the value as the third specified type.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(`0)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T1"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(`0)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T1??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(`1)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T2"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(`1)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T2??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(`2)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T3"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(`2)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T3??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Implicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1})~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}">
            <summary>
            Implicitly wraps an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="sum">Sum instance to wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2})~Roslyn.LanguageServer.Protocol.SumType{`0,`1}">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> into a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.
            </summary>
            <param name="sum">Sum instance to downcast.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2})~`0">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> to an instance of <typeparamref name="T1"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> does not contain an instance of <typeparamref name="T1"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2})~`1">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> to an instance of <typeparamref name="T2"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> does not contain an instance of <typeparamref name="T2"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2})~`2">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> to an instance of <typeparamref name="T3"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> does not contain an instance of <typeparamref name="T3"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.TryGetFirst(`0@)">
            <summary>
            Tries to get the value as the first specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.TryGetSecond(`1@)">
            <summary>
            Tries to get the value as the second specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.TryGetThird(`2@)">
            <summary>
            Tries to get the value as the third specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{``0})">
            <summary>
            Runs a delegate corresponding to which type is contained inside this instance.
            </summary>
            <typeparam name="TResult">The type that all the delegates will return.</typeparam>
            <param name="firstMatch">Delegate to handle the case where this instance contains a <typeparamref name="T1"/>.</param>
            <param name="secondMatch">Delegate to handle the case where this instance contains a <typeparamref name="T2"/>.</param>
            <param name="thirdMatch">Delegate to handle the case where this instance contains a <typeparamref name="T3"/>.</param>
            <param name="defaultMatch">
            Delegate to handle the case where this instance is uninhabited. If this delegate isn't provided the default
            <typeparamref name="TResult"/> will be returned instead.
            </param>
            <returns>The <typeparamref name="TResult"/> instance created by the delegate corresponding to the current type stored in this instance.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.Equals(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SumType`4">
            <summary>
            Struct that may contain a <typeparamref name="T1"/>, a <typeparamref name="T2"/>, a <typeparamref name="T3"/>, or a <typeparamref name="T4"/>.
            </summary>
            <typeparam name="T1">The first type this struct is designed to contain.</typeparam>
            <typeparam name="T2">The second type this struct is designed to contain.</typeparam>
            <typeparam name="T3">The third type this struct is designed to contain.</typeparam>
            <typeparam name="T4">The fourth type this struct is designed to contain.</typeparam>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> struct containing a <typeparamref name="T1"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> struct containing a <typeparamref name="T2"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> struct containing a <typeparamref name="T3"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.#ctor(`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> struct containing a <typeparamref name="T4"/>.
            </summary>
            <param name="val">The value to store in the <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.</param>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`4.Value">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`4.First">
            <summary>
            Gets the value as the first specified type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`4.Second">
            <summary>
            Gets the value as the second specified type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`4.Third">
            <summary>
            Gets the value as the third specified type.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SumType`4.Fourth">
            <summary>
            Gets the value as the fourth specified type.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`0)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T1"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`0)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T1??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`1)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T2"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`1)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T2??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`2)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T3"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`2)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T3??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`3)~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T4"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(`3)~System.Nullable{Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}}">
            <summary>
            Implicitly wraps a value of type <typeparamref name="T4??"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="val">Value to be wrapped.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1})~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}">
            <summary>
            Implicitly wraps an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="sum">Sum instance to wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Implicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2})~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3}">
            <summary>
            Implicitly wraps an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/> with a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/>.
            </summary>
            <param name="sum">Sum instance to wrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})~Roslyn.LanguageServer.Protocol.SumType{`0,`1}">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> into a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`2"/>.
            </summary>
            <param name="sum">Sum instance to downcast.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})~Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2}">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> into a <see cref="T:Roslyn.LanguageServer.Protocol.SumType`3"/>.
            </summary>
            <param name="sum">Sum instance to downcast.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})~`0">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> to an instance of <typeparamref name="T1"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> does not contain an instance of <typeparamref name="T1"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})~`1">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> to an instance of <typeparamref name="T2"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> does not contain an instance of <typeparamref name="T2"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})~`2">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> to an instance of <typeparamref name="T3"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> does not contain an instance of <typeparamref name="T3"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.op_Explicit(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})~`3">
            <summary>
            Attempts to cast an instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> to an instance of <typeparamref name="T4"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown if this instance of <see cref="T:Roslyn.LanguageServer.Protocol.SumType`4"/> does not contain an instance of <typeparamref name="T4"/>.</exception>
            <param name="sum">Instance to unwrap.</param>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.TryGetFirst(`0@)">
            <summary>
            Tries to get the value as the first specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.TryGetSecond(`1@)">
            <summary>
            Tries to get the value as the second specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.TryGetThird(`2@)">
            <summary>
            Tries to get the value as the third specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.TryGetFourth(`3@)">
            <summary>
            Tries to get the value as the fourth specified type.
            </summary>
            <param name="value">the value in the specified type/>.</param>
            <returns><see langword="true"/> if the type matches.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{``0})">
            <summary>
            Runs a delegate corresponding to which type is contained inside this instance.
            </summary>
            <typeparam name="TResult">The type that all the delegates will return.</typeparam>
            <param name="firstMatch">Delegate to handle the case where this instance contains a <typeparamref name="T1"/>.</param>
            <param name="secondMatch">Delegate to handle the case where this instance contains a <typeparamref name="T2"/>.</param>
            <param name="thirdMatch">Delegate to handle the case where this instance contains a <typeparamref name="T3"/>.</param>
            <param name="fourthMatch">Delegate to handle the case where this instance contains a <typeparamref name="T4"/>.</param>
            <param name="defaultMatch">
            Delegate to handle the case where this instance is uninhabited. If this delegate isn't provided the default
            <typeparamref name="TResult"/> will be returned instead.
            </param>
            <returns>The <typeparamref name="TResult"/> instance created by the delegate corresponding to the current type stored in this instance.</returns>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.Equals(Roslyn.LanguageServer.Protocol.SumType{`0,`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumType`4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SumTypeUtils">
            <summary>
            Utility methods for <see cref="T:Roslyn.LanguageServer.Protocol.ISumType"/> implementations.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SumTypeUtils.ValidateTypeParameter(System.Type)">
            <summary>
            Validates that <paramref name="type"/> is a valid type parameter for a SumType.
            </summary>
            <param name="type">The type to validate.</param>
            <exception cref="T:System.NotSupportedException">If <paramref name="type"/> is not supported as a type parameter for a
            SumType.</exception>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SymbolInformation">
            <summary>
            Class representing information about programming constructs like variables, classes, interfaces, etc.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#symbolInformation">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolInformation.Name">
            <summary>
            Gets or sets the name of this symbol.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolInformation.Kind">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.SymbolKind"/> of this symbol.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolInformation.Tags">
            <summary>
            Tags for this document symbol.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolInformation.Deprecated">
            <summary>
            Indicates whether this symbol is deprecated.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolInformation.Location">
            <summary>
            The location of this symbol, used by a tool to reveal the location in the editor.
            <para>
            If the symbol is selected in the tool the range's start information is used to
            position the cursor. So the range usually spans more then the actual symbol's
            name and does normally include things like visibility modifiers.
            </para>
            <para>
            The range doesn't have to denote a node range in the sense of an abstract
            syntax tree. It can therefore not be used to re-construct a hierarchy of
            the symbols.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolInformation.ContainerName">
            <summary>
            <para>
            The name of the symbol containing this symbol.
            </para>
            This information is for user interface purposes (e.g. to render a qualifier in
            the user interface if necessary). It can't be used to re-infer a hierarchy for
            the document symbols.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SymbolInformation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SymbolInformation.Equals(Roslyn.LanguageServer.Protocol.SymbolInformation)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.SymbolInformation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SymbolKind">
             <summary>
             Enum which represents the various kinds of symbols.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#symbolKind">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.File">
            <summary>
            Symbol is a file.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Module">
            <summary>
            Symbol is a module.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Namespace">
            <summary>
            Symbol is a namespace.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Package">
            <summary>
            Symbol is a package.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Class">
            <summary>
            Symbol is a class.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Method">
            <summary>
            Symbol is a method.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Property">
            <summary>
            Symbol is a property.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Field">
            <summary>
            Symbol is a field.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Constructor">
            <summary>
            Symbol is a constructor.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Enum">
            <summary>
            Symbol is an enum.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Interface">
            <summary>
            Symbol is an interface.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Function">
            <summary>
            Symbol is a function.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Variable">
            <summary>
            Symbol is a variable.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Constant">
            <summary>
            Symbol is a constant.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.String">
            <summary>
            Symbol is a string.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Number">
            <summary>
            Symbol is a number.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Boolean">
            <summary>
            Symbol is a boolean.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Array">
            <summary>
            Symbol is an array.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Object">
            <summary>
            Symbol is an object.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Key">
            <summary>
            Symbol is a key.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Null">
            <summary>
            Symbol is null.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.EnumMember">
            <summary>
            Symbol is an enum member.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Struct">
            <summary>
            Symbol is a struct.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Event">
            <summary>
            Symbol is an event.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.Operator">
            <summary>
            Symbol is an operator.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolKind.TypeParameter">
            <summary>
            Symbol is a type parameter.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SymbolKindSetting">
            <summary>
            Represents the <see cref="T:Roslyn.LanguageServer.Protocol.SymbolKind"/> values that the client supports.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolKindSetting.ValueSet">
            <summary>
            The symbol kind values the client supports.
            <para>
            When this property exists the client also guarantees that it will handle values outside
            its set gracefully and falls back to a default value when unknown.
            </para>
            <para>
            If this property is not present the client only supports the symbol kinds
            from <see cref="F:Roslyn.LanguageServer.Protocol.SymbolKind.File"/> to <see cref="F:Roslyn.LanguageServer.Protocol.SymbolKind.Array"/> as
            defined in the initial version of the protocol.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SymbolSetting">
            <summary>
            Capabilities specific to the <c>workspace/symbol</c> request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_symbol">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolSetting.SymbolKind">
            <summary>
            Specific capabilities for <see cref="P:Roslyn.LanguageServer.Protocol.SymbolSetting.SymbolKind"/> in <c>workspace/symbol</c> requests
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolSetting.TagSupport">
            <summary>
            The client supports tags on <see cref="T:Roslyn.LanguageServer.Protocol.SymbolInformation"/> and <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbol"/>.
            <para>
            Clients supporting tags have to handle unknown tags gracefully.
            </para>
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolSetting.ResolveSupport">
            <summary>
            The client support partial workspace symbols. The client will send the
            request `workspaceSymbol/resolve` to the server to resolve additional
            properties.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SymbolTag">
            <summary>
            Symbol tags are extra annotations that tweak the rendering of a symbol.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.SymbolTag.Deprecated">
            <summary>
            Render a symbol as obsolete, usually using a strike-out.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SymbolTagSupport">
            <summary>
            Describes the tags supported by the client on <see cref="T:Roslyn.LanguageServer.Protocol.SymbolInformation"/> and <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbol"/>.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SymbolTagSupport.ValueSet">
            <summary>
            The tags supported by the client.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.SynchronizationSetting">
            <summary>
            Class which represents synchronization initialization setting.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentSyncClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SynchronizationSetting.WillSave">
            <summary>
            Whether the client supports sending <c>textDocument/willSave</c> notifications.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SynchronizationSetting.WillSaveWaitUntil">
            <summary>
            Whether the client supports sending <c>textDocument/willSaveWaitUntil</c>
            notifications and waits for a response providing text edits which will be
            applied to the document before it is saved.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.SynchronizationSetting.DidSave">
            <summary>
            Whether the client supports sending <c>textDocument/didSave</c> notifications.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentChangeRegistrationOptions">
            <summary>
            Class representing the registration options for didChange events.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentChangeRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentChangeRegistrationOptions.SyncKind">
            <summary>
            How documents are synced to the server. See <see cref="F:Roslyn.LanguageServer.Protocol.TextDocumentSyncKind.Full"/>
            and <see cref="F:Roslyn.LanguageServer.Protocol.TextDocumentSyncKind.Incremental"/>.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities">
            <summary>
            Class which represents text document capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Synchronization">
            <summary>
            Gets or sets the synchronization setting.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Completion">
            <summary>
            Capabilities specific to the `textDocument/completion` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Hover">
            <summary>
            Capabilities specific to the `textDocument/hover` request
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.SignatureHelp">
            <summary>
            Capabilities specific to the `textDocument/signatureHelp` request
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Declaration">
            <summary>
            Capabilities specific to the `textDocument/declaration` request
            </summary>
            <remarks>Since LSP 3.14</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Definition">
            <summary>
            Capabilities specific to the `textDocument/definition` request
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.TypeDefinition">
            <summary>
            Capabilities specific to the `textDocument/typeDefinition` request.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Implementation">
            <summary>
            Capabilities specific to the `textDocument/implementation` request.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.References">
            <summary>
            Capabilities specific to the `textDocument/references` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.DocumentHighlight">
            <summary>
            Capabilities specific to the `textDocument/documentHighlight` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.DocumentSymbol">
            <summary>
            Capabilities specific to the `textDocument/documentSymbol` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.CodeAction">
            <summary>
            Capabilities specific to the `textDocument/codeAction` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.CodeLens">
            <summary>
            Capabilities specific to the `textDocument/codeLens` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.DocumentLink">
            <summary>
            Capabilities specific to the `textDocument/documentLink` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.ColorProvider">
            <summary>
            Capabilities specific to the `textDocument/documentColor` and the `textDocument/colorPresentation` request.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Formatting">
            <summary>
            Capabilities specific to the `textDocument/formatting` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.RangeFormatting">
            <summary>
            Capabilities specific to the `textDocument/rangeFormatting` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.OnTypeFormatting">
            <summary>
            Capabilities specific to the `textDocument/onTypeFormatting` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Rename">
            <summary>
            Capabilities specific to the `textDocument/rename` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.PublishDiagnostics">
            <summary>
            Capabilities specific to the `textDocument/publishDiagnostics` notification.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.FoldingRange">
            <summary>
            Capabilities specific to the `textDocument/foldingRange` request.
            </summary>
            <remarks>Since LSP 3.10</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.SelectionRange">
            <summary>
            Capabilities specific to the `textDocument/selectionRange` request.
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.LinkedEditingRange">
            <summary>
            Capabilities specific to the `textDocument/linkedEditingRange` request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.CallHierarchy">
            <summary>
            Capabilities specific to the various call hierarchy requests.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.SemanticTokens">
            <summary>
            Capabilities specific to the various semantic token requests.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Moniker">
            <summary>
            Capabilities specific to the `textDocument/moniker` request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.TypeHierarchy">
            <summary>
            Capabilities specific to the various type hierarchy requests.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.InlineValue">
            <summary>
            Capabilities specific to the `textDocument/inlineValue` request.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.InlayHint">
            <summary>
            Capabilities specific to the `textDocument/inlayHint` request.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentClientCapabilities.Diagnostic">
            <summary>
            Capabilities specific to the diagnostic pull model.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentContentChangeEvent">
            <summary>
            Class which encapsulates a text document changed event.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentContentChangeEvent">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentContentChangeEvent.Range">
            <summary>
            Gets or sets the range of the text that was changed.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentContentChangeEvent.RangeLength">
            <summary>
            Gets or sets the length of the range that got replaced.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentContentChangeEvent.Text">
            <summary>
            Gets or sets the new text of the range/document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentEdit">
            <summary>
            Class representing a set of changes to a single text document.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentEdit">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentEdit.TextDocument">
            <summary>
            Gets or sets a document identifier indication which document to apply the edits to.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentEdit.Edits">
            <summary>
            Gets or sets the array of edits to be applied to the document.
            </summary>
            <para>
            Use of <see cref="T:Roslyn.LanguageServer.Protocol.AnnotatedTextEdit"/> is guarded by the capability <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.ChangeAnnotationSupport"/>.
            </para>
            <remarks>
            Since LSP 3.16
            </remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier">
             <summary>
             Class which identifies a text document.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentIdentifier">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier.Uri">
            <summary>
            Gets or sets the URI of the text document.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier.Equals(Roslyn.LanguageServer.Protocol.TextDocumentIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentItem">
             <summary>
             Class which represents a text document.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentItem">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentItem.Uri">
            <summary>
            Gets or sets the document URI.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentItem.LanguageId">
            <summary>
            Gets or sets the document language identifier.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentItem.Version">
            <summary>
            Gets or sets the document version.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentItem.Text">
            <summary>
            Gets or sets the content of the opened text document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentPositionParams">
             <summary>
             Class which represents a position within a text document.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentPositionParams">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentPositionParams.TextDocument">
            <summary>
            Gets or sets the value which identifies the document.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentPositionParams.Position">
            <summary>
            Gets or sets the value which indicates the position within the document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentRegistrationOptions">
             <summary>
             Class representing the registration options for many different text document functions.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentRegistrationOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentRegistrationOptions.DocumentSelector">
            <summary>
            Gets or sets the document filters for this registration option.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentSaveReason">
             <summary>
             Enum representing the reason a document was saved.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentSaveReason">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TextDocumentSaveReason.Manual">
            <summary>
            Save was manually triggered.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TextDocumentSaveReason.AfterDelay">
            <summary>
            Save was automatic after some delay.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TextDocumentSaveReason.FocusOut">
            <summary>
            Save was automatic after the editor lost focus.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentSaveRegistrationOptions">
            <summary>
            Options when registering for document-specific 'textDocument/didSave' notifications
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentSaveRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentSaveRegistrationOptions.IncludeText">
            <summary>
            The client is supposed to include the content on save.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentSyncKind">
             <summary>
             Enum which represents the various ways to sync text documents.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentSyncKind">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TextDocumentSyncKind.None">
            <summary>
            Documents should not be synced at all.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TextDocumentSyncKind.Full">
            <summary>
            Documents are synced by always sending the full text.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TextDocumentSyncKind.Incremental">
            <summary>
            Documents are synced by sending only incremental updates.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions">
             <summary>
             Class which represents configuration values indicating how text documents should be synced.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocumentSyncOptions">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions.OpenClose">
            <summary>
            Gets or sets a value indicating whether open and close notifications are sent to the server.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions.Change">
            <summary>
            Gets or sets the value indicating how text documents are synced with the server.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions.WillSave">
            <summary>
            Gets or sets a value indicating whether 'will save' notifications are sent to the server.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions.WillSaveWaitUntil">
            <summary>
            Gets or sets a value indicating whether 'will save until' notifications are sent to the server.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextDocumentSyncOptions.Save">
            <summary>
            Gets or sets a value indicating whether save notifications are sent to the server.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TextEdit">
             <summary>
             Class which represents a text edit to a document.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textEdit">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextEdit.Range">
            <summary>
            Gets or sets the value which indicates the range of the text edit.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.TextEdit.NewText">
            <summary>
            Gets or sets the value of the new text.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TraceSetting">
             <summary>
             Value representing the language server trace setting.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#traceValue">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TraceSetting.#ctor(System.String)">
             <summary>
             Value representing the language server trace setting.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#traceValue">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TraceSetting.Off">
            <summary>
            Setting for 'off'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TraceSetting.Messages">
            <summary>
            Setting for 'messages'.
            </summary>
        </member>
        <member name="F:Roslyn.LanguageServer.Protocol.TraceSetting.Verbose">
            <summary>
            Setting for 'verbose'.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.TraceValue">
             <summary>
             A TraceValue represents the level of verbosity with which the server systematically reports its
             execution trace using <see cref="F:Roslyn.LanguageServer.Protocol.Methods.LogTraceName"/>. The initial trace value is set by the
             client at initialization and can be modified later using the <see cref="F:Roslyn.LanguageServer.Protocol.Methods.SetTraceName"/> notification.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#traceValue">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.TraceValue.#ctor(System.String)">
             <summary>
             A TraceValue represents the level of verbosity with which the server systematically reports its
             execution trace using <see cref="F:Roslyn.LanguageServer.Protocol.Methods.LogTraceName"/>. The initial trace value is set by the
             client at initialization and can be modified later using the <see cref="F:Roslyn.LanguageServer.Protocol.Methods.SetTraceName"/> notification.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#traceValue">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.UnchangedDocumentDiagnosticReport">
            <summary>
            A diagnostic report indicating that the last returned report is still accurate.
            A server can only return this if result ids are provided.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#unchangedDocumentDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.UnchangedDocumentDiagnosticReport.Kind">
            <summary>
            Gets the kind of this report.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.UnchangedDocumentDiagnosticReport.ResultId">
            <summary>
            A result id which will be sent on the next
            diagnostic request for the same document.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.Unregistration">
             <summary>
             Class representing the information needed for unregistering a capability.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#unregistration">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Unregistration.Id">
            <summary>
            Gets or sets the id of the unregistration.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.Unregistration.Method">
            <summary>
            Gets or sets the method to unregister.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.UnregistrationParams">
             <summary>
             Class representing the parameter sent for the client/unregisterCapability request.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#unregistrationParams">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.UnregistrationParams.Unregistrations">
            <summary>
            Gets or sets the capabilities to unregister.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier">
             <summary>
             Class which represents a text document, but has a version identifier.
            
             See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#versionedTextDocumentIdentifier">Language Server Protocol specification</see> for additional information.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier.Version">
            <summary>
            Gets or sets the version of the document.
            </summary>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier.Equals(Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Roslyn.LanguageServer.Protocol.VersionedTextDocumentIdentifier.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WillSaveTextDocumentParams">
            <summary>
            Class representing the parameters sent for the textDocument/willSave request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#willSaveTextDocumentParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WillSaveTextDocumentParams.TextDocument">
            <summary>
            Gets or sets the <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentIdentifier"/> representing the document to be saved.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WillSaveTextDocumentParams.Reason">
            <summary>
            Gets or sets the reason that the text document was saved.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WindowClientCapabilities">
            <summary>
            Notebook specific client capabilities
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WindowClientCapabilities.WorkDoneProgress">
            <summary>
            Indicates whether the client supports server initiated
            progress using the `window/workDoneProgress/create` request.
            <para>
            The capability also controls Whether client supports handling
            of progress notifications. If set, servers are allowed to report a
            `workDoneProgress` property in the request specific server
            capabilities.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WindowClientCapabilities.ShowMessage">
            <summary>
            The client supports sending execution summary data per cell.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WindowClientCapabilities.ShowDocument">
            <summary>
            Client capabilities for the show document request.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkDoneProgress">
            <summary>
            An <c>IProgress&lt;WorkDoneProgress></c> is used to report progress to the server via the <c>$/progress</c> notification.
            <para>
            The derived classes <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin"/>, <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressReport"/> and <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressEnd"/>
            are used to report the beginning, progression, and end of the operation.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin">
            <summary>
            Used to report the beginning of an operation to an <c>IProgress&lt;WorkDoneProgress></c>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workDoneProgressBegin">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin.Title">
            <summary>
            Title of the progress operation. Used to briefly inform about the kind of operation being performed.
            Examples: "Indexing" or "Linking dependencies".
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin.Cancellable">
            <summary>
            Controls if a cancel button should show to allow the user to cancel the
            long running operation. Clients that don't support cancellation are
            allowed to ignore the setting.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin.Message">
             <summary>
             Optional, more detailed associated progress message. Contains
             complementary information to the `title`.
            
             Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin.Percentage">
            <summary>
            Optional progress percentage to display (value 100 is considered 100%).
            If not provided infinite progress is assumed and clients are allowed
            to ignore the `percentage` value in subsequent in report notifications.
            
            The value should be steadily rising. Clients are free to ignore values
            that are not following this rule. The value range is [0, 100]
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressCancelParams">
            <summary>
            The parameters sent with the 'window/workDoneProgress/cancel' notification.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_workDoneProgress_cancel">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressCancelParams.Token">
            <summary>
            The token used to report progress.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressCreateParams">
            <summary>
            The parameters sent with the 'window/workDoneProgress/create' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#window_workDoneProgress_create">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressCreateParams.Token">
            <summary>
            The token to be used to report progress.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressEnd">
            <summary>
            Used to report the end of an operation to an <c>IProgress&lt;WorkDoneProgress></c>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workDoneProgressEnd">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressEnd.Message">
            <summary>
            Optional final message indicating for example the outcome of the operation.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressReport">
            <summary>
            Used to report progress of an operation to an <c>IProgress&lt;WorkDoneProgress></c>.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workDoneProgressReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.15</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressReport.Cancellable">
            <summary>
            Controls enablement state of a cancel button. This property is only valid
            if a cancel button got requested in the <see cref="T:Roslyn.LanguageServer.Protocol.WorkDoneProgressBegin"/> payload.
            Clients that don't support cancellation or don't support control the
            button's enablement state are allowed to ignore the setting.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressReport.Message">
             <summary>
             Optional, more detailed associated progress message. Contains
             complementary information to the `title`.
            
             Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
             
             If unset, the previous progress message (if any) is still valid.
             </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkDoneProgressReport.Percentage">
            <summary>
            Optional progress percentage to display (value 100 is considered 100%).
            If not provided infinite progress is assumed and clients are allowed
            to ignore the `percentage` value in subsequent in report notifications.
            
            The value should be steadily rising. Clients are free to ignore values
            that are not following this rule. The value range is [0, 100]
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities">
            <summary>
            Class which represents workspace capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#clientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.ApplyEdit">
            <summary>
            Whether the client supports applying batch edits to the workspace by supporting the request 'workspace/applyEdit'
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.WorkspaceEdit">
            <summary>
            Capabilities specific to <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceEdit"/>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.DidChangeConfiguration">
            <summary>
            Capabilities specific to the `workspace/didChangeConfiguration` notification.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.DidChangeWatchedFiles">
            <summary>
            Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.Symbol">
            <summary>
            Capabilities specific to the `workspace/symbol` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.ExecuteCommand">
            <summary>
            Capabilities specific to the `workspace/executeCommand` request.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.WorkspaceFolders">
            <summary>
            The client has support for workspace folders.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.Configuration">
            <summary>
            The client supports `workspace/configuration` requests.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.SemanticTokens">
            <summary>
            Capabilities specific to the semantic token requests scoped to the workspace.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.CodeLens">
            <summary>
            Capabilities specific to the code lens requests scoped to the workspace.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.FileOperations">
            <summary>
            The client's capabilities for file requests/notifications.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.InlineValue">
            <summary>
            Client workspace capabilities specific to inline values.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.InlayHint">
            <summary>
            Gets of sets capabilities specific to the inlay hint requests scoped to the workspace.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceClientCapabilities.Diagnostics">
            <summary>
            Gets or sets capabilities indicating what support the client has for workspace pull diagnostics.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticParams">
            <summary>
            Parameters of the 'workspace/diagnostic' request
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceDiagnosticParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>
            Since LSP 3.17
            </remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticParams.PartialResultToken">
            <summary>
            An <see cref="T:System.IProgress`1"/> instance that can be used to report partial results
            via the <c>$/progress</c> notification.
            <para>
            Note that the first literal sent needs to be a <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticReport"/>
            followed by n <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticReportPartialResult"/> literals.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticParams.Identifier">
            <summary>
            The additional identifier provided during registration.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticParams.PreviousResultId">
            <summary>
            The currently known diagnostic reports with their previous result ids.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticReport">
            <summary>
            Class representing a workspace diagnostic report.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticReport.Items">
            <summary>
            Gets or sets the items in this diagnostic report.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticReportPartialResult">
            <summary>
            Class representing a partial result for a workspace diagnostic report.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceDiagnosticReportPartialResult">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceDiagnosticReportPartialResult.Items">
            <summary>
            Gets or sets the items in this diagnostic report.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceEdit">
            <summary>
            Class representing a request sent from a language server to modify resources in the workspace.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceEdit">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEdit.Changes">
            <summary>
            Holds changes to existing resources.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEdit.DocumentChanges">
            <summary>
            Depending on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.ResourceOperations"/>,
            document changes are either an array of <see cref="T:Roslyn.LanguageServer.Protocol.TextDocumentEdit"/> to express changes
            to n different text documents where each text document edit addresses a specific version of a text document,
            or it can contain above `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.
            <para>
            Whether a client supports versioned document edits is expressed via the
            <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.DocumentChanges"/> client capability.
            </para>
            <para>
            If a client neither supports <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.DocumentChanges"/> nor
            <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.ResourceOperations"/> then only plain <see cref="T:Roslyn.LanguageServer.Protocol.TextEdit"/>s
            using the <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEdit.Changes"/> property are supported.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEdit.ChangeAnnotations">
            <summary>
            A map of change annotations that can be referenced in <see cref="T:Roslyn.LanguageServer.Protocol.AnnotatedTextEdit"/>s or create, rename
            and delete file / folder operations.
            <para>
            </para>
            Whether clients honor this property depends on the client capability <see cref="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.ChangeAnnotationSupport"/>.
            </summary>
            <remarks>Since 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting">
            <summary>
            Class which represents initialization settings for workspace edit.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceEditClientCapabilities">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.DocumentChanges">
            <summary>
            Whether the client supports versioned document changes in <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceEdit"/>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.ResourceOperations">
            <summary>
            The resource operations the client supports.
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.FailureHandling">
            <summary>
            The client's failure handling strategy when applying workspace changes.
            </summary>
            <remarks>Since LSP 3.13</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.NormalizesLineEndings">
            <summary>
            Whether the client normalizes line endings to the client specific setting
            when applying workspace changes.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceEditSetting.ChangeAnnotationSupport">
            <summary>
            Whether the client supports change annotations on workspace edits, and
            information about how it handles them.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceFolder">
            <summary>Describes a workspace folder</summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFolder.Uri">
            <summary>
            The URI for this workspace folder.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFolder.Name">
            <summary>
            The name of the workspace folder used in the UI.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceFullDocumentDiagnosticReport">
            <summary>
            Class representing a full document diagnostic report for workspace diagnostic result.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceFullDocumentDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFullDocumentDiagnosticReport.Uri">
            <summary>
            Gets or sets the URI associated with this diagnostic report.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceFullDocumentDiagnosticReport.Version">
            <summary>
            Gets or sets the version number for which the diagnostics are reported.
            If the document is not marked as open 'null' can be provided.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceServerCapabilities">
            <summary>
            Workspace specific server capabilities.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceServerCapabilities.WorkspaceFolders">
            <summary>
            The server supports workspace folder.
            </summary>
            <remarks>Since LSP 3.6</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceServerCapabilities.FileOperations">
            <summary>
            The server is interested in file notifications/requests.
            </summary>
            <remarks>Since LSP 3.16</remarks>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbol">
            <summary>
            A special workspace symbol that supports locations without a range
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceSymbol">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbol.Name">
            <summary>
            The name of this symbol.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbol.Kind">
            <summary>
            The kind of the symbol
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbol.Tags">
            <summary>
            Tags for this symbol.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbol.ContainerName">
            <summary>
            The name of the symbol containing this symbol. This information is for
            user interface purposes (e.g. to render a qualifier in the user interface
            if necessary). It can't be used to re-infer a hierarchy for the document
            symbols.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbol.Location">
            <summary>
            The location of this symbol. Whether a server is allowed to
            return a location without a range depends on the client
            workspace capability <see cref="P:Roslyn.LanguageServer.Protocol.SymbolSetting.ResolveSupport"/>
            </summary>
            <seealso cref="P:Roslyn.LanguageServer.Protocol.SymbolInformation.Location"/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbol.Data">
            <summary>
            Data field that is preserved on a workspace symbol between a
            workspace symbol request and a workspace symbol resolve request.
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbolLocation">
            <summary>
            A workspace symbol location without a range
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbolOptions">
            <summary>
            Class which represents workspace symbols capabilities.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceSymbolOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbolOptions.ResolveProvider">
            <summary>
            The server provides support to resolve additional
            information for a workspace symbol.
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbolOptions.WorkDoneProgress">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbolParams">
            <summary>
            Class which represents the parameter that's sent with the 'workspace/symbol' request.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceSymbolParams">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbolParams.Query">
            <summary>
            Gets or sets the query (a non-empty string).
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbolParams.PartialResultToken">
            <inheritdoc/>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbolParams.WorkDoneToken">
            <inheritdoc/>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbolRegistrationOptions">
            <summary>
            Registration options for <see cref="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbolOptions"/>
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceSymbolRegistrationOptions">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceSymbolResolveSupport">
            <summary>
            Describes the client's support for partial workspace symbols
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceSymbolResolveSupport.Properties">
            <summary>
            The properties that a client can resolve lazily. Usually `location.range`
            </summary>
        </member>
        <member name="T:Roslyn.LanguageServer.Protocol.WorkspaceUnchangedDocumentDiagnosticReport">
            <summary>
            Class representing a unchanged document diagnostic report for workspace diagnostic result.
            <para>
            See the <see href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspaceUnchangedDocumentDiagnosticReport">Language Server Protocol specification</see> for additional information.
            </para>
            </summary>
            <remarks>Since LSP 3.17</remarks>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceUnchangedDocumentDiagnosticReport.Uri">
            <summary>
            Gets or sets the URI associated with this diagnostic report.
            </summary>
        </member>
        <member name="P:Roslyn.LanguageServer.Protocol.WorkspaceUnchangedDocumentDiagnosticReport.Version">
            <summary>
            Gets or sets the version number for which the diagnostics are reported.
            If the document is not marked as open 'null' can be provided.
            </summary>
        </member>
    </members>
</doc>
